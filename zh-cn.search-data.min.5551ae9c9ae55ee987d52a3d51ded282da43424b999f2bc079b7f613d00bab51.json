[{"id":0,"href":"/hugo/functions/functionsquickreference/","title":"函数快速参考","section":"函数","content":"将以下英文翻译为中文：\nFunctions Quick Reference # https://gohugo.io/functions/\nGo templates are lightweight but extensible. Go itself supplies built-in functions, including comparison operators and other basic tools. These are listed in the Go template documentation. Hugo has added additional functions to the basic template logic.\n"},{"id":1,"href":"/hugo/abouthugo/hugossecuritymodel/","title":"Hugo 的安全模型","section":"关于Hugo","content":" Hugo\u0026rsquo;s Security Model - Hugo 的安全模型 # https://gohugo.io/about/security-model/\nHugo 安全模型的概述。\n运行时安全 # ​\tHugo 生成静态输出，因此一旦构建完成，运行时就是浏览器（假设输出为 HTML）和任何与之集成的服务器（API）。\n​\t但在开发和构建站点时，运行时是 hugo 可执行文件。保护运行时可能是一个真正的挑战。\n​\tHugo 的主要方法是沙盒化和采用严格默认的安全策略：\nHugo 有一个虚拟文件系统，只有主项目（而不是第三方组件）可以挂载项目根目录外的目录或文件。 只有主项目可以遍历符号链接。 用户定义的组件只能以只读方式访问文件系统。 我们调用一些外部二进制文件来支持 Asciidoctor等功能，但这些二进制文件及其标志都是预定义的，并且默认情况下被禁用（请参见以下安全策略）。运行任意外部操作系统命令的一般函数已经讨论过，但由于安全问题而未实现。 安全策略 # ​\tHugo 具有内置的安全策略，限制对 os/exec、远程通信等的访问。\n​\t默认配置如下。任何使用安全策略允许列表中不存在的功能构建都将失败，并显示详细的消息，说明需要进行哪些操作。这些设置大多是允许列表（字符串或切片、正则表达式或none不匹配任何内容）。\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml security: enableInlineShortcodes: false exec: allow: - ^dart-sass-embedded$ - ^go$ - ^npx$ - ^postcss$ osEnv: - (?i)^((HTTPS?|NO)_PROXY|PATH(EXT)?|APPDATA|TE?MP|TERM|GO\\w+)$ funcs: getenv: - ^HUGO_ - ^CI$ http: methods: - (?i)GET|POST urls: - .* ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [security] enableInlineShortcodes = false [security.exec] allow = ['^dart-sass-embedded$', '^go$', '^npx$', '^postcss$'] osEnv = ['(?i)^((HTTPS?|NO)_PROXY|PATH(EXT)?|APPDATA|TE?MP|TERM|GO\\w+)$'] [security.funcs] getenv = ['^HUGO_', '^CI$'] [security.http] methods = ['(?i)GET|POST'] urls = ['.*'] ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;security\u0026quot;: { \u0026quot;enableInlineShortcodes\u0026quot;: false, \u0026quot;exec\u0026quot;: { \u0026quot;allow\u0026quot;: [ \u0026quot;^dart-sass-embedded$\u0026quot;, \u0026quot;^go$\u0026quot;, \u0026quot;^npx$\u0026quot;, \u0026quot;^postcss$\u0026quot; ], \u0026quot;osEnv\u0026quot;: [ \u0026quot;(?i)^((HTTPS?|NO)_PROXY|PATH(EXT)?|APPDATA|TE?MP|TERM|GO\\\\w+)$\u0026quot; ] }, \u0026quot;funcs\u0026quot;: { \u0026quot;getenv\u0026quot;: [ \u0026quot;^HUGO_\u0026quot;, \u0026quot;^CI$\u0026quot; ] }, \u0026quot;http\u0026quot;: { \u0026quot;methods\u0026quot;: [ \u0026quot;(?i)GET|POST\u0026quot; ], \u0026quot;urls\u0026quot;: [ \u0026quot;.*\u0026quot; ] } } } ``` ​\t注意，Hugo 中的这些和其他配置设置可以被操作系统环境覆盖。如果您想阻止所有远程 HTTP 获取数据：\nHUGO_SECURITY_HTTP_URLS=none hugo 依赖安全性 # ​\tHugo 作为一个静态二进制文件使用 Go Modules 来管理其依赖项。Go Modules 有几个保障措施，其中之一是 go.sum 文件。这是所有依赖项（包括传递依赖项）的预期密码校验和的数据库。\n​\tHugo Modules 是在 Go Modules 的功能之上构建的一个功能。像 Go Modules 一样，使用 Hugo Modules 的 Hugo 项目将有一个 go.sum 文件。我们建议将此文件提交到您的版本控制系统中。如果存在校验和不匹配，则 Hugo 构建将失败，这将表明依赖项被篡改。\nWeb 应用程序安全性 # ​\t以下是 OWASP定义的安全威胁。\n​\t对于 HTML 输出，这是核心安全模型：\nhttps://pkg.go.dev/html/template#hdr-Security_Model\n简而言之：\n​\t模板和配置作者（您）是可信任的，但您发送的数据不是。这就是为什么有时需要使用安全函数，如 safeHTML，以避免转义您知道是安全的数据。正如文档中所指出的一样，上述规则有一个例外：如果您启用内联shortcode，您也表明在内容文件中shortcode和数据处理是可信的，因为这些宏被视为纯文本。值得一提的是，Hugo 是一个静态站点生成器，没有动态用户输入的概念。\n​\t对于内容， 默认的 Markdown 渲染器配置为删除或转义潜在的不安全内容。如果您信任自己的内容，则可以重新配置此行为。\n另请参阅 ： # Hugo 与通用数据保护条例（GDPR） "},{"id":2,"href":"/hugo/installation/macos/","title":"macOS","section":"安装Hugo","content":" macOS # https://gohugo.io/installation/macos/\nInstall Hugo on macOS.\nEditions # Hugo is available in two editions: standard and extended. With the extended edition you can:\nEncode WebP images (you can decode WebP images with both editions) Transpile Sass to CSS using the embedded LibSass transpiler We recommend that you install the extended edition.\nPrerequisites # Although not required in all cases, Git and Go are often used when working with Hugo.\nGit is required to:\nUse the Hugo Modules feature Build Hugo from source Install a theme as a Git submodule Access commit information from a local Git repository Host your site with services such as AWS Amplify, CloudCannon, Cloudflare Pages, GitHub Pages, GitLab Pages, and Netlify. Go is required to:\nUse the Hugo Modules feature Build Hugo from source Please refer to the Git and Go documentation for installation instructions.\nPrebuilt binaries # Prebuilt binaries are available for a variety of operating systems and architectures. Visit the latest release page, and scroll down to the Assets section.\nDownload the archive for the desired edition, operating system, and architecture Extract the archive Move the executable to the desired directory Add this directory to the PATH environment variable Verify that you have execute permission on the file Please consult your operating system documentation if you need help setting file permissions or modifying your PATH environment variable.\nIf you do not see a prebuilt binary for the desired edition, operating system, and architecture, install Hugo using one of the methods described below.\nPackage managers # Homebrew # Homebrew is a free and open source package manager for macOS and Linux. This will install the extended edition of Hugo:\nbrew install hugo MacPorts # MacPorts is a free and open source package manager for macOS. This will install the extended edition of Hugo:\nsudo port install hugo Docker # Erlend Klakegg Bergheim graciously maintains Docker images based on images for Alpine Linux, Busybox, Debian, and Ubuntu.\ndocker pull klakegg/hugo Build from source # To build Hugo from source you must:\nInstall Git Install Go version 1.18 or later Update your PATH environment variable as described in the Go documentation The install directory is controlled by the GOPATH and GOBIN environment variables. If GOBIN is set, binaries are installed to that directory. If GOPATH is set, binaries are installed to the bin subdirectory of the first directory in the GOPATH list. Otherwise, binaries are installed to the bin subdirectory of the default GOPATH ($HOME/go or %USERPROFILE%\\go).\nThen build and test:\ngo install -tags extended github.com/gohugoio/hugo@latest hugo version Comparison # Prebuilt binaries Package managers Docker Build from source Easy to install? ✔️ ✔️ ✔️ ✔️ Easy to upgrade? ✔️ ✔️ ✔️ ✔️ Easy to downgrade? ✔️ ✔️ 1 ✔️ ✔️ Automatic updates? ❌ ❌ 2 ❌ 2 ❌ Latest version available? ✔️ ✔️ ✔️ ✔️ Easy if a previous version is still installed. ↩︎ Possible but requires advanced configuration. ↩︎ ↩︎ 另请参阅 # Linux Windows BSD Host on 21YunBox Host on GitHub "},{"id":3,"href":"/hugo/abouthugo/","title":"关于Hugo","section":"文档","content":" 关于 Hugo # https://gohugo.io/about/\nHugo is not your average static site generator.\n​\tHugo 不是一般的静态站点生成器。\n"},{"id":4,"href":"/hugo/gettingstarted/quickstart/","title":"快速入门","section":"开始入门","content":" Quick Start - 快速入门 # https://gohugo.io/getting-started/quick-start/\n​\t学习如何在几分钟内创建一个 Hugo 站点。\n​\t在本教程中，您将会：\n创建一个站点 添加内容 配置站点 发布站点 先决条件 # ​\t在开始本教程之前，您必须：\n安装 Hugo（扩展版） 安装 Git ​\t您还必须熟悉使用命令行操作。\n创建一个站点 # 命令 # 如果您是 Windows 用户：\n不要使用命令提示符 不要使用 Windows PowerShell 请在 PowerShell 或类似于 WSL 或 Git Bash 的 Linux 终端中运行这些命令。 PowerShell 和 Windows PowerShell 是不同的应用程序。\n​\t运行以下命令创建带有 Ananke主题的 Hugo 站点。下一节将对每个命令进行解释。\nhugo new site quickstart cd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; config.toml hugo server ​\t在终端中显示的 URL 上查看您的站点。按 Ctrl + C 停止 Hugo 的开发服务器。\n命令解释 # ​\t在 quickstart 目录中为项目创建目录结构：\nhugo new site quickstart ​\t将当前目录切换为项目根目录：\ncd quickstart ​\t在当前目录中初始化一个空的 Git 存储库：\ngit init ​\t将 Ananke主题克隆到 themes 目录中，并将其作为 Git submodule添加到项目中。\ngit submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke ​\t在站点配置文件中添加一行，指示当前主题：\necho \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; config.toml ​\t启动 Hugo 的开发服务器以查看站点：\nhugo server ​\t按 Ctrl + C 停止 Hugo 的开发服务器。\n添加内容 # ​\t在站点中添加一个新页面：\nhugo new posts/my-first-post.md ​\tHugo 在 content/posts 目录中创建了该文件。使用您的编辑器打开该文件。\n--- title: \u0026#34;My First Post\u0026#34; date: 2022-11-20T09:03:20-08:00 draft: true --- ​\t请注意，前置元数据中的draft值为 true。默认情况下，Hugo 不会在构建站点时发布草稿（draft）内容。了解有关草稿（draft）、将来（future）和过期（expired）内容的更多信息。\n​\t在文章的正文中添加一些 markdown，但不要更改draft的值。\n--- title: \u0026#34;My First Post\u0026#34; date: 2022-11-20T09:03:20-08:00 draft: true --- ## Introduction This is **bold** text, and this is *emphasized* text. Visit the [Hugo](https://gohugo.io) website! ​\t保存文件，然后启动 Hugo 的开发服务器以查看站点。您可以运行以下任一命令来包含草稿内容。\nhugo server --buildDrafts hugo server -D ​\t在终端中显示的 URL 上查看您的站点。随着您继续添加和更改内容，请保持开发服务器运行。\n​\tHugo 的渲染引擎符合 CommonMark 的 markdown 规范。CommonMark组织提供了一个有用（由参考实现驱动）的实时测试工具。\n配置站点 # ​\t使用编辑器打开项目根目录中的站点配置文件(config.toml)。\nbaseURL = \u0026#39;http://example.org/\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;My New Hugo Site\u0026#39; theme = \u0026#39;ananke\u0026#39; ​\t进行以下更改：\n将baseURL设置为您的生产站点。此值必须以协议开头，并以斜杠结尾，如上所示。 将languageCode设置为您的语言和地区。 设置生产站点的title。 ​\t启动Hugo的开发服务器以查看更改，记得包括草稿内容。\nhugo server -D ​\t大多数主题作者都会提供配置指南和选项。请务必访问您的主题存储库或文档站点了解详情。\n​\tAnanke主题的作者The New Dynamic为配置和使用提供文档。他们还提供演示站点。\n发布站点 # ​\t在此步骤中，您将发布站点，但不会部署它。\n​\t发布站点时，Hugo会在项目根目录中的public目录中创建整个静态站点。这包括HTML文件和assets，如图片、CSS文件和JavaScript文件。\n​\t在发布站点时，通常不希望包括草稿（draft）、将来（future）和过期（expired）内容。命令很简单。\nhugo ​\t要了解如何部署站点，请参阅主机和部署部分。\n寻求帮助 # ​\tHugo的论坛是一个活跃的用户和开发者社区，他们回答问题、分享知识和提供示例。超过20,000个主题的快速搜索通常可以回答您的问题。请确保在提问之前阅读有关请求帮助的信息。\n其他资源 # ​\t有关帮助您学习Hugo的其他资源，包括书籍和视频教程，请参见外部学习资源页面。\n另请参阅 # BSD 基本用法 外部学习资源 在21云盒上托管 在GitHub上托管 "},{"id":5,"href":"/hugo/functions/_adddate/","title":".AddDate","section":"函数","content":" .AddDate # ​\t返回将给定的年数、月数和天数添加到给定的 time.Time 值所得到的时间。\n语法 # .AddDate YEARS MONTHS DAYS {{ $d := \u0026#34;2022-01-01\u0026#34; | time.AsTime }} {{ $d.AddDate 0 0 1 | time.Format \u0026#34;2006-01-02\u0026#34; }} --\u0026gt; 2022-01-02 {{ $d.AddDate 0 1 1 | time.Format \u0026#34;2006-01-02\u0026#34; }} --\u0026gt; 2022-02-02 {{ $d.AddDate 1 1 1 | time.Format \u0026#34;2006-01-02\u0026#34; }} --\u0026gt; 2023-02-02 {{ $d.AddDate -1 -1 -1 | time.Format \u0026#34;2006-01-02\u0026#34; }} --\u0026gt; 2020-11-30 ​\t当增加月份或年份时，如果所得日期不存在，Hugo会将最终的 time.Time 值规范化。例如，在1月31日后增加一个月，会得到3月2日或3月3日，具体取决于年份。\n​\t参见Go团队的解释。\n{{ $d := \u0026#34;2023-01-31\u0026#34; | time.AsTime }} {{ $d.AddDate 0 1 0 | time.Format \u0026#34;2006-01-02\u0026#34; }} --\u0026gt; 2023-03-03 {{ $d := \u0026#34;2024-01-31\u0026#34; | time.AsTime }} {{ $d.AddDate 0 1 0 | time.Format \u0026#34;2006-01-02\u0026#34; }} --\u0026gt; 2024-03-02 {{ $d := \u0026#34;2024-02-29\u0026#34; | time.AsTime }} {{ $d.AddDate 1 0 0 | time.Format \u0026#34;2006-01-02\u0026#34; }} --\u0026gt; 2025-03-01 另请参阅 # .Format .Unix now time time.Format "},{"id":6,"href":"/hugo/hugopipes/hugopipes/","title":"Hugo Pipes 简介","section":"Hugo Pipes","content":" Hugo Pipes Introduction - Hugo Pipes 简介 # https://gohugo.io/hugo-pipes/introduction/\n​\tHugo Pipes 是 Hugo 的asset 处理函数集合。\n在 /assets 中查找资源 # ​\t这是关于全局资源（global Resources），它们在 /assets 内部挂载。有关 .Page 作用域内的资源，请参见 Page Resources。\n​\t请注意，您可以使用 Mount Configuration 将任何目录挂载到 Hugo 的虚拟 assets 文件夹中。\n函数 描述 resources.Get Get 会查找在 Hugo assets 文件系统中给定的文件名，并创建一个可用于进一步转换的 Resource 对象。请参见 使用 resources.Get 和 resources.GetRemote 获取资源。 resources.GetRemote 与 Get 相同，但它接受远程 URL。请参见 使用 resources.Get 和 resources.GetRemote 获取资源。 resources.GetMatch GetMatch 查找第一个与给定模式匹配的资源，如果没有找到，则返回 nil。有关使用的规则的更完整解释，请参见 Match。 resources.Match Match 获取与给定基本路径前缀匹配的所有资源，例如 \u0026ldquo;.png\u0026rdquo; 将匹配所有 png 文件。 \u0026ldquo;\u0026rdquo; 不匹配路径分隔符 (/)，因此，如果您将资源组织在子文件夹中，则需要明确指定，例如：\u0026ldquo;images/*.png\u0026rdquo;。要匹配包中任何 PNG 图像，您可以使用 \u0026ldquo;.png\u0026rdquo;，要匹配 images 文件夹下所有 PNG 图像，请使用 \u0026ldquo;images/.jpg\u0026rdquo;。匹配区分大小写。Match 通过使用相对于文件系统根的路径的文件名来匹配，路径使用 Unix 样式斜杠 (/)，没有前导斜杠，例如 \u0026ldquo;images/logo.png\u0026rdquo;。有关完整规则集，请参见 https://github.com/gobwas/glob。 ​\t有关此命名空间中所有模板函数的最新概述，请参见 GoDoc Page。\n使用 resources.Get 和 resources.GetRemote 获取资源 # ​\t为了使用 Hugo Pipes 处理资源，必须使用 resources.Get 或 resources.GetRemote 获取它作为一个 Resource。\n​\t对于 resources.Get，第一个参数是相对于 assets 目录/目录的本地路径：\n{{ $local := resources.Get \u0026#34;sass/main.scss\u0026#34; }} ​\t对于 resources.GetRemote，第一个参数是远程 URL：\n{{ $remote := resources.GetRemote \u0026#34;https://www.example.com/styles.scss\u0026#34; }} resources.Get and resources.GetRemote return nil if the resource is not found.\n​\tresources.Get 和 resources.GetRemote 如果找不到资源则返回 nil。\n新版本v0.110.0您可以使用返回的 Resource 中的 .Data 获取有关HTTP响应的信息。这对于没有任何正文的HEAD请求特别有用。数据对象包含：\nStatusCode\nHTTP状态代码，例如200状态\nHTTP状态文本，例如\u0026quot;200 OK\u0026quot; TransferEncoding\n传输编码，例如\u0026quot;chunked\u0026quot; ContentLength\n内容长度，例如1234 ContentType\n内容类型，例如\u0026quot;text/html\u0026quot;\n缓存 # ​\t默认情况下，Hugo基于给定的 URL 和 options (例如，标题)计算缓存键。\n新版本v0.97.0您可以通过在选项映射中设置 key 来覆盖此设置。这可用于更精细地控制远程资源的获取频率，例如：\n{{ $cacheKey := print $url (now.Format \u0026#34;2006-01-02\u0026#34;) }} {{ $resource := resource.GetRemote $url (dict \u0026#34;key\u0026#34; $cacheKey) }} 错误处理 # ​\t从 resources.GetRemote 返回的返回值包括一个 .Err 方法，如果调用失败，则会返回错误。如果您只想将任何错误记录为 WARNING ，则可以使用类似于下面的结构。\n{{ with resources.GetRemote \u0026#34;https://gohugo.io/images/gohugoio-card-1.png\u0026#34; }} {{ with .Err }} {{ warnf \u0026#34;%s\u0026#34; . }} {{ else }} \u0026lt;img src=\u0026#34;{{ .RelPermalink }}\u0026#34; width=\u0026#34;{{ .Width }}\u0026#34; height=\u0026#34;{{ .Height }}\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; {{ end }} {{ end }} ​\t请注意，如果您不自己处理 .Err ，Hugo将在您开始使用 Resource 对象的第一次构建时失败。\n远程选项 # ​\t在获取远程 Resource 时， resources.GetRemote 接收一个可选的选项映射作为第二个参数，例如：\n{{ $resource := resources.GetRemote \u0026#34;https://example.org/api\u0026#34; (dict \u0026#34;headers\u0026#34; (dict \u0026#34;Authorization\u0026#34; \u0026#34;Bearer abcd\u0026#34;)) }} ​\t如果您需要同一头键的多个值，请使用切片：\n{{ $resource := resources.GetRemote \u0026#34;https://example.org/api\u0026#34; (dict \u0026#34;headers\u0026#34; (dict \u0026#34;X-List\u0026#34; (slice \u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34;))) }} ​\t您还可以更改请求方法并设置请求正文：\n{{ $postResponse := resources.GetRemote \u0026#34;https://example.org/api\u0026#34; (dict \u0026#34;method\u0026#34; \u0026#34;post\u0026#34; \u0026#34;body\u0026#34; `{\u0026#34;complete\u0026#34;: true}` \u0026#34;headers\u0026#34; (dict \u0026#34;Content-Type\u0026#34; \u0026#34;application/json\u0026#34; ) )}} 远程资源的缓存 # ​\t使用 resources.GetRemote 获取的远程资源将缓存在磁盘上。有关详情，请参见配置文件缓存。\n复制资源 # New in v0.100.0\nresources.Copy 使您可以复制几乎任何Hugo Resource（唯一的例外是Page），可能最有用的是重命名：\n{{ $resized := $image.Resize \u0026#34;400x400\u0026#34; | resources.Copy \u0026#34;images/mynewname.jpg\u0026#34; }} \u0026lt;img src=\u0026#34;{{ $resized.RelPermalink }}\u0026#34;\u0026gt; Asset 目录 # ​\tasset 文件必须存储在asset 目录中。默认为 /assets ，但可以通过配置文件的 assetDir 键进行配置。\nAsset 发布 # ​\t当您调用 .Permalink ， .RelPermalink 或 .Publish 时，Hugo将assets 发布到 publishDir （通常为 public ）。您可以使用 .Content 来内联assets 。\nGo 管道 # ​\t为了提高可读性，本文档的Hugo Pipes示例将使用Go Pipes编写：\n{{ $style := resources.Get \u0026#34;sass/main.scss\u0026#34; | resources.ToCSS | resources.Minify | resources.Fingerprint }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ $style.Permalink }}\u0026#34;\u0026gt; 方法别名 # ​\t每个 Hugo Pipes 的 resources 转换方法都使用 驼峰式 别名（例如 resources.ToCSS 的别名是 toCSS）。没有这样别名的非转换方法包括 resources.Get、resources.FromString、resources.ExecuteAsTemplate 和 resources.Concat。\n​\t因此，上面的示例也可以写成以下形式：\n{{ $style := resources.Get \u0026#34;sass/main.scss\u0026#34; | toCSS | minify | fingerprint }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ $style.Permalink }}\u0026#34;\u0026gt; 缓存 # ​\tHugo 管道调用基于整个管道链进行缓存。\n​\t一个管道链的示例是：\n{{ $mainJs := resources.Get \u0026#34;js/main.js\u0026#34; | js.Build \u0026#34;main.js\u0026#34; | minify | fingerprint }} ​\t管道链仅在站点构建中第一次遇到时调用，否则结果将从缓存中加载。因此，Hugo 管道可以在执行数千或数百万次的模板中使用，而不会对构建性能产生负面影响。\n"},{"id":7,"href":"/hugo/templ/templating/","title":"Hugo模板入门介绍","section":"模板","content":" Introduction to Hugo Templating - Hugo模板入门介绍 # https://gohugo.io/templates/introduction/\n​\tHugo 使用 Go 的 html/template 和 text/template 库作为模板的基础。\n​\t以下仅为 Go 模板的入门指南。若想深入了解 Go 模板，请查看官方 Go 文档。\n​\tGo 模板提供了一种极其简单的模板语言，坚信只有最基本的逻辑应该放在模板或视图层中。\n基本语法 # ​\tGo 模板是 HTML 文件，并加入了变量和函数。Go 模板的变量和函数可以在 {{ }}中进行访问。\n访问预定义变量 # ​\t预定义变量可以是当前作用域中已经存在的变量（如下面变量章节的.Title示例），也可以是自定义变量（如该章节中的$address示例）。\n{{ .Title }} {{ $address }} ​\t函数的参数使用空格分隔。通常的语法如下：\n{{ FUNCTION ARG1 ARG2 .. }} ​\t下面的示例使用1和2作为add函数的输入：\n{{ add 1 2 }} 通过点符号访问方法和字段 # ​\t访问在内容前置元数据中定义的 Page 参数中的 bar。\n{{ .Params.bar }} 括号可以用来分组项 # {{ if or (isset .Params \u0026#34;alt\u0026#34;) (isset .Params \u0026#34;caption\u0026#34;) }} Caption {{ end }} 单个语句可以分成多行 # {{ if or (isset .Params \u0026#34;alt\u0026#34;) (isset .Params \u0026#34;caption\u0026#34;) }} 原始字符串字面值可以包含换行符 # {{ $msg := `Line one. Line two.` }} 变量 # ​\t每个Go模板都有一个数据对象。在Hugo中，每个模板都传递了一个Page。在下面的示例中，.Title是Page变量中可访问的元素之一。\n​\t由于Page是模板的默认作用域，因此可以通过点前缀(.Title)轻松访问当前作用域(. —— \u0026ldquo;the dot\u0026quot;)中的Title元素：\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; ​\t值也可以存储在自定义变量中，并在之后被引用：\n​\t自定义变量需要以$为前缀。\n{{ $address := \u0026#34;123 Main St.\u0026#34; }} {{ $address }} ​\t使用=运算符可以重新定义变量。下面的示例在主页上打印\u0026quot;Var is Hugo Home\u0026rdquo;，在其他所有页面上打印\u0026quot;Var is Hugo Page\u0026quot;：\n{{ $var := \u0026#34;Hugo Page\u0026#34; }} {{ if .IsHome }} {{ $var = \u0026#34;Hugo Home\u0026#34; }} {{ end }} Var is {{ $var }} 函数 # ​\tGo模板仅提供了一些基本函数，但还提供了一种机制，使应用程序能够扩展原始函数集。\n​\tHugo模板函数提供了特定于构建站点的附加功能。通过使用函数名和由空格分隔的所需参数来调用函数。如果没有重新编译Hugo，则无法添加模板函数。\n示例1：添加数字 # {{ add 1 2 }} \u0026lt;!-- prints 3 --\u0026gt; 示例2：比较数字 # {{ lt 1 2 }} \u0026lt;!-- prints true (i.e., since 1 is less than 2) --\u0026gt; ​\t请注意，这两个示例都使用了Go模板的math函数。\n​\t在Go模板文档中，有比Hugo文档中列出的更多的布尔运算符。\nIncludes # ​\t在包含（Include）另一个模板时，您需要传递它需要访问的数据。\n​\t为了传递当前上下文，请记住包含一个尾随点。\n​\t模板位置始终从Hugo的layouts/目录开始。\nPartial # ​\tpartial函数用于使用语法{{ partial \u0026quot;\u0026lt;PATH\u0026gt;/\u0026lt;PARTIAL\u0026gt;.\u0026lt;EXTENSION\u0026gt;\u0026quot; . }}包含部分（partial）模板。\n​\t包含layouts/partials/header.html部分（partial）模板的示例：\n{{ partial \u0026#34;header.html\u0026#34; . }} 模板 # ​\t在早期版本的Hugo中，template函数用于包含部分（partial）模板。现在，它仅用于调用内部模板。语法为{{ template \u0026quot;_internal/\u0026lt;TEMPLATE\u0026gt;.\u0026lt;EXTENSION\u0026gt;\u0026quot; . }}。\n​\t可以在这里找到可用的内部模板。\n​\t包含内部opengraph.html模板的示例：\n{{ template \u0026#34;_internal/opengraph.html\u0026#34; . }} 逻辑 # ​\tGo模板提供了最基本的迭代和条件逻辑。\n迭代 # ​\tGo模板大量使用range来迭代map、array或slice。以下是如何使用range的不同示例。\n示例1：使用上下文(.) # {{ range $array }} {{ . }} \u0026lt;!-- The . represents an element in $array --\u0026gt; {{ end }} 示例2：为数组元素的值声明变量名 # {{ range $elem_val := $array }} {{ $elem_val }} {{ end }} 示例3：为数组元素的索引和值声明变量名 # ​\t对于数组或切片，第一个声明的变量将映射到每个元素的索引。\n{{ range $elem_index, $elem_val := $array }} {{ $elem_index }} -- {{ $elem_val }} {{ end }} 示例4：为map元素的键和值声明变量名 # ​\t对于map，第一个声明的变量将映射到每个map元素的键。\n{{ range $elem_key, $elem_val := $map }} {{ $elem_key }} -- {{ $elem_val }} {{ end }} 示例5：针对空map、数组或切片的条件语句 # ​\t如果传递给range的map、数组或切片长度为零，则将执行else语句。\n{{ range $array }} {{ . }} {{ else }} \u0026lt;!-- This is only evaluated if $array is empty --\u0026gt; {{ end }} 条件语句 # ​\tif、else、with、or、and和not提供了处理Go模板中条件逻辑的框架。与range一样，if和with语句也是用{{ end }}关闭的。\n​\tGo 模板将以下值视为false：\nfalse (boolean) 0 (integer) 任何长度为零的数组、切片、映射或字符串 示例1：with # ​\t通常使用with编写\u0026quot;if something exists, do this\u0026quot;这样的语句。\n​\twith会在其作用域内重新绑定上下文(.)（就像在range中一样）。\n​\t如果变量不存在，或者如果它按上面所述计算为\u0026quot;false\u0026quot;，则它会跳过该块。\n{{ with .Params.title }} \u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt; {{ end }} 示例2：with..else # ​\t下面的代码片段如果设置了\u0026quot;description\u0026quot;前置元数据的值，则使用它，否则使用默认的.Summary页面变量：\n{{ with .Param \u0026#34;description\u0026#34; }} {{ . }} {{ else }} {{ .Summary }} {{ end }} ​\t参见.Param函数。\n示例3：if # ​\t编写with的另一种替代（更冗长）方法是使用if。在这里，.不会重新绑定。\n​\t下面的示例是使用if重写的\u0026quot;示例1\u0026quot;：\n{{ if isset .Params \u0026#34;title\u0026#34; }} \u0026lt;h4\u0026gt;{{ index .Params \u0026#34;title\u0026#34; }}\u0026lt;/h4\u0026gt; {{ end }} 示例4：if..else # ​\t下面的示例是使用if .. else重写的\u0026quot;示例2\u0026quot;，并使用isset函数+ .Params变量（不同于.Param函数）：\n{{ if (isset .Params \u0026#34;description\u0026#34;) }} {{ index .Params \u0026#34;description\u0026#34; }} {{ else }} {{ .Summary }} {{ end }} 示例5： if .. else if .. else # ​\t与with不同，if还可以包含else if子句。\n{{ if (isset .Params \u0026#34;description\u0026#34;) }} {{ index .Params \u0026#34;description\u0026#34; }} {{ else if (isset .Params \u0026#34;summary\u0026#34;) }} {{ index .Params \u0026#34;summary\u0026#34; }} {{ else }} {{ .Summary }} {{ end }} 示例6： and \u0026amp; or # {{ if (and (or (isset .Params \u0026#34;title\u0026#34;) (isset .Params \u0026#34;caption\u0026#34;)) (isset .Params \u0026#34;attr\u0026#34;)) }} 管道 # ​\tGo模板最强大的组件之一是能够将操作一层层堆叠在一起。这是通过使用管道来完成的。从Unix管道借鉴而来，概念很简单：每个管道的输出都成为下一个管道的输入。\n​\t由于Go模板的语法非常简单，因此管道对于能够链接在一起的函数调用非常重要。管道的一个限制是它们只能处理单个值，该值成为下一个管道的最后一个参数。\n​\t一些简单的示例应该有助于帮助您了解如何使用管道。\n示例1： shuffle # ​\t以下两个示例在功能上是相同的：\n{{ shuffle (seq 1 5) }} {{ (seq 1 5) | shuffle }} 示例2： index # ​\t以下访问名为\u0026quot;disqus_url\u0026quot;的页面参数并转义HTML。此示例还使用内置于Go模板中的index函数：\n{{ index .Params \u0026#34;disqus_url\u0026#34; | html }} 示例3： 带有isset的or # {{ if or (or (isset .Params \u0026#34;title\u0026#34;) (isset .Params \u0026#34;caption\u0026#34;)) (isset .Params \u0026#34;attr\u0026#34;) }} Stuff Here {{ end }} 可以重写为\n{{ if isset .Params \u0026#34;caption\u0026#34; | or isset .Params \u0026#34;title\u0026#34; | or isset .Params \u0026#34;attr\u0026#34; }} Stuff Here {{ end }} 上下文（也称\u0026quot;点\u0026quot;） # ​\tGo模板最容易被忽视的理解概念是，{{ . }}始终指向当前上下文。\n在您的模板的顶层，它将是可用的数据集。 但是，在迭代中，它将具有循环中当前项的值；即{{ . }}将不再引用整个页面可用的数据。 ​\t如果您需要从循环内部访问页面级别的数据（例如，在前置元数据中设置的页面参数），则可能需要执行以下操作之一：\n1.定义一个独立于上下文的变量 # ​\t以下示例演示如何定义一个独立于上下文的变量。\ntags-range-with-page-variable.html\n{{ $title := .Site.Title }} \u0026lt;ul\u0026gt; {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;/tags/{{ . | urlize }}\u0026#34;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 请注意，一旦我们进入循环（即 range），{{ . }} 的值就已经改变了。我们在循环外面定义了一个变量（{{ $title }}），并为其分配了一个值，以便我们可以从循环内部访问该值。\n2.使用$.访问全局上下文 # ​\t$ 在模板中具有特殊意义。$默认情况下被设置为 .（\u0026ldquo;the dot\u0026rdquo;）的起始值。这是Go text/template的文档功能。这意味着您可以从任何地方访问全局上下文。下面是先前的代码块的等效示例，但现在使用 $ 从全局上下文中获取 .Site.Title：\nrange-through-tags-w-global.html\n\u0026lt;ul\u0026gt; {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;/tags/{{ . | urlize }}\u0026#34;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $.Site.Title }} \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; ​\t如果有人恶意重新定义特殊字符（例如 {{ $ := .Site }}），$ 的内置魔力将停止工作。不要这样做。当然，您可以在全局上下文中使用 {{ $ := . }} 来重置 $ 的默认值以恢复其功能。\n空格 # ​\tGo 1.6可以通过在相应的 {{或}}分隔符旁边包含连字符（-）和空格来修剪Go标记的两侧的空格的功能。\n​\t例如，以下Go模板将在其HTML输出中包含换行符和水平制表符：\n\u0026lt;div\u0026gt; {{ .Title }} \u0026lt;/div\u0026gt; 它将输出：\n\u0026lt;div\u0026gt; Hello, World! \u0026lt;/div\u0026gt; ​\t在以下示例中使用-将删除围绕.Title变量的额外空格并删除换行符：\n\u0026lt;div\u0026gt; {{- .Title -}} \u0026lt;/div\u0026gt; 它将输出：\n\u0026lt;div\u0026gt;Hello, World!\u0026lt;/div\u0026gt; Go 语言认为以下字符是空白字符：\n空格 水平制表符 回车符 换行符 注释 # ​\t为了使您的模板组织有序并在团队之间共享信息，您可能希望向您的模板添加注释。在Hugo中有两种方法可以做到这一点。\nGo模板注释 # ​\tGo模板支持{{/*和*/}}来打开和关闭注释块。该块内的任何内容都不会被渲染。\n例如：\nBonsoir, {{/* {{ add 0 + 2 }} */}}Eliott. 将渲染Bonsoir, Eliott.，而不关心注释块中的语法错误（add 0 + 2）。\nHTML 注释 # ​\t您可以通过将 HTML 代码注释的字符串管道化到 safeHTML 中来添加 HTML 注释。\n例如：\n{{ \u0026#34;\u0026lt;!-- This is an HTML comment --\u0026gt;\u0026#34; | safeHTML }} ​\t如果您需要使用变量构造这样的HTML注释，只需将printf管道化到safeHTML。\n例如：\n{{ printf \u0026#34;\u0026lt;!-- Our website is named: %s --\u0026gt;\u0026#34; .Site.Title | safeHTML }} 包含 Go 模板的 HTML 注释 # ​\t默认情况下，HTML注释会被删除，但其内容仍将被求值。这意味着尽管HTML注释永远不会将任何内容渲染到最终的HTML页面，但其中包含的代码可能会导致构建过程失败。\n​\t不要尝试使用HTML注释来注释掉Go模板代码。\n\u0026lt;!-- {{ $author := \u0026#34;Emma Goldman\u0026#34; }} was a great woman. --\u0026gt; {{ $author }} ​\t模板引擎将删除HTML注释中的内容，但如果其中存在Go模板代码，则将首先求值任何Go模板代码。因此，上面的示例将渲染成Emma Goldman，因为$author变量在HTML注释中得到求值。但是，如果HTML注释中的代码有错误，构建将会失败。\nHugo参数 # ​\tHugo 提供了通过站点配置（用于整个站点的值）或每个特定内容的元数据（即前置元数据）向模板层传递值的选项。您可以定义任何类型的任何值，并在模板中任意使用它们，只要这些值得到前置元数据格式支持。\n使用内容（page）参数 # ​\t您可以在单个内容的前置元数据中提供变量以供模板使用。\n​\tHugo 文档中使用了一个示例。大多数页面都受益于提供目录，但有时目录并不合适。我们在前置元数据中定义了一个 notoc 变量，当设置为 true 时，将防止目录呈现。\n以下是示例前置元数据：\ncontent/example.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- notoc: true title: Example --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ notoc = true title = 'Example' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;notoc\u0026quot;: true, \u0026quot;title\u0026quot;: \u0026quot;Example\u0026quot; } ``` ​\t以下是可以在 toc.html 局部模板中使用的对应代码示例：\nlayouts/partials/toc.html\n{{ if not .Params.notoc }} \u0026lt;aside\u0026gt; \u0026lt;header\u0026gt; \u0026lt;a href=\u0026#34;#{{ .Title | urlize }}\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;{{ .Title }}\u0026lt;/h3\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/header\u0026gt; {{ .TableOfContents }} \u0026lt;/aside\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; id=\u0026#34;toc-toggle\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; {{ end }} ​\t我们希望页面的默认行为是包含目录，除非另有指定。此模板检查此页面前置元数据中的 notoc: 字段是否为 true。\n使用站点配置参数 # ​\t您可以在站点配置文件中任意定义任何数量的站点级参数。这些参数在您的模板中全局可用。\n​\t例如，您可以声明以下内容：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml params: copyrighthtml: Copyright \u0026amp;#xA9; 2017 John Doe. All Rights Reserved. sidebarrecentlimit: 5 twitteruser: spf13 ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [params] copyrighthtml = 'Copyright \u0026amp;#xA9; 2017 John Doe. All Rights Reserved.' sidebarrecentlimit = 5 twitteruser = 'spf13' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;params\u0026quot;: { \u0026quot;copyrighthtml\u0026quot;: \u0026quot;Copyright \\u0026#xA9; 2017 John Doe. All Rights Reserved.\u0026quot;, \u0026quot;sidebarrecentlimit\u0026quot;: 5, \u0026quot;twitteruser\u0026quot;: \u0026quot;spf13\u0026quot; } } ``` ​\t在页脚布局中，您可以声明仅在提供了 copyrighthtml 参数时才呈现的 \u0026lt;footer\u0026gt;。如果提供了该参数，则需要通过 safeHTML 函数声明该字符串可以安全使用，以便 HTML 实体不会被再次转义。这使您可以轻松地每年 1 月 1 日仅更新顶级配置文件，而无需在模板中查找。\n{{ if .Site.Params.copyrighthtml }} \u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{ .Site.Params.CopyrightHTML | safeHTML }}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt; {{ end }} ​\t一种替代写\u0026quot;if\u0026ldquo;并引用同一值的方法是使用with。with在其作用域内重新绑定上下文(.)，如果该变量不存在，则跳过块：\nlayouts/partials/twitter.html\n{{ with .Site.Params.twitteruser }} \u0026lt;div\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/{{ . }}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{ . }}\u0026#34; alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; {{ end }} ​\t最后，您也可以将\u0026quot;魔术常量\u0026quot;从您的布局中拉出来。以下示例使用first函数，以及.RelPermalink页面变量和.Site.Pages站点变量。\n\u0026lt;nav\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; {{- range first .Site.Params.SidebarRecentLimit .Site.Pages -}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{- end -}} \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; 示例：显示未来事件 # ​\t假设有以下内容结构和前置元数据：\ncontent/ └── events/ ├── event-1.md ├── event-2.md └── event-3.md content/events/event-1.md.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml date: 2021-12-06T10:37:16-08:00 draft: false end_date: 2021-12-05T11:00:00-08:00 start_date: 2021-12-05T09:00:00-08:00 title: Event 1 ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml date = 2021-12-06T10:37:16-08:00 draft = false end_date = 2021-12-05T11:00:00-08:00 start_date = 2021-12-05T09:00:00-08:00 title = 'Event 1' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;date\u0026quot;: \u0026quot;2021-12-06T10:37:16-08:00\u0026quot;, \u0026quot;draft\u0026quot;: false, \u0026quot;end_date\u0026quot;: \u0026quot;2021-12-05T11:00:00-08:00\u0026quot;, \u0026quot;start_date\u0026quot;: \u0026quot;2021-12-05T09:00:00-08:00\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Event 1\u0026quot; } ``` ​\t这个局部模板渲染未来的事件：\nlayouts/partials/future-events.html\n\u0026lt;h2\u0026gt;Future Events\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; {{ range where site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;events\u0026#34; }} {{ if gt (.Params.start_date | time.AsTime) now }} {{ $startDate := .Params.start_date | time.Format \u0026#34;:date_medium\u0026#34; }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt; - {{ $startDate }} \u0026lt;/li\u0026gt; {{ end }} {{ end }} \u0026lt;/ul\u0026gt; ​\t如果将前置元数据限制为TOML格式，并省略日期字段周围的引号，则可以执行日期比较而无需强制转换。\nlayouts/partials/future-events.html\n\u0026lt;h2\u0026gt;Future Events\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; {{ range where (where site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;events\u0026#34;) \u0026#34;Params.start_date\u0026#34; \u0026#34;gt\u0026#34; now }} {{ $startDate := .Params.start_date | time.Format \u0026#34;:date_medium\u0026#34; }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt; - {{ $startDate }} \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 另请参阅 # 文件变量 菜单变量 "},{"id":8,"href":"/hugo/contentmanagement/organization/","title":"内容组织","section":"内容管理","content":" Content Organization - 内容组织 # https://gohugo.io/content-management/organization/\nHugo assumes that the same structure that works to organize your source content is used to organize the rendered site.【好复杂的从句】\n​\tHugo 假设用于组织源内容的结构与用于组织渲染站点的结构相同。\nPage Bundles # ​\tHugo 0.32 引入了页面相关的图像和其他资源封装为Page Bundles的功能。\n​\t这些术语是相关的，您还需要阅读页面资源（Page Resources）和图像处理（Image Processing）等相关文档才能获得全面的信息。\n​\t示意图显示了三个bundle。请注意，主页bundle不能包含其他内容页面，虽然允许包含其他文件（如图像）。\nbundle文档仍在完善中。我们会尽快发布更全面的文档。\nOrganization of Content Source # ​\t在 Hugo 中，您的内容应该按照反映渲染站点的方式进行组织。\n​\t虽然 Hugo 支持嵌套在任何级别的内容，但顶层（即 content/\u0026lt;DIRECTORIES\u0026gt;）在 Hugo 中是特殊的，并且被视为用于确定布局等内容类型。要了解更多有关部分的信息，包括如何嵌套它们，请参阅sections。\n​\t在没有任何额外配置的情况下，以下内容将自动工作：\n. └── content └── about | └── index.md // \u0026lt;- https://example.com/about/ ├── posts | ├── firstpost.md // \u0026lt;- https://example.com/posts/firstpost/ | ├── happy | | └── ness.md // \u0026lt;- https://example.com/posts/happy/ness/ | └── secondpost.md // \u0026lt;- https://example.com/posts/secondpost/ └── quote ├── first.md // \u0026lt;- https://example.com/quote/first/ └── second.md // \u0026lt;- https://example.com/quote/second/ 在 Hugo 中的路径分解 # ​\t以下示例演示了在 Hugo 渲染站点时，您的内容组织和输出 URL 结构之间的关系。这些示例假定您使用美化的 URL，这是 Hugo 的默认行为。这些示例假设您正在使用美化的 URL，这是 Hugo 的默认行为。这些示例还假设在您站点的配置文件中设置了 baseURL = \u0026quot;https://example.com\u0026quot;。\n索引页: _index.md # ​\t_index.md 在 Hugo 中有特殊的作用。它允许您在列表模板中添加 前置元数据和内容。这些模板包括section templates、taxonomy templates、taxonomy terms templates和homepage template。\n提示：您可以使用 .Site.GetPage 函数引用 _index.md 中的内容和元数据。\n​\t您可以为主页和每个内容章节（content sections）、分类法（taxonomies）和分类法条目（taxonomy terms）中创建一个 _index.md。以下示例显示了在Hugo站点上包含用于posts章节列表页的内容和前置元数据的_index.md的典型放置方式：\n. url . ⊢--^-⊣ . path slug . ⊢--^-⊣⊢---^---⊣ . filepath . ⊢------^------⊣ content/posts/_index.md At build, this will output to the following destination with the associated values:（with该怎么翻译）\n​\t在构建时，这将输出到以下目标并具有相关的值：\nurl (\u0026#34;/posts/\u0026#34;) ⊢-^-⊣ baseurl section (\u0026#34;posts\u0026#34;) ⊢--------^---------⊣⊢-^-⊣ permalink（永久链接） ⊢----------^-------------⊣ https://example.com/posts/index.html ​\tsections可以嵌套得很深。要完全导航section树，最下面的section至少必须包含一个内容文件（即_index.md） 。\nSingle Pages in Sections # ​\t在每个章节中的单个内容文件将渲染为单个页面模板。这是一个在 posts 中的单个post的例子：\npath (\u0026#34;posts/my-first-hugo-post.md\u0026#34;) . ⊢-----------^------------⊣ . section slug . ⊢-^-⊣⊢--------^----------⊣ content/posts/my-first-hugo-post.md ​\t当Hugo构建您的站点时，内容将输出到以下目标：\nurl (\u0026#34;/posts/my-first-hugo-post/\u0026#34;) ⊢------------^----------⊣ baseurl section slug ⊢--------^--------⊣⊢-^--⊣⊢-------^---------⊣ permalink ⊢--------------------^---------------------⊣ https://example.com/posts/my-first-hugo-post/index.html 路径解释 # ​\t以下概念更深入地解释了项目组织与构建站点输出的默认Hugo行为之间的关系。\nsection # ​\t默认内容类型由存储内容项的section确定。section是根据项目的content目录中的位置确定的。section无法在前置元数据中指定或覆盖。\nslug # ​\tslug是URL路径的最后一段，由文件名定义，并在前置元数据中可选地被slug值覆盖。有关详细信息，请参阅URL管理。\npath # ​\t内容的path由section到文件的路径确定。文件path\n是基于内容位置的路径，且 不包括 slug （=\u0026gt;这里应该描述有问题，更据上面Single Pages in Sections 的图，这样不是矛盾了吗） url # ​\turl是整个URL路径，由文件路径定义，并在前置元数据中可选地被url值覆盖。有关详细信息，请参阅URL管理。\n另请参阅 # 评论 页面资源 内容部分 内容类型 URL 管理 "},{"id":9,"href":"/hugo/hugomodules/configuremodules/","title":"配置模块","section":"Hugo模块","content":" Configure Modules - 配置模块 # https://gohugo.io/hugo-modules/configuration/\n​\t本页描述了模块的配置选项。\n模块配置：Top level -\u0026gt; [module] # config.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml module: noProxy: none noVendor: \u0026quot;\u0026quot; private: '*.*' proxy: direct replacements: \u0026quot;\u0026quot; workspace: \u0026quot;off\u0026quot; ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [module] noProxy = 'none' noVendor = '' private = '*.*' proxy = 'direct' replacements = '' workspace = 'off' ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;module\u0026quot;: { \u0026quot;noProxy\u0026quot;: \u0026quot;none\u0026quot;, \u0026quot;noVendor\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;private\u0026quot;: \u0026quot;*.*\u0026quot;, \u0026quot;proxy\u0026quot;: \u0026quot;direct\u0026quot;, \u0026quot;replacements\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;workspace\u0026quot;: \u0026quot;off\u0026quot; } } ``` noVendor # ​\t一个可选的 Glob 模式，用于匹配在vendoring时跳过的模块路径，例如\u0026quot;github.com/**\u0026quot;。\nvendorClosest # ​\t当启用时，我们将选择与使用它的模块最接近的vendored模块。默认行为是选择第一个。请注意，每个给定模块路径仍然只能有一个依赖项，因此一旦使用它，就无法重新定义它。\nproxy # ​\t定义用于下载远程模块的代理服务器。默认值为 direct，表示\u0026quot;git clone\u0026quot;等。\nnoProxy # ​\t逗号分隔的 glob 列表，匹配不应使用上述配置的代理的路径。\nprivate # ​\t逗号分隔的 glob 列表，匹配应视为私有的路径。\nworkspace # ​\t要使用的工作区文件。这启用了 Go 工作区模式。请注意，这也可以通过操作系统 env 设置，例如 export HUGO_MODULE_WORKSPACE=/my/hugo.work。这仅适用于 Go 1.18+。在 Hugo v0.109.0 中，我们将默认设置为 off，并且现在会将任何相对的工作文件名解析为相对于工作目录。\nreplacements # ​\t从模块路径到目录的映射的逗号分隔列表，例如 github.com/bep/my-theme -\u0026gt; ../..,github.com/bep/shortcodes -\u0026gt; /some/path。这对于临时本地开发模块非常有用，在这种情况下，您可能希望将其保存为环境变量，例如：env HUGO_MODULE_REPLACEMENTS=\u0026quot;github.com/bep/my-theme -\u0026gt; ../..\u0026quot;。相对路径相对于 themesDir。允许使用绝对路径。\n​\t请注意，上述术语直接映射到 Go 模块中的对应项。设置其中的一些可能会自然地设置为操作系统环境变量。例如，要设置要使用的代理服务器：\nenv HUGO_MODULE_PROXY=https://proxy.example.org hugo ​\tHugo 模块的大多数命令需要安装更新版本的 Go（请参阅 https://golang.org/dl/）和相关的 VCS 客户端（例如 Git，请参阅 https://git-scm.com/downloads/）。如果您在 Netlify 上运行\u0026quot;旧\u0026quot;站点，则可能必须在环境设置中将 GO_VERSION 设置为 1.12。\n​\t有关 Go 模块的更多信息，请参见：\nhttps://github.com/golang/go/wiki/Modules https://blog.golang.org/using-go-modules 模块配置：hugoVersion -\u0026gt; [module.hugoVersion] # ​\t如果您的模块需要特定版本的Hugo才能正常工作，您可以在module部分中指示，并且如果使用过于旧或新的版本，用户将收到警告。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml module: hugoVersion: extended: false max: \u0026quot;\u0026quot; min: \u0026quot;\u0026quot; ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [module] [module.hugoVersion] extended = false max = '' min = '' ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;module\u0026quot;: { \u0026quot;hugoVersion\u0026quot;: { \u0026quot;extended\u0026quot;: false, \u0026quot;max\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;min\u0026quot;: \u0026quot;\u0026quot; } } } ``` ​\t以上任何内容均可省略。\nmin # ​\t支持的最低Hugo版本，例如0.55.0\nmax # ​\t支持的最高Hugo版本，例如0.55.0\nextended # ​\t是否需要Hugo的扩展版本。\n模块配置：imports -\u0026gt;[[module.imports]] # config.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml module: imports: - disable: false ignoreConfig: false ignoreImports: false path: github.com/gohugoio/hugoTestModules1_linux/modh1_2_1v - path: my-shortcodes ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [module] [[module.imports]] disable = false ignoreConfig = false ignoreImports = false path = 'github.com/gohugoio/hugoTestModules1_linux/modh1_2_1v' [[module.imports]] path = 'my-shortcodes' ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;module\u0026quot;: { \u0026quot;imports\u0026quot;: [ { \u0026quot;disable\u0026quot;: false, \u0026quot;ignoreConfig\u0026quot;: false, \u0026quot;ignoreImports\u0026quot;: false, \u0026quot;path\u0026quot;: \u0026quot;github.com/gohugoio/hugoTestModules1_linux/modh1_2_1v\u0026quot; }, { \u0026quot;path\u0026quot;: \u0026quot;my-shortcodes\u0026quot; } ] } } ``` path # ​\t可以是一个有效的 Go 模块路径，例如 github.com/gohugoio/myShortcodes，或者是存储在您主题文件夹中的模块目录名称。\nignoreConfig # ​\t如果启用，将不会加载任何模块配置文件，例如 config.toml。请注意，这也会停止加载任何传递模块依赖项。\nignoreImports # ​\t如果启用，将不跟随模块导入。\ndisable # ​\t将其设置为true以禁用该模块，同时保留go.*文件中的任何版本信息。\nnoMounts # ​\t不要在此导入中挂载任何文件夹。\nnoVendor # ​\t永远不要将此导入内容纳入 vendor（仅允许在主项目中）。\n​\t大多数Hugo模块命令需要安装更新的Go版本（请参见https://golang.org/dl/）和相关的VCS客户端（例如Git，请参见https://git-scm.com/downloads/）。如果您在Netlify上运行\u0026quot;旧\u0026quot;站点，则可能需要在环境设置中将GO_VERSION设置为1.12。\n​\t有关Go模块的更多信息，请参见：\nhttps://github.com/golang/go/wiki/Modules https://blog.golang.org/using-go-modules 模块配置：mounts -\u0026gt; [[module.mounts]] # ​\t在Hugo 0.56.0中引入mounts配置时，我们小心地保留了现有的contentDir、staticDir等配置，以确保所有现有站点都能继续工作。但是，您不应同时使用两者：如果您添加了mounts部分，则应删除旧的contentDir、staticDir等设置。\n​\t当您添加mount时，有关目标根目录的默认mount将被忽略：请确保明确添加它。\n默认挂载点\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml module: mounts: - source: content target: content - source: static target: static - source: layouts target: layouts - source: data target: data - source: assets target: assets - source: i18n target: i18n - source: archetypes target: archetypes ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [module] [[module.mounts]] source = 'content' target = 'content' [[module.mounts]] source = 'static' target = 'static' [[module.mounts]] source = 'layouts' target = 'layouts' [[module.mounts]] source = 'data' target = 'data' [[module.mounts]] source = 'assets' target = 'assets' [[module.mounts]] source = 'i18n' target = 'i18n' [[module.mounts]] source = 'archetypes' target = 'archetypes' ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;module\u0026quot;: { \u0026quot;mounts\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;content\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;content\u0026quot; }, { \u0026quot;source\u0026quot;: \u0026quot;static\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;static\u0026quot; }, { \u0026quot;source\u0026quot;: \u0026quot;layouts\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;layouts\u0026quot; }, { \u0026quot;source\u0026quot;: \u0026quot;data\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;data\u0026quot; }, { \u0026quot;source\u0026quot;: \u0026quot;assets\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;assets\u0026quot; }, { \u0026quot;source\u0026quot;: \u0026quot;i18n\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;i18n\u0026quot; }, { \u0026quot;source\u0026quot;: \u0026quot;archetypes\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;archetypes\u0026quot; } ] } } ``` source # 挂载点的源目录。对于主项目，可以是相对于项目的路径，也可以是绝对路径，甚至可以是符号链接。对于其他模块，它必须是相对于项目的路径。\ntarget # 它应该被挂载到Hugo虚拟文件系统中的位置。它必须以Hugo的组件文件夹之一开头：static、content、layouts、data、assets、i18n或archetypes。例如，content/blog。\nlang # 语言代码，例如\u0026quot;en\u0026quot;。只适用于content挂载和多主机模式下的static挂载。\nincludeFiles (string or slice) # ​\t一个或多个用于匹配要包括的文件或目录的glob（通配符）。如果未设置excludeFiles，则与includeFiles匹配的文件将被挂载。\n​\t这些通配符从source根开始匹配文件名，它们应该使用Unix样式的斜杠，即使在Windows上也是如此。 /匹配挂载点根目录，**可以用作超级星号以递归匹配所有目录，例如/posts/**.jpg。\n​\t搜索时忽略大小写。\nexcludeFiles (字符串或切片) # ​\t一个或多个用于匹配要排除的文件的通配符。\n示例\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml module: mounts: - excludeFiles: docs/* source: content target: content ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [module] [[module.mounts]] excludeFiles = 'docs/*' source = 'content' target = 'content' ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;module\u0026quot;: { \u0026quot;mounts\u0026quot;: [ { \u0026quot;excludeFiles\u0026quot;: \u0026quot;docs/*\u0026quot;, \u0026quot;source\u0026quot;: \u0026quot;content\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;content\u0026quot; } ] } } ``` 参见 # 主题组件 使用Hugo模块 目录结构 静态文件 将您的Hugo主题添加到展示页面 "},{"id":10,"href":"/hugo/variables/sitevariables/","title":"站点变量","section":"变量","content":" Site Variables - 站点变量 # https://gohugo.io/variables/site/\n​\t许多站点范围的变量在站点配置中定义，但是，Hugo提供了许多内置变量，以方便在模板中访问全局值。\n​\t以下是站点级别（也称为\u0026quot;全局\u0026quot;）变量列表。其中许多变量在站点配置文件中定义，而其他变量则内置于Hugo的核心中，以便在模板中方便使用。\n从局部获取Site对象 # ​\t下面的所有方法，例如.Site.RegularPages也可以通过全局site函数（例如site.RegularPages）访问，这在局部文件中 Page 对象不容易获取时可能会很方便。\n站点变量列表 # .Site.AllPages # ​\t所有页面的数组，不考虑它们的翻译。\n.Site.BaseURL # ​\t站点配置中定义的站点基本URL。\n.Site.BuildDrafts # ​\t一个布尔值（默认值为false），用于指示是否按照站点配置构建草稿。\n.Site.Copyright # ​\t表示您的站点版权的字符串，即在站点配置中所定义的。\n.Site.Data # ​\t自定义数据，请参阅数据模板。\n.Site.DisqusShortname # ​\t表示Disqus简码的字符串，即在站点配置文件中所定义的。\n.Site.GoogleAnalytics # ​\t表示Google Analytics追踪代码的字符串，即在站点配置文件中所定义的。\n.Site.Home # ​\t指向主页页面对象的引用。\n.Site.IsMultiLingual # ​\t是否在该站点中存在多种语言。有关更多信息，请参见多语言。\n.Site.IsServer # ​\t一个布尔值，指示是否使用Hugo的内置服务器提供站点。有关更多信息，请参见hugo server。\n.Site.Language.Lang # ​\t当前区域设置的语言代码（例如，en）。\n.Site.Language.LanguageName # ​\t完整的语言名称（例如，English）。\n.Site.Language.Weight # ​\t定义.Site.Languages列表顺序的权重。\n.Site.Language # ​\t指示当前用于渲染站点的语言。该对象的属性在站点配置语言定义中设置。\n.Site.LanguageCode # ​\t表示在站点配置中定义的语言tag的字符串。\n.Site.LanguagePrefix # ​\t可以用于为URL添加前缀以指向正确的语言。即使只定义了一种语言，它也会起作用。另请参见absLangURL和relLangURL函数。\n.Site.Languages # ​\t一个按照定义的权重排序的语言列表。\n.Site.LastChange # ​\t一个表示站点最近更改的日期/时间的字符串。此字符串基于内容页面前置元数据中的date变量。\n.Site.Menus # ​\t站点中的所有菜单。\n.Site.Pages # ​\t按日期排序的所有内容的数组，最新的在前面。此数组仅包含当前语言的页面。请参阅.Site.Pages。\n.Site.RegularPages # ​\t一个常规页面集合的快捷方式。.Site.RegularPages等效于where .Site.Pages \u0026quot;Kind\u0026quot; \u0026quot;page\u0026quot;。请参阅.Site.Pages。\n.Site.Sections # ​\t站点的顶级目录。\n.Site.Taxonomies # ​\t整个站点的分类法。另请参阅从任何模板访问分类法数据的章节。\n.Site.Title # ​\t一个表示站点标题的字符串。\n.Site.Params变量 # ​\t.Site.Params是一个容器，它保存了来自站点配置params 部分的值。\n示例： .Site.Params # ​\t以下config.[yaml|toml|json]定义了一个站点范围的description参数：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml baseURL: https://yoursite.example.com/ params: author: Nikola Tesla description: Tesla's Awesome Hugo Site ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml baseURL = 'https://yoursite.example.com/' [params] author = 'Nikola Tesla' description = \u0026quot;Tesla's Awesome Hugo Site\u0026quot; ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;baseURL\u0026quot;: \u0026quot;https://yoursite.example.com/\u0026quot;, \u0026quot;params\u0026quot;: { \u0026quot;author\u0026quot;: \u0026quot;Nikola Tesla\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Tesla's Awesome Hugo Site\u0026quot; } } ``` ​\t您可以在局部模板中使用.Site.Params调用默认站点描述：\nlayouts/partials/head.html\n\u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;{{ if .IsHome }}{{ $.Site.Params.description }}{{ else }}{{ .Description }}{{ end }}\u0026#34; /\u0026gt; .Site.Pages变量 # .Site.Pages与.Pages比较 # 常规页面是\u0026quot;post\u0026quot;页面或\u0026quot;content\u0026quot;页面。\n叶子bundle是常规页面。 列表页面可以列出常规页面和其他列表页面。一些示例是：主页、章节页面、分类法(/tags/)和条目(/tags/foo/)页面。\n分支bundle是列表页面。 .Site.Pages\n站点所有页面的集合：常规页面、章节页面、分类法页面等——Superset of everything!\n.Site.RegularPages\n仅包含常规页面的集合。\n​\t上述.Site. ..页面集合可以从模板的任何作用域中访问。\n​\t以下变量仅从当前列表页的作用域返回页面集合：\n.Pages\nCollection of regular pages and only first-level section pages under the current list page.\n在当前列表页面下，包含所有常规页面和只有一级章节页面的集合。\n.RegularPages\n仅包含当前列表页面下的普通页面的集合。这排除嵌套章节/列表页面中的常规页面（那些是带有 _index.md 文件的子目录）。\n.RegularPagesRecursive\n包含一个列表页面下的所有普通页面的集合。这包括嵌套章节/列表页面中的常规页面。\n注意\n从常规页面的作用域来看，.Pages 和 .RegularPages 返回一个空的 slice。\n"},{"id":11,"href":"/hugo/installation/linux/","title":"Linux","section":"安装Hugo","content":" Linux # https://gohugo.io/installation/linux/\n​\t在Linux上安装Hugo。\n版本 # ​\tHugo有两个版本：标准版和扩展版。使用扩展版可以：\n编码WebP图像（使用两个版本都可以解码WebP图像） 使用内置的LibSass编译器将Sass转换为CSS ​\t我们建议您安装扩展版。\n前提条件 # ​\t虽然并非所有情况下都需要，但在使用Hugo时通常使用Git和Go。\n​\t需要Git的情况：\n使用Hugo Modules功能 从源代码构建Hugo 将主题安装为Git子模块 从本地Git存储库访问提交信息 使用服务托管您的站点，例如AWS Amplify、CloudCannon、Cloudflare Pages、GitHub Pages、GitLab Pages和Netlify。 ​\t需要Go的情况：\n使用Hugo Modules功能 从源代码构建Hugo ​\t请参阅Git和Go文档以获取安装说明。\n预构建二进制文件 # ​\t预构建的二进制文件可用于各种操作系统和架构。访问最新版本页面，然后向下滚动到Assets 部分。\n下载所需版本、操作系统和架构的存档 解压缩存档 将可执行文件移动到所需目录 将此目录添加到PATH环境变量中 验证您对该文件具有执行权限 ​\t如果需要帮助设置文件权限或修改PATH环境变量，请参考操作系统文档。\n​\t如果您没有看到所需版本、操作系统和架构的预构建二进制文件，请使用以下方法之一安装Hugo。\n包管理器 # Snap # ​\tSnap是Linux的免费开源软件包管理器。Snap包适用于大多数发行版，易于安装并且会自动更新。\n​\tHugo snap包是严格隔离的。严格隔离的snap运行在完全隔离的环境中，最小访问级别被认为是始终安全的。您创建和构建的站点必须位于您的主目录内或可移动媒体上。\n​\t这将安装Hugo的扩展版：\nsudo snap install hugo Homebrew # ​\tHomebrew是macOS和Linux的免费开源软件包管理器。这将安装Hugo的扩展版：\nbrew install hugo 存储库包 # ​\t大多数Linux发行版都维护着一个通用安装应用程序的软件仓库。请注意，这些仓库可能不包含最新版本。\nArch Linux # ​\t基于Arch Linux的Linux发行版包括EndeavourOS，Garuda Linux，Manjaro等。这将安装Hugo的扩展版：\nsudo pacman -S hugo Debian # ​\t基于Debian的Linux发行版包括elementary OS，KDE neon，Linux Lite，Linux Mint，MX Linux，Pop!_OS，Ubuntu，Zorin OS等。这将安装Hugo的扩展版：\nsudo apt install hugo ​\t您也可以从最新版本页面下载Debian包。\nFedora # ​\t基于Fedora的Linux发行版包括CentOS，Red Hat Enterprise Linux等。这将安装Hugo的扩展版：\nsudo dnf install hugo openSUSE # ​\t基于openSUSE的Linux发行版包括GeckoLinux，Linux Karmada等。这将安装Hugo的扩展版：\nsudo zypper install hugo Solus # ​\tSolus的Linux发行版在其包存储库中包含Hugo。这将安装Hugo的标准版：\nsudo eopkg install hugo Docker # ​\tErlend Klakegg Bergheim慷慨地维护了基于Alpine Linux、Busybox、Debian和Ubuntu的Docker images。\ndocker pull klakegg/hugo 从源代码构建 # ​\t要从源代码构建Hugo，您必须：\n安装 Git 安装Go版本1.18或更高版本 按Go文档中的说明更新PATH环境变量 安装目录由GOPATH和GOBIN环境变量控制。如果设置了GOBIN，那么二进制文件将安装到该目录中。如果设置了GOPATH，则二进制文件将安装到GOPATH列表中第一个目录的bin子目录中。否则，二进制文件将安装到默认GOPATH的bin子目录（$HOME/go或%USERPROFILE%\\go）。\n然后构建和测试：\ngo install -tags extended github.com/gohugoio/hugo@latest hugo version 对比 # Prebuilt binaries Package managers Repository packages Docker Build from source Easy to install? ✔️ ✔️ ✔️ ✔️ ✔️ Easy to upgrade? ✔️ ✔️ varies ✔️ ✔️ Easy to downgrade? ✔️ ✔️ 1 varies ✔️ ✔️ Automatic updates? ❌ varies 2 ❌ ❌ 3 ❌ Latest version available? ✔️ ✔️ varies ✔️ ✔️ 如果之前安装了旧版本，安装将变得容易。 ↩︎ Snap 包会自动更新。Homebrew 需要高级配置。 ↩︎ 虽然可能，但需要高级配置。 ↩︎ 另请参阅 # macOS Windows BSD 在21YunBox上托管 在 GitHub 上托管 "},{"id":12,"href":"/hugo/installation/","title":"安装Hugo","section":"文档","content":" Installation - 安装 # https://gohugo.io/installation/\n​\t在macOS、Linux、Windows、BSD上，以及任何可以运行Go编译器工具链的机器上都可以安装Hugo。\n"},{"id":13,"href":"/hugo/gettingstarted/basicusage/","title":"基础用法","section":"开始入门","content":" Basic usage - 基础用法 # https://gohugo.io/getting-started/usage/\n​\tHugo的命令行界面（CLI）功能齐全但简单易用，即使对于那些在命令行上有限经验的人也是如此。\n测试您的安装 # ​\t安装完Hugo后，请通过运行以下命令来测试您的安装：\nhugo version ​\t您应该会看到类似于以下的输出：\nhugo v0.105.0-0e3b42b4a9bdeb4d866210819fc6ddcf51582ffa+extended linux/amd64 BuildDate=2022-10-28T12:29:05Z VendorInfo=snap:0.105.0 显示可用命令 # ​\t要查看可用命令和标志的列表：\nhugo help ​\t要获取子命令的帮助，请使用--help标志。例如：\nhugo server --help 构建您的站点 # ​\t要构建您的站点，请cd进入您的项目目录并运行：\nhugo ​\thugo命令将构建您的站点，将文件发布到public目录中。要将您的站点发布到不同的目录中，请使用--destination标志或在您的站点配置中设置publishDir。\n​\tHugo在构建您的站点之前不会清除public目录。现有的文件将被覆盖，但不会被删除。这种行为是有意的，以防止意外删除您在构建之后添加到public目录中的文件。\n​\t根据您的需求，您可能希望在每次构建之前手动清除public目录的内容。\n草稿、未来和过期内容 # ​\tHugo允许您在内容的前置元数据中设置draft、date、publishDate和expiryDate。默认情况下，Hugo不会发布以下内容：\ndraft值为true时 date在未来时 publishDate在未来时 expiryDate在过去时 ​\t您可以在运行hugo或hugo server时使用命令行标志来覆盖默认行为：\nhugo --buildDrafts # or -D hugo --buildExpired # or -E hugo --buildFuture # or -F ​\t尽管您也可以在站点配置中设置这些值，但除非所有内容作者都知道并理解这些设置，否则可能会导致意想不到的结果。\n​\t正如上面所述，Hugo 在构建站点之前不会清除 public 目录。根据上述四个条件的当前评估，构建后您的 public 目录可能包含来自上一次构建的不必要的文件。\n​\t一种常见的做法是在每次构建之前手动清除 public 目录的内容，以删除草稿、过期和未来的内容。\n开发和测试您的站点 # ​\t为了在开发布局或创建内容时查看您的站点，请cd进入项目目录并运行：\nhugo server ​\thugo server 命令将您的站点构建到内存中，并使用最小的 HTTP 服务器提供您的页面。运行 hugo server 时，它将显示您本地站点的 URL：\nWeb Server is available at http://localhost:1313/ ​\t在服务器运行时，它会监视项目目录中的资源、配置、内容、数据、布局、翻译和静态文件的更改。当它检测到更改时，服务器会重新构建您的站点并使用 LiveReload刷新您的浏览器。\n​\t大多数 Hugo 构建速度都非常快，除非您直接查看浏览器，否则可能不会注意到更改。\nLiveReload # ​\t在服务器运行时，Hugo 会将 JavaScript 注入生成的 HTML 页面中。LiveReload 脚本通过 Web sockets 创建了一个从浏览器到服务器的连接。您不需要安装任何软件或浏览器插件，也不需要任何配置。\n自动重定向 # ​\t当编辑内容时，如果您希望浏览器自动重定向到您最后修改的页面，请运行：\nhugo server --navigateToChanged 部署您的站点 # ​\t如上所述，Hugo 在构建站点之前不会清空 public 目录。在每次构建之前手动清空 public 目录以删除草稿、已过期和未来的内容。\n​\t当您准备部署您的站点时，运行：\nhugo ​\t这会构建您的站点，并将文件发布到 public 目录。目录结构将类似于：\npublic/ ├── categories/ │ ├── index.html │ └── index.xml \u0026lt;-- RSS feed for this section ├── post/ │ ├── my-first-post/ │ │ └── index.html │ ├── index.html │ └── index.xml \u0026lt;-- RSS feed for this section ├── tags/ │ ├── index.html │ └── index.xml \u0026lt;-- RSS feed for this section ├── index.html ├── index.xml \u0026lt;-- RSS feed for the site └── sitemap.xml ​\t在一个简单的托管环境中，您通常会通过 ftp、rsync 或 scp 将您的文件传输到虚拟主机的根目录，public 目录的内容就是您所需的全部内容。\n​\t我们的大多数用户使用 CI/CD 工作流部署其站点，其中对 GitHub 或 GitLab 存储库的推送触发了构建和部署。流行的提供者包括 AWS Amplify， CloudCannon， Cloudflare Pages， GitHub Pages， GitLab Pages和 Netlify。\n​\t在托管和部署部分中了解更多信息。\nGit 存储库包含整个项目目录，通常不包括 public 目录，因为在push之后才构建站点。↩︎ 另请参阅 # 外部学习资源 快速入门 使用 Hugo 模块 "},{"id":14,"href":"/hugo/abouthugo/hugoandgdpr/","title":"Hugo and GDPR","section":"关于Hugo","content":" Hugo and the General Data Protection Regulation (GDPR) # https://gohugo.io/about/hugo-and-gdpr/\n​\t关于如何配置您的 Hugo 站点以符合新的法规。\n​\t《一般数据保护条例》（GDPR）是欧盟法律中关于所有在欧盟和欧洲经济区内的个人数据保护和隐私的规定。它于2018年5月25日开始生效。\n​\tHugo 是一个静态站点生成器。通过使用 Hugo，您已经站在了非常坚实的地面上。与服务器和数据库驱动的站点相比，磁盘上的静态 HTML 文件要容易理解得多。\n​\t但即使是静态站点也可以与外部服务集成，因此从版本0.41开始，Hugo提供了一个隐私配置，涵盖了相关的内置模板。\n请注意：\n这些设置默认设置为off，即 Hugo 0.41之前的工作方式。您必须对您的站点进行评估，并应用适当的设置。 这些设置适用于内部模板。一些主题可能包含用于嵌入 Google Analytics 等服务的自定义模板。在这种情况下，这些选项将没有效果。 我们将继续这项工作，并在未来的 Hugo 版本中进一步改进。 所有隐私设置 # ​\t以下是所有隐私设置及其默认值。这些设置需要放置在您的站点配置文件中（例如 config.toml）。\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml privacy: disqus: disable: false googleAnalytics: anonymizeIP: false disable: false respectDoNotTrack: false useSessionStorage: false instagram: disable: false simple: false twitter: disable: false enableDNT: false simple: false vimeo: disable: false enableDNT: false simple: false youtube: disable: false privacyEnhanced: false ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [privacy] [privacy.disqus] disable = false [privacy.googleAnalytics] anonymizeIP = false disable = false respectDoNotTrack = false useSessionStorage = false [privacy.instagram] disable = false simple = false [privacy.twitter] disable = false enableDNT = false simple = false [privacy.vimeo] disable = false enableDNT = false simple = false [privacy.youtube] disable = false privacyEnhanced = false ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;privacy\u0026quot;: { \u0026quot;disqus\u0026quot;: { \u0026quot;disable\u0026quot;: false }, \u0026quot;googleAnalytics\u0026quot;: { \u0026quot;anonymizeIP\u0026quot;: false, \u0026quot;disable\u0026quot;: false, \u0026quot;respectDoNotTrack\u0026quot;: false, \u0026quot;useSessionStorage\u0026quot;: false }, \u0026quot;instagram\u0026quot;: { \u0026quot;disable\u0026quot;: false, \u0026quot;simple\u0026quot;: false }, \u0026quot;twitter\u0026quot;: { \u0026quot;disable\u0026quot;: false, \u0026quot;enableDNT\u0026quot;: false, \u0026quot;simple\u0026quot;: false }, \u0026quot;vimeo\u0026quot;: { \u0026quot;disable\u0026quot;: false, \u0026quot;enableDNT\u0026quot;: false, \u0026quot;simple\u0026quot;: false }, \u0026quot;youtube\u0026quot;: { \u0026quot;disable\u0026quot;: false, \u0026quot;privacyEnhanced\u0026quot;: false } } } ``` 禁用所有服务 # ​\t一个禁用Hugo中所有相关服务的隐私配置示例。使用此配置，其他设置将不会生效。\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml privacy: disqus: disable: true googleAnalytics: disable: true instagram: disable: true twitter: disable: true vimeo: disable: true youtube: disable: true ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [privacy] [privacy.disqus] disable = true [privacy.googleAnalytics] disable = true [privacy.instagram] disable = true [privacy.twitter] disable = true [privacy.vimeo] disable = true [privacy.youtube] disable = true ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;privacy\u0026quot;: { \u0026quot;disqus\u0026quot;: { \u0026quot;disable\u0026quot;: true }, \u0026quot;googleAnalytics\u0026quot;: { \u0026quot;disable\u0026quot;: true }, \u0026quot;instagram\u0026quot;: { \u0026quot;disable\u0026quot;: true }, \u0026quot;twitter\u0026quot;: { \u0026quot;disable\u0026quot;: true }, \u0026quot;vimeo\u0026quot;: { \u0026quot;disable\u0026quot;: true }, \u0026quot;youtube\u0026quot;: { \u0026quot;disable\u0026quot;: true } } } ``` 隐私设置的说明 # GoogleAnalytics # anonymizeIP\n启用此选项将使用户的 IP 地址在 Google Analytics 中匿名化。\nrespectDoNotTrack\n启用此选项将使 GA 模板遵循\u0026quot;Do Not Track\u0026quot;HTTP标头。\nuseSessionStorage\n启用此选项将禁用使用 Cookies，并使用 Session Storage 存储 GA 客户端 ID。\n​\t使用 Google Analytics v4（gtag.js）时不支持 useSessionStorage。\nInstagram # simple\n如果启用simple 模式，将构建 Instagram 图像卡的静态和无 JS 版本。请注意，这仅支持图像卡，并且图像本身将从 Instagram 的服务器获取。\n注意：如果您使用 Instagram 的simple模式和一个使用 Bootstrap 4 样式的站点，则可能需要禁用 Hugo 提供的内联样式。\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml services: instagram: disableInlineCSS: true ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [services] [services.instagram] disableInlineCSS = true ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;services\u0026quot;: { \u0026quot;instagram\u0026quot;: { \u0026quot;disableInlineCSS\u0026quot;: true } } } ``` Twitter # enableDNT\n启用此选项后，Twitter/Tweet短代码中的推文及其在您站点上的嵌入页面不会用于包括个性化建议和个性化广告在内的用途。\nsimple\n如果启用simple模式，则会构建一个静态且不包含JavaScript的推文版本。\n注意：如果您在Twitter中使用simple模式，并且站点使用Bootstrap 4进行样式设置，则可能需要禁用Hugo提供的内联样式。\n=== \u0026ldquo;yaml\u0026rdquo;\n``` services: twitter: disableInlineCSS: true ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [services] [services.twitter] disableInlineCSS = true ``` === \u0026ldquo;json\u0026rdquo;\n``` { \u0026quot;services\u0026quot;: { \u0026quot;twitter\u0026quot;: { \u0026quot;disableInlineCSS\u0026quot;: true } } } ``` YouTube # privacyEnhanced\n启用隐私增强模式后，YouTube将不会存储与访问者有关的信息，除非用户播放嵌入的视频。\nVimeo # enableDNT\n启用此选项后，Vimeo shortcode会阻止Vimeo播放器跟踪任何会话数据，包括所有cookie和统计数据。\nsimple\n如果启用简单模式，则会从Vimeo的服务器获取视频缩略图，并在其上覆盖一个播放按钮。如果用户点击播放视频，则会在新标签页中直接打开Vimeo站点中的视频。\n另请参阅 # Shortcodes 配置Hugo Hugo的安全模型l "},{"id":15,"href":"/hugo/functions/_format/","title":".Format","section":"函数","content":"将以下英文翻译为中文：\n.Format # https://gohugo.io/functions/format/\n​\t根据 Go 的布局字符串格式化内置的 Hugo 日期 —— .Date ， .PublishDate 和 .Lastmod 。\n语法 # .Format FORMAT ​\t.Format 将格式化在前置元数据中定义的日期值，并可用作以下页面变量的属性:\n.PublishDate .Date .Lastmod ​\t假设内容文件前置元数据中有一个键值对 date: 2017-03-03 ，可以通过 .Format ，后跟期望输出的布局字符串来将日期处理后再构建：\n{{ .PublishDate.Format \u0026#34;January 2, 2006\u0026#34; }} =\u0026gt; March 3, 2017 ​\t要格式化您前置元数据中定义的任何日期字符串表示形式，请参见 dateFormat 函数，它仍将利用下面解释的Go 布局字符串，但使用略有不同的语法。\nGo 的布局字符串 # ​\t模板通过布局字符串格式化您的日期，该字符串指向特定的参考时间：\nMon Jan 2 15:04:05 MST 2006 ​\t虽然这可能看起来是任意的，但 MST 的数字值为 07 ，因此使布局字符串成为数字序列。\n​\t这里有一个可视化解释直接取自 Go 文档：\nJan 2 15:04:05 2006 MST =\u0026gt; 1 2 3 4 5 6 -7 Hugo 日期和时间模板参考 # ​\t以下示例显示布局字符串，后跟渲染的输出。\n​\t这些示例在CST中进行了渲染和测试，并且都指向内容文件前置元数据中的同一字段：\ndate: 2017-03-03T14:15:59-06:00 .Date (即通过页面变量进行调用)\n返回：2017-03-03 14:15:59 -0600 CST\n\u0026quot;Monday, January 2, 2006\u0026quot;\n返回：Friday, March 3, 2017\n\u0026quot;Mon Jan 2 2006\u0026quot;\n返回：Fri Mar 3 2017\n\u0026quot;January 2006\u0026quot;\n返回：March 2017\n\u0026quot;2006-01-02\u0026quot;\n返回：2017-03-03\n\u0026quot;Monday\u0026quot;\n返回：Friday\n\u0026quot;02 Jan 06 15:04 MST\u0026quot; (RFC822)\n返回：03 Mar 17 14:15 CST\n\u0026quot;02 Jan 06 15:04 -0700\u0026quot; (RFC822Z)\n返回：03 Mar 17 14:15 -0600\n\u0026quot;Mon, 02 Jan 2006 15:04:05 MST\u0026quot; (RFC1123)\n返回：Fri, 03 Mar 2017 14:15:59 CST\n\u0026quot;Mon, 02 Jan 2006 15:04:05 -0700\u0026quot; (RFC1123Z)\n返回：Fri, 03 Mar 2017 14:15:59 -0600\n​\t有关更多示例，请参见go文档中的time包。\n基数和序数缩写 # ​\t目前不支持拼写出的基数（例如\u0026quot;one\u0026quot;，\u0026ldquo;two\u0026quot;和\u0026quot;three\u0026rdquo;）。\n​\t使用 humanize函数将月份的日期渲染为序数：\n{{ humanize .Date.Day }} of {{ .Date.Format \u0026#34;January 2006\u0026#34; }} ​\t这将输出：\n5th of March 2017 使用 .Local 和.UTC # ​\t与 dateFormat 函数一起使用，您还可以将日期转换为 UTC 或本地时区：\n{{ dateFormat \u0026quot;02 Jan 06 15:04 MST\u0026quot; .Date.UTC }}\n返回：03 Mar 17 20:15 UTC\n{{ dateFormat \u0026quot;02 Jan 06 15:04 MST\u0026quot; .Date.Local }}\n返回：03 Mar 17 14:15 CST\n另请参阅 # .AddDate .Unix now time time.Format "},{"id":16,"href":"/hugo/templ/templatelookuporder/","title":"Hugo 的查找顺序","section":"模板","content":" Hugo\u0026rsquo;s Lookup Order - Hugo 的查找顺序 # https://gohugo.io/templates/lookup-order/\n​\tHugo按照一定的顺序查找给定页面的布局，从最具体的布局开始。\nHugo 布局查找规则 # ​\tHugo在选择给定页面的布局时会考虑下面列出的参数。它们按优先级排序。这应该很自然，但具体的参数变化请参考下面的表格。\nKind\n页面的Kind（主页是其中之一）。请参见下面每个种类的示例表格。这也确定了它是单页面（即常规内容页面。然后我们在_default/single.html中寻找HTML模板）还是列表页面（章节列表、主页、分类列表、分类术语。然后我们在_default/list.html中寻找HTML模板）。\nLayout\n可以在页面前置元数据中设置。\n输出格式\n请参见自定义输出格式。输出格式既有一个name（例如rss、amp、html），也有一个suffix（例如xml、html）。我们更喜欢两者匹配（例如index.amp.html），但寻找较不具体的模板。\n请注意，如果输出格式的媒体类型定义了多个后缀，则只考虑第一个后缀。\nLanguage\n模板名称中会考虑语言代码。如果站点语言是fr，则index.fr.amp.html将优于index.amp.html，但 index.amp.html 将在 index.fr.html 之前被选择。\nType\n如果在前置元数据中设置了type的值，则它是type的值，否则它是根章节的名称（例如\u0026quot;blog\u0026quot;）。它总是有一个值，所以如果未设置，则值为\u0026quot;page\u0026quot;。\nSection\n对于section、taxonomy和term类型很重要。\n提示：下面的示例看起来很长、很复杂。这就是灵活性在起作用。大多数Hugo站点只包含少量模板：\n├── _default │ ├── baseof.html │ ├── list.html │ └── single.html └── index.html 带有主题的 Hugo 布局查找规则 # ​\t在Hugo中，布局可以存在于项目或主题的布局文件夹中，并且会选择最具体的布局。Hugo将交错查找下面的布局，找到最具体的一个布局，无论是在项目还是主题中。\n示例：常规页面的布局查找 # Example OutputFormat Suffix Template Lookup Order Single page in \u0026ldquo;posts\u0026rdquo; section HTML html layouts/posts/single.html.htmllayouts/posts/single.htmllayouts/_default/single.html.htmllayouts/_default/single.html Base template for single page in \u0026ldquo;posts\u0026rdquo; section HTML html layouts/posts/single-baseof.html.htmllayouts/posts/baseof.html.htmllayouts/posts/single-baseof.htmllayouts/posts/baseof.htmllayouts/_default/single-baseof.html.htmllayouts/_default/baseof.html.htmllayouts/_default/single-baseof.htmllayouts/_default/baseof.html Single page in \u0026ldquo;posts\u0026rdquo; section with layout set HTML html layouts/posts/demolayout.html.htmllayouts/posts/single.html.htmllayouts/posts/demolayout.htmllayouts/posts/single.htmllayouts/_default/demolayout.html.htmllayouts/_default/single.html.htmllayouts/_default/demolayout.htmllayouts/_default/single.html Base template for single page in \u0026ldquo;posts\u0026rdquo; section with layout set HTML html layouts/posts/demolayout-baseof.html.htmllayouts/posts/single-baseof.html.htmllayouts/posts/baseof.html.htmllayouts/posts/demolayout-baseof.htmllayouts/posts/single-baseof.htmllayouts/posts/baseof.htmllayouts/_default/demolayout-baseof.html.htmllayouts/_default/single-baseof.html.htmllayouts/_default/baseof.html.htmllayouts/_default/demolayout-baseof.htmllayouts/_default/single-baseof.htmllayouts/_default/baseof.html AMP single page AMP html layouts/posts/single.amp.htmllayouts/posts/single.htmllayouts/_default/single.amp.htmllayouts/_default/single.html AMP single page, French language AMP html layouts/posts/single.fr.amp.htmllayouts/posts/single.amp.htmllayouts/posts/single.fr.htmllayouts/posts/single.htmllayouts/_default/single.fr.amp.htmllayouts/_default/single.amp.htmllayouts/_default/single.fr.htmllayouts/_default/single.html 示例：主页的布局查找 # Example OutputFormat Suffix Template Lookup Order Home page HTML html layouts/index.html.htmllayouts/home.html.htmllayouts/list.html.htmllayouts/index.htmllayouts/home.htmllayouts/list.htmllayouts/_default/index.html.htmllayouts/_default/home.html.htmllayouts/_default/list.html.htmllayouts/_default/index.htmllayouts/_default/home.htmllayouts/_default/list.html Base template for home page HTML html layouts/index-baseof.html.htmllayouts/home-baseof.html.htmllayouts/list-baseof.html.htmllayouts/baseof.html.htmllayouts/index-baseof.htmllayouts/home-baseof.htmllayouts/list-baseof.htmllayouts/baseof.htmllayouts/_default/index-baseof.html.htmllayouts/_default/home-baseof.html.htmllayouts/_default/list-baseof.html.htmllayouts/_default/baseof.html.htmllayouts/_default/index-baseof.htmllayouts/_default/home-baseof.htmllayouts/_default/list-baseof.htmllayouts/_default/baseof.html Home page with type set HTML html layouts/demotype/index.html.htmllayouts/demotype/home.html.htmllayouts/demotype/list.html.htmllayouts/demotype/index.htmllayouts/demotype/home.htmllayouts/demotype/list.htmllayouts/index.html.htmllayouts/home.html.htmllayouts/list.html.htmllayouts/index.htmllayouts/home.htmllayouts/list.htmllayouts/_default/index.html.htmllayouts/_default/home.html.htmllayouts/_default/list.html.htmllayouts/_default/index.htmllayouts/_default/home.htmllayouts/_default/list.html Base template for home page with type set HTML html layouts/demotype/index-baseof.html.htmllayouts/demotype/home-baseof.html.htmllayouts/demotype/list-baseof.html.htmllayouts/demotype/baseof.html.htmllayouts/demotype/index-baseof.htmllayouts/demotype/home-baseof.htmllayouts/demotype/list-baseof.htmllayouts/demotype/baseof.htmllayouts/index-baseof.html.htmllayouts/home-baseof.html.htmllayouts/list-baseof.html.htmllayouts/baseof.html.htmllayouts/index-baseof.htmllayouts/home-baseof.htmllayouts/list-baseof.htmllayouts/baseof.htmllayouts/_default/index-baseof.html.htmllayouts/_default/home-baseof.html.htmllayouts/_default/list-baseof.html.htmllayouts/_default/baseof.html.htmllayouts/_default/index-baseof.htmllayouts/_default/home-baseof.htmllayouts/_default/list-baseof.htmllayouts/_default/baseof.html Home page with layout set HTML html layouts/demolayout.html.htmllayouts/index.html.htmllayouts/home.html.htmllayouts/list.html.htmllayouts/demolayout.htmllayouts/index.htmllayouts/home.htmllayouts/list.htmllayouts/_default/demolayout.html.htmllayouts/_default/index.html.htmllayouts/_default/home.html.htmllayouts/_default/list.html.htmllayouts/_default/demolayout.htmllayouts/_default/index.htmllayouts/_default/home.htmllayouts/_default/list.html AMP home, French language AMP html layouts/index.fr.amp.htmllayouts/home.fr.amp.htmllayouts/list.fr.amp.htmllayouts/index.amp.htmllayouts/home.amp.htmllayouts/list.amp.htmllayouts/index.fr.htmllayouts/home.fr.htmllayouts/list.fr.htmllayouts/index.htmllayouts/home.htmllayouts/list.htmllayouts/_default/index.fr.amp.htmllayouts/_default/home.fr.amp.htmllayouts/_default/list.fr.amp.htmllayouts/_default/index.amp.htmllayouts/_default/home.amp.htmllayouts/_default/list.amp.htmllayouts/_default/index.fr.htmllayouts/_default/home.fr.htmllayouts/_default/list.fr.htmllayouts/_default/index.htmllayouts/_default/home.htmllayouts/_default/list.html JSON home JSON json layouts/index.json.jsonlayouts/home.json.jsonlayouts/list.json.jsonlayouts/index.jsonlayouts/home.jsonlayouts/list.jsonlayouts/_default/index.json.jsonlayouts/_default/home.json.jsonlayouts/_default/list.json.jsonlayouts/_default/index.jsonlayouts/_default/home.jsonlayouts/_default/list.json RSS home RSS xml layouts/index.rss.xmllayouts/home.rss.xmllayouts/rss.xmllayouts/list.rss.xmllayouts/index.xmllayouts/home.xmllayouts/list.xmllayouts/_default/index.rss.xmllayouts/_default/home.rss.xmllayouts/_default/rss.xmllayouts/_default/list.rss.xmllayouts/_default/index.xmllayouts/_default/home.xmllayouts/_default/list.xmllayouts/_internal/_default/rss.xml 示例：章节页面的布局查找 # Example OutputFormat Suffix Template Lookup Order RSS section posts RSS xml layouts/posts/section.rss.xmllayouts/posts/rss.xmllayouts/posts/list.rss.xmllayouts/posts/section.xmllayouts/posts/list.xmllayouts/section/section.rss.xmllayouts/section/rss.xmllayouts/section/list.rss.xmllayouts/section/section.xmllayouts/section/list.xmllayouts/_default/section.rss.xmllayouts/_default/rss.xmllayouts/_default/list.rss.xmllayouts/_default/section.xmllayouts/_default/list.xmllayouts/_internal/_default/rss.xml Section list for \u0026ldquo;posts\u0026rdquo; section HTML html layouts/posts/posts.html.htmllayouts/posts/section.html.htmllayouts/posts/list.html.htmllayouts/posts/posts.htmllayouts/posts/section.htmllayouts/posts/list.htmllayouts/section/posts.html.htmllayouts/section/section.html.htmllayouts/section/list.html.htmllayouts/section/posts.htmllayouts/section/section.htmllayouts/section/list.htmllayouts/_default/posts.html.htmllayouts/_default/section.html.htmllayouts/_default/list.html.htmllayouts/_default/posts.htmllayouts/_default/section.htmllayouts/_default/list.html Section list for \u0026ldquo;posts\u0026rdquo; section with type set to \u0026ldquo;blog\u0026rdquo; HTML html layouts/blog/posts.html.htmllayouts/blog/section.html.htmllayouts/blog/list.html.htmllayouts/blog/posts.htmllayouts/blog/section.htmllayouts/blog/list.htmllayouts/posts/posts.html.htmllayouts/posts/section.html.htmllayouts/posts/list.html.htmllayouts/posts/posts.htmllayouts/posts/section.htmllayouts/posts/list.htmllayouts/section/posts.html.htmllayouts/section/section.html.htmllayouts/section/list.html.htmllayouts/section/posts.htmllayouts/section/section.htmllayouts/section/list.htmllayouts/_default/posts.html.htmllayouts/_default/section.html.htmllayouts/_default/list.html.htmllayouts/_default/posts.htmllayouts/_default/section.htmllayouts/_default/list.html Section list for \u0026ldquo;posts\u0026rdquo; section with layout set to \u0026ldquo;demoLayout\u0026rdquo; HTML html layouts/posts/demolayout.html.htmllayouts/posts/posts.html.htmllayouts/posts/section.html.htmllayouts/posts/list.html.htmllayouts/posts/demolayout.htmllayouts/posts/posts.htmllayouts/posts/section.htmllayouts/posts/list.htmllayouts/section/demolayout.html.htmllayouts/section/posts.html.htmllayouts/section/section.html.htmllayouts/section/list.html.htmllayouts/section/demolayout.htmllayouts/section/posts.htmllayouts/section/section.htmllayouts/section/list.htmllayouts/_default/demolayout.html.htmllayouts/_default/posts.html.htmllayouts/_default/section.html.htmllayouts/_default/list.html.htmllayouts/_default/demolayout.htmllayouts/_default/posts.htmllayouts/_default/section.htmllayouts/_default/list.html 示例：分类页面的布局查找 # Example OutputFormat Suffix Template Lookup Order Taxonomy in categories RSS xml layouts/categories/category.terms.rss.xmllayouts/categories/terms.rss.xmllayouts/categories/taxonomy.rss.xmllayouts/categories/rss.xmllayouts/categories/list.rss.xmllayouts/categories/category.terms.xmllayouts/categories/terms.xmllayouts/categories/taxonomy.xmllayouts/categories/list.xmllayouts/category/category.terms.rss.xmllayouts/category/terms.rss.xmllayouts/category/taxonomy.rss.xmllayouts/category/rss.xmllayouts/category/list.rss.xmllayouts/category/category.terms.xmllayouts/category/terms.xmllayouts/category/taxonomy.xmllayouts/category/list.xmllayouts/taxonomy/category.terms.rss.xmllayouts/taxonomy/terms.rss.xmllayouts/taxonomy/taxonomy.rss.xmllayouts/taxonomy/rss.xmllayouts/taxonomy/list.rss.xmllayouts/taxonomy/category.terms.xmllayouts/taxonomy/terms.xmllayouts/taxonomy/taxonomy.xmllayouts/taxonomy/list.xmllayouts/_default/category.terms.rss.xmllayouts/_default/terms.rss.xmllayouts/_default/taxonomy.rss.xmllayouts/_default/rss.xmllayouts/_default/list.rss.xmllayouts/_default/category.terms.xmllayouts/_default/terms.xmllayouts/_default/taxonomy.xmllayouts/_default/list.xmllayouts/_internal/_default/rss.xml Taxonomy list in categories HTML html layouts/categories/category.terms.html.htmllayouts/categories/terms.html.htmllayouts/categories/taxonomy.html.htmllayouts/categories/list.html.htmllayouts/categories/category.terms.htmllayouts/categories/terms.htmllayouts/categories/taxonomy.htmllayouts/categories/list.htmllayouts/category/category.terms.html.htmllayouts/category/terms.html.htmllayouts/category/taxonomy.html.htmllayouts/category/list.html.htmllayouts/category/category.terms.htmllayouts/category/terms.htmllayouts/category/taxonomy.htmllayouts/category/list.htmllayouts/taxonomy/category.terms.html.htmllayouts/taxonomy/terms.html.htmllayouts/taxonomy/taxonomy.html.htmllayouts/taxonomy/list.html.htmllayouts/taxonomy/category.terms.htmllayouts/taxonomy/terms.htmllayouts/taxonomy/taxonomy.htmllayouts/taxonomy/list.htmllayouts/_default/category.terms.html.htmllayouts/_default/terms.html.htmllayouts/_default/taxonomy.html.htmllayouts/_default/list.html.htmllayouts/_default/category.terms.htmllayouts/_default/terms.htmllayouts/_default/taxonomy.htmllayouts/_default/list.html 示例：术语页面的布局查找 # Example OutputFormat Suffix Template Lookup Order Term in categories RSS xml layouts/categories/term.rss.xmllayouts/categories/category.rss.xmllayouts/categories/taxonomy.rss.xmllayouts/categories/rss.xmllayouts/categories/list.rss.xmllayouts/categories/term.xmllayouts/categories/category.xmllayouts/categories/taxonomy.xmllayouts/categories/list.xmllayouts/term/term.rss.xmllayouts/term/category.rss.xmllayouts/term/taxonomy.rss.xmllayouts/term/rss.xmllayouts/term/list.rss.xmllayouts/term/term.xmllayouts/term/category.xmllayouts/term/taxonomy.xmllayouts/term/list.xmllayouts/taxonomy/term.rss.xmllayouts/taxonomy/category.rss.xmllayouts/taxonomy/taxonomy.rss.xmllayouts/taxonomy/rss.xmllayouts/taxonomy/list.rss.xmllayouts/taxonomy/term.xmllayouts/taxonomy/category.xmllayouts/taxonomy/taxonomy.xmllayouts/taxonomy/list.xmllayouts/category/term.rss.xmllayouts/category/category.rss.xmllayouts/category/taxonomy.rss.xmllayouts/category/rss.xmllayouts/category/list.rss.xmllayouts/category/term.xmllayouts/category/category.xmllayouts/category/taxonomy.xmllayouts/category/list.xmllayouts/_default/term.rss.xmllayouts/_default/category.rss.xmllayouts/_default/taxonomy.rss.xmllayouts/_default/rss.xmllayouts/_default/list.rss.xmllayouts/_default/term.xmllayouts/_default/category.xmllayouts/_default/taxonomy.xmllayouts/_default/list.xmllayouts/_internal/_default/rss.xml Taxonomy term in categories HTML html layouts/categories/term.html.htmllayouts/categories/category.html.htmllayouts/categories/taxonomy.html.htmllayouts/categories/list.html.htmllayouts/categories/term.htmllayouts/categories/category.htmllayouts/categories/taxonomy.htmllayouts/categories/list.htmllayouts/term/term.html.htmllayouts/term/category.html.htmllayouts/term/taxonomy.html.htmllayouts/term/list.html.htmllayouts/term/term.htmllayouts/term/category.htmllayouts/term/taxonomy.htmllayouts/term/list.htmllayouts/taxonomy/term.html.htmllayouts/taxonomy/category.html.htmllayouts/taxonomy/taxonomy.html.htmllayouts/taxonomy/list.html.htmllayouts/taxonomy/term.htmllayouts/taxonomy/category.htmllayouts/taxonomy/taxonomy.htmllayouts/taxonomy/list.htmllayouts/category/term.html.htmllayouts/category/category.html.htmllayouts/category/taxonomy.html.htmllayouts/category/list.html.htmllayouts/category/term.htmllayouts/category/category.htmllayouts/category/taxonomy.htmllayouts/category/list.htmllayouts/_default/term.html.htmllayouts/_default/category.html.htmllayouts/_default/taxonomy.html.htmllayouts/_default/list.html.htmllayouts/_default/term.htmllayouts/_default/category.htmllayouts/_default/taxonomy.htmllayouts/_default/list.html 另请参阅 # 创建自己的简码 RSS 模板 章节页面模板 单页面模板 站点地图模板 "},{"id":17,"href":"/hugo/hugomodules/usehugomodules/","title":"使用 Hugo 模块","section":"Hugo模块","content":" Use Hugo Modules - 使用 Hugo 模块 # https://gohugo.io/hugo-modules/use-modules/\n​\t如何使用 Hugo 模块来构建和管理您的站点。\n先决条件 # ​\t大多数 Hugo 模块的命令需要安装更新版本的 Go（请参阅 https://golang.org/dl/）和相关的 VCS 客户端（例如 Git，请参阅 https://git-scm.com/downloads/）。如果您在 Netlify 上运行的是\u0026quot;旧\u0026quot;站点，则可能需要在环境设置中将 GO_VERSION 设置为 1.12。\n​\t有关 Go 模块的更多信息，请参见:\nhttps://github.com/golang/go/wiki/Modules https://blog.golang.org/using-go-modules 初始化新模块 # ​\t使用 hugo mod init 初始化一个新的 Hugo 模块。如果它无法猜测模块路径，您必须提供它作为参数，例如:\nhugo mod init github.com/gohugoio/myShortcodes ​\t另请参阅 CLI 文档。\n为主题使用模块 # ​\t使用模块作为主题的最简单方法是在配置中导入它。\n初始化 hugo 模块系统：hugo mod init github.com/\u0026lt;your_user\u0026gt;/\u0026lt;your_project\u0026gt; 导入主题： config.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml module: imports: - path: github.com/spf13/hyde ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [module] [[module.imports]] path = 'github.com/spf13/hyde' ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;module\u0026quot;: { \u0026quot;imports\u0026quot;: [ { \u0026quot;path\u0026quot;: \u0026quot;github.com/spf13/hyde\u0026quot; } ] } } ``` 更新模块 # ​\t将模块作为导入项添加到您的配置文件时，模块将被下载并添加，详见模块导入。\n​\t要更新或管理版本，可以使用 hugo mod get 命令。\n​\t以下是一些示例：\n更新所有模块 # hugo mod get -u 递归更新所有模块 # hugo mod get -u ./... 更新一个模块 # hugo mod get -u github.com/gohugoio/myShortcodes 获取特定版本 # hugo mod get github.com/gohugoio/myShortcodes@v1.0.7 ​\t另请参阅 CLI 文档。\n在模块中进行更改和测试 # ​\t在项目中导入模块并进行本地开发的一种方法是在 go.mod 中使用replace 指令将本地目录与源代码联系起来：\nreplace github.com/bep/hugotestmods/mypartials =\u0026gt; /Users/bep/hugotestmods/mypartials ​\t如果 hugo server正在运行，则会重新加载配置，并将 /Users/bep/hugotestmods/mypartials 添加到监视列表中。\n​\t除了修改 go.mod 文件之外，您还可以使用模块配置的replacements选项。\n打印依赖项图 # ​\t从相关的模块目录使用 hugo mod graph 命令，它将打印依赖项图，包括 vendoring、模块替换或禁用状态。\nE.g.:\nhugo mod graph github.com/bep/my-modular-site github.com/bep/hugotestmods/mymounts@v1.2.0 github.com/bep/my-modular-site github.com/bep/hugotestmods/mypartials@v1.0.7 github.com/bep/hugotestmods/mypartials@v1.0.7 github.com/bep/hugotestmods/myassets@v1.0.4 github.com/bep/hugotestmods/mypartials@v1.0.7 github.com/bep/hugotestmods/myv2@v1.0.0 DISABLED github.com/bep/my-modular-site github.com/spf13/hyde@v0.0.0-20190427180251-e36f5799b396 github.com/bep/my-modular-site github.com/bep/hugo-fresh@v1.0.1 github.com/bep/my-modular-site in-themesdir ​\t另请参阅 CLI 文档。\nVendor Your Modules # ​\t运行hugo mod vendor将所有模块依赖项写入_vendor文件夹，然后在所有后续构建中使用它们。\n请注意：\n您可以在模块树的任何级别上运行 hugo mod vendor。 存储在themes文件夹中的模块不会被存储到Vendoring目录中。 大多数命令接受--ignoreVendorPaths标志，然后不会对与给定Glob模式匹配的模块路径使用_vendor中的供应商模块。 ​\t另请参阅CLI文档。\n整理go.mod、go.sum # ​\t运行 hugo mod tidy 以删除 go.mod 和 go.sum 中未使用的条目。\n​\t另请参阅CLI文档。\n清除模块缓存 # ​\t运行 hugo mod clean 以删除整个模块缓存。\n​\t请注意，您还可以通过 maxAge 配置模块缓存，请参阅文件缓存。\n​\t另请参阅CLI文档。\n模块工作区 # New in v0.109.0\n​\tGo 1.18 版本中增加了工作区支持，而 Hugo 在 v0.109.0 版本中得到了稳定的支持。\n​\t工作区的常见用途是简化带有其主题模块的站点的本地开发。\n​\t可以在 *.work 文件中配置工作区，并通过 module.workspace 设置激活它，对于此用法下通常由 HUGO_MODULE_WORKSPACE 操作系统环境变量控制。\n​\t在Hugo 文档库中查看hugo.work文件以获取示例：\ngo 1.19 use . use ../gohugoioTheme ​\t使用 use 指令，列出您要处理的所有模块，指向其相对位置。如上例所示，建议始终在列表中包括主项目（\u0026quot;.\u0026quot;）。\n​\t有了这个指令，您可以使用启用了该工作区的Hugo服务器：\nHUGO_MODULE_WORKSPACE=hugo.work hugo server --ignoreVendorPaths \u0026#34;**\u0026#34; ​\t上面添加了 --ignoreVendorPaths 标志，以忽略 _vendor 中与给定 Glob 模式匹配的模块路径中的任何存储的依赖项。如果您不使用 vendoring，则不需要该标志。但现在，服务器设置为监视工作区中的文件和目录，您可以看到重新加载本地编辑。\n另请参阅 # 配置模块 主题组件 目录结构 静态文件 将您的Hugo主题添加到展示窗口 "},{"id":18,"href":"/hugo/contentmanagement/pagebundles/","title":"页面Bundle","section":"内容管理","content":" Page Bundles - 页面Bundle # https://gohugo.io/content-management/page-bundles/\n​\t使用页面 Bundle 进行内容组织\n​\t页面 Bundle 是一种分组页面资源的方式。\n​\t页面 Bundle 可以是以下之一：\n叶子Bundle (叶子表示它没有子级) 分支Bundle (home page，section，taxonomy terms，taxonomy list) 叶子 Bundle 分支 Bundle 用法 单个页面内容和附件的集合 用于section页面（home page，section，taxonomy terms，taxonomy list）的附件集合 索引文件名 index.md 1 _index.md 1 允许的资源 页面和非页面类型（如图像、PDF 等） 仅允许非页面类型（如图像、PDF 等） 资源可以存放在哪里？ 在叶子 Bundle 目录中的任何目录级别。 仅在分支 Bundle 目录的目录级别中，即包含 _index.md 的目录（参考）。 布局类型 single list 嵌套 不允许在其下方嵌套更多的 Bundle 允许在其下方嵌套叶子或分支 Bundle 示例 content/posts/my-post/index.md content/posts/_index.md 非索引页面文件中的内容\u0026hellip; 仅作为页面资源访问 仅作为常规页面访问 叶子Bundles # ​\t叶子 Bundle 是 content/ 目录中任何层次结构中包含 index.md 文件的目录。\n叶子 Bundle 组织示例： # content/ ├── about │ ├── index.md ├── posts │ ├── my-post │ │ ├── content1.md │ │ ├── content2.md │ │ ├── image1.jpg │ │ ├── image2.png │ │ └── index.md │ └── my-other-post │ └── index.md │ └── another-section ├── .. └── not-a-leaf-bundle ├── .. └── another-leaf-bundle └── index.md In the above example content/ directory, there are four leaf bundles:\n​\t在上面的示例中，content/ 目录中有四个叶子 Bundle：\nabout\n这个叶子 Bundle 在根级别（直接在 content 目录下）并且只有 index.md。\nmy-post\n这个叶子 Bundle 有 index.md、另外两个内容 Markdown 文件和两个图像文件。\nimage1, image2：这些图像是 my-post 的页面资源，仅在 my-post/index.md 资源中可用。\ncontent1, content2: These content files are page resources of my-post and only available in my-post/index.md resources. They will not be rendered as individual pages. 这些内容文件是 my-post 的页面资源，仅在 my-post/index.md 资源中可用。它们不会被渲染为单独的页面。\nmy-other-post\n这个叶子 Bundle 只有 index.md。\nanother-leaf-bundle\n这个叶子 Bundle 被嵌套在几个目录下。此 Bundle 也只有 index.md。\n​\t创建叶子 Bundle 的层次深度不重要，只要它不在另一个叶子 Bundle 中即可。\nHeadless Bundle # ​\t无头Bundle是一种配置为不在任何地方发布的Bundle：\n它将没有永久链接（Permalink）和public/中的渲染HTML。 它不会成为.Site.RegularPages等的一部分。 ​\t但是，您可以通过.Site.GetPage获取它。以下是一个示例：\n{{ $headless := .Site.GetPage \u0026#34;/some-headless-bundle\u0026#34; }} {{ $reusablePages := $headless.Resources.Match \u0026#34;author*\u0026#34; }} \u0026lt;h2\u0026gt;Authors\u0026lt;/h2\u0026gt; {{ range $reusablePages }} \u0026lt;h3\u0026gt;{{ .Title }}\u0026lt;/h3\u0026gt; {{ .Content }} {{ end }} ​\t在此示例中，我们假设some-headless-bundle是一个包含一个或多个页面资源的无头Bundle，其.Name与\u0026quot;author*\u0026quot;匹配。\n​\t上面示例的说明：\n获取some-headless-bundle页面\u0026quot;object\u0026quot;。 使用.Resources.Match收集此页面Bundle中与\u0026quot;author*\u0026quot;匹配的资源片段。 循环遍历嵌套页面的切片，并输出它们的.Title和.Content。 ​\t通过在index.md的前置元数据中添加以下内容，可以将一个叶子Bundle变为无头Bundle：\ncontent/headless/index.md\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml --- headless: true --- ``` === \u0026ldquo;toml\u0026rdquo;\n```toml +++ headless = true +++ ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;headless\u0026quot;: true } ``` ​\t此类无头页面Bundle有许多用例：\n共享媒体库 可重复使用的页面内容\u0026quot;snippets（片段）\u0026quot; 分支Bundle # ​\t分支Bundle是位于content/目录中任何层次结构中的任何目录，其中至少包含一个_index.md文件。\n​\t这个_index.md也可以直接在content/目录下。\n​\t这里以md（markdown）仅作为示例。只要它是Hugo可识别的内容类型，您可以使用任何文件类型作为内容资源。\n分支Bundle组织示例 # content/ ├── branch-bundle-1 │ ├── branch-content1.md │ ├── branch-content2.md │ ├── image1.jpg │ ├── image2.png │ └── _index.md └── branch-bundle-2 ├── _index.md └── a-leaf-bundle └── index.md ​\t在上面的content/目录示例中，有两个分支Bundle（和一个叶子Bundle）：\nbranch-bundle-1\n该分支Bundle有_index.md，另外两个内容Markdown文件和两个图像文件。\nbranch-bundle-2\n该分支Bundle有_index.md和一个嵌套的叶子Bundle。\n​\t创建分支Bundle的层次深度不重要。\n.md扩展名仅作为示例。扩展名可以是.html，.json或任何有效的MIME类型。 ↩︎ ↩︎ 另请参阅 # 内容组织 页面资源 单页模板 "},{"id":19,"href":"/hugo/variables/pagevariables/","title":"页面变量","section":"变量","content":" Page Variables - 页面变量 # https://gohugo.io/variables/page/\n​\t页面级变量定义在内容文件的前置元数据中，从内容文件的位置中派生出来，或从内容本身中提取出来。\n​\t以下是页面级变量列表。其中许多将在前置元数据中定义、从文件位置中派生或从内容本身中提取。\n页面变量 # .AlternativeOutputFormats # 包含给定页面的所有备选格式；这个变量在您站点的 \u0026lt;head\u0026gt; 中的 link rel 列表中非常有用。（请参见输出格式(Output Formats)。）\n.Aliases # 此页面的别名\n.Ancestors # ​\t获取每个页面的祖先，简化 面包屑导航(breadcrumb navigation) 实现的复杂性。\n.BundleType # ​\tbundle类型: leaf, branch, 或者如果页面不是bundle，则为空字符串。\n.Content # ​\t内容本身，在前置元数据下定义。\n.Data # ​\t特定于此页面类型的数据。\n.Date # ​\t与页面相关联的日期；.Date从内容的前置元数据中的date字段获取。还请参见.ExpiryDate、.PublishDate和.Lastmod。\n.Description # ​\t此页面的描述。\n.Draft # ​\t一个布尔值，如果内容在前置元数据中标记为草稿，则为 true。\n.ExpiryDate # ​\t内容计划过期的日期；.ExpiryDate从内容的前置元数据中的expirydate字段获取。还请参见.PublishDate、.Date和.Lastmod。\n.File # 此内容文件的文件系统相关数据。另请参见文件变量(File Variables)。\n.Fragments # ​\tFragments返回此页面的片段。请参见页面片段(Page Fragments)。\n.FuzzyWordCount # ​\t此内容中字的大致数量。\n.IsHome # ​\t在 主页(homepage) 的上下文中为 true。\n.IsNode # ​\t对于常规内容页面始终为 false。\n.IsPage # ​\t对于常规内容页面始终为 true。\n.IsSection # ​\t如果 .Kind 是 section，则为 true。\n.IsTranslated # ​\t如果有要显示的翻译，则为 true。\n.Keywords # ​\t此内容的元关键字。\n.Kind # ​\t此页面的 kind。可能的返回值为 page、home、section、taxonomy 或 term。请注意，还有 RSS、sitemap、robotsTXT 和 404 类型，但这些仅在每个相应页面类型的渲染期间可用，因此这些不可在任何 Pages 集合中使用。\n.Language # ​\t一个指向该站点 config 中语言定义的语言对象。.Language.Lang 给出语言代码。\n.Lastmod # ​\t此内容最后修改日期。.Lastmod 从内容的前置元数据中的 lastmod 字段获取。\n如果未设置 lastmod 并且 .GitInfo 特性已禁用，则将使用前置元数据中的 date 字段。 如果未设置 lastmod 并且 .GitInfo 特性已启用，则将使用.GitInfo.AuthorDate。 ​\t另请参阅 .ExpiryDate、.Date、.PublishDate 和 .GitInfo。\n.LinkTitle # ​\t创建指向此内容的链接时使用。如果设置了（linktitle），Hugo 将在title之前使用前置元数据中的 linktitle。\n.Next # ​\t指向下一个 常规页面（按 Hugo 的 默认排序 排序）。示例：{{ with .Next }}{{ .Permalink }}{{ end }}。从第一页调用 .Next 将返回 nil。\n.NextInSection # ​\t指向同一顶级章节的下一个 常规页面（例如在 /blog 中）。页面按 Hugo 的 默认排序 排序。示例：{{ with .NextInSection }}{{ .Permalink }}{{ end }}。从第一页调用 .NextInSection 将返回 nil。\n.OutputFormats # ​\t包含给定页面的所有格式，包括当前格式。可以与 .Get 函数 结合使用来获取特定格式（请参阅 输出格式）。\n.Pages # ​\t相关页面的集合。在常规内容页面的上下文中，此值将为 nil。请参阅 .Pages。\n.Permalink # ​\t此页面的永久链接；请参阅 永久链接。\n.Plain # ​\t此页面内容去掉 HTML 标签后以字符串形式呈现。在使用 HTML 输出格式 渲染此值时，您可能需要通过 htmlUnescape 函数进行结果处理。\n.PlainWords # ​\t将 .Plain 拆分为字所生成的字符串切片，如 Go 的 strings.Fields 中定义。\n.Prev # ​\t指向上一个 常规页面（按 Hugo 的 默认排序 排序）。示例：{{ if .Prev }}{{ .Prev.Permalink }}{{ end }}。从最后一页调用 .Prev 将返回 nil。\n.PrevInSection # ​\t指向同一顶级章节的下一个 常规页面（例如 /blog）。页面按 Hugo 的 默认排序 排序。示例：{{ if .PrevInSection }}{{ .PrevInSection.Permalink }}{{ end }}。从最后一页调用 .PrevInSection 将返回 nil。\n.PublishDate # ​\t此内容发布日期或将要发布的日期；.Publishdate 从内容的前置元数据中的 publishdate 字段获取。另请参阅 .ExpiryDate、.Date 和 .Lastmod。\n.RawContent # ​\t没有前置元数据的原始Markdown内容。与 remarkjs.com 配合使用很有用。\n.ReadingTime # ​\t估计阅读此内容需要的时间（以分钟为单位）。\n.Resources # ​\t与此页面相关联的资源，例如图像和CSS。\n.Ref # ​\t返回给定引用（例如 .Ref \u0026quot;sample.md\u0026quot;）的永久链接。.Ref 无法正确处理页面内部片段。请参阅 交叉引用。\n.RelPermalink # ​\t此页面的相对永久链接。\n.RelRef # ​\t返回给定引用（例如 RelRef \u0026quot;sample.md\u0026quot;）的相对永久链接。.RelRef 无法正确处理页面内部片段。请参阅 交叉引用。\n.Site # ​\t参见站点变量。\n.Sites # ​\t返回所有站点（语言）。一个典型的用例是链接回主语言：\u0026lt;a href=\u0026quot;{{ .Sites.First.Home.RelPermalink }}\u0026quot;\u0026gt;...\u0026lt;/a\u0026gt;。\n.Sites.First # ​\t返回第一种语言的站点。如果这不是多语言设置，则会返回它本身。\n.Summary # ​\t此内容的生成摘要，用于在摘要视图中轻松显示片段。可以在内容页中适当位置插入 `\n` 来手动设置断点，或者可以独立于页面文本编写摘要。有关详细信息，请参阅 内容摘要。\n.TableOfContents # ​\t此页面的渲染 目录。\n.Title # ​\t此页面的标题。\n.Translations # ​\t当前页面的翻译版本列表。有关更多信息，请参阅 多语言模式。\n.TranslationKey # ​\t用于映射当前页面的语言翻译的key。有关更多信息，请参阅 多语言模式。\n.Truncated # ​\t一个布尔值，如果 .Summary 被截断，则为 true。仅在必要时显示\u0026quot;Read more…\u0026ldquo;链接很有用。有关详细信息，请参阅 摘要。\n.Type # ​\t此内容的 内容类型（例如 posts）。\n.Weight # ​\t分配给此内容的权重（在前置元数据中），用于排序。\n.WordCount # ​\t此内容中的字数。\n可写的页面范围变量 # .Scratch # .Scratch\n返回一个 Scratch 来存储和操作数据。与 .Store 方法相比，此 Scratch 在服务器重新构建时会被重置。\n.Store # .Store\n返回一个 Scratch 来存储和操作数据。与 .Scratch 方法相比，此 Scratch 在服务器重新构建时不会被重置。\n章节变量和方法 # ​\t另请参见章节。\n.CurrentSection # ​\t此页面的当前章节。如果它是一个章节或主页，则该值可以是页面本身。\n.FirstSection # ​\t此页面根目录下的第一个章节，例如 /docs、/blog 等等。\n.InSection $anotherPage # ​\t给定页面是否在当前章节中。\n.IsAncestor $anotherPage # ​\t当前页面是否是给定页面的祖先页面。\n.IsDescendant $anotherPage # ​\t当前页面是否是给定页面的后代页面。\n.Parent # ​\t章节的父级章节或页面所属的章节。\n.Section # ​\t此内容所属的章节。注意： 对于嵌套章节，这是目录中的第一个路径元素，例如 /blog/funny/mypost/ =\u0026gt; blog。\n.Sections # ​\t此内容下的章节。\n.Pages变量 # ​\t.Pages 是 .Data.Pages 的别名。惯例是使用别名形式 .Pages。\n.Pages与.Site.Pages的比较 # 常规页面是\u0026quot;post\u0026quot;页面或\u0026quot;content\u0026quot;页面。\n叶子bundle是常规页面。 列表页面可以列出常规页面和其他列表页面。一些例子是：主页、章节页面、分类法（/tags/）和条目（/tags/foo/）页面。\n分支bundle是一个列表页面。 .Site.Pages\n站点中所有页面的集合：常规页面、章节、分类法等等。——Superset of everything!\n.Site.RegularPages\n仅包含常规页面的集合。\n​\t上述.Site. ..页面集合可以从模板的任何作用域中访问。\n​\t以下变量仅从当前列表页的作用域返回页面集合：\n.Pages\nCollection of regular pages and only first-level section pages under the current list page.\n在当前列表页面下，包含所有常规页面和只有一级章节页面的集合。\n.RegularPages\n仅包括当前列表页面下的常规页面的集合。这不包括嵌套章节/列表页面中的常规页面（那些是带有 _index.md 文件的子目录）。\n.RegularPagesRecursive\n包含一个列表页面下的所有普通页面的集合。这包括嵌套章节/列表页面中的常规页面。\n注意\n从常规页面的作用域来看，.Pages 和 .RegularPages 返回一个空的 slice。\nPage Fragments 页面片段 # New in v0.111.0\n​\t.Fragments 方法返回当前页面的片段列表。\n.Headings # ​\t当前页面的递归标题列表。可用于生成目录。\n.Identifiers # ​\t当前页面的标识符的排序列表。可用于检查页面是否包含特定标识符或页面是否包含重复标识符：\n{{ if .Fragments.Identifiers.Contains \u0026#34;my-identifier\u0026#34; }} \u0026lt;p\u0026gt;Page contains identifier \u0026#34;my-identifier\u0026#34;\u0026lt;/p\u0026gt; {{ end }} {{ if gt (.Fragments.Identifiers.Count \u0026#34;my-identifier\u0026#34;) 1 }} \u0026lt;p\u0026gt;Page contains duplicate \u0026#34;my-identifier\u0026#34; fragments\u0026lt;/p\u0026gt; {{ end }} .HeadingsMap # ​\t保存了当前页面的一个标题映射。可用于从特定标题开始生成目录。\n​\t还请参阅 Go Doc 获取返回类型的信息。\nhooks和简码中的Fragments # ​\t.Fragments 可以在渲染钩子中安全调用，即使在当前页面（.Page.Fragments）上也可以。对于简码，我们建议所有 .Fragments 的用法都嵌套在 \\{\\{\\\u0026lt;\\\u0026gt;\\}\\} 简码定界符内（\\{\\{\\%\\%\\}\\} 参与 ToC 的创建，所以很容易陷入一种咬尾巴的情况）。\n全局页面函数 # New in v0.111.1\n​\tHugo 几乎总是将 Page 作为数据上下文传递到顶层模板（例如 single.html）中（唯一的例外是多主机（multihost ）站点地图模板）。这意味着您可以在模板中使用 . 变量访问当前页面。\n​\t但是，在 .Render，partial 等嵌套较深的情况下，访问该 Page 对象并不总是实用或可能的。\n​\t因此，Hugo 提供了一个全局的 page 函数，您可以使用它从任何模板中的任何位置访问当前页面。\n{{ page.Title }} ​\t这里有一个需要注意的地方，这并不是新问题，但是值得在这里提一下：在 Hugo 中，您可能会看到缓存值的情况，例如在 partialCached 或简码中时。\nPage-level Params # ​\t在内容文件中定义的任何其他值，包括分类法，都将作为 .Params 变量的一部分提供。\ncontent/example.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- categories: - one tags: - two - three - four title: Example --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ categories = ['one'] tags = ['two', 'three', 'four'] title = 'Example' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;categories\u0026quot;: [ \u0026quot;one\u0026quot; ], \u0026quot;tags\u0026quot;: [ \u0026quot;two\u0026quot;, \u0026quot;three\u0026quot;, \u0026quot;four\u0026quot; ], \u0026quot;title\u0026quot;: \u0026quot;Example\u0026quot; } ``` ​\t使用上面的前置元数据，可以通过以下方式访问 tags 和 categories 分类法：\n.Params.tags .Params.categories ​\t.Params 变量对于在内容文件中引入用户定义的前置元数据字段特别有用。例如，针对图书评论的 Hugo 站点可以具有以下前置元数据：\ncontent/example.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- affiliatelink: http://www.my-book-link.here recommendedby: My Mother title: Example --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ affiliatelink = 'http://www.my-book-link.here' recommendedby = 'My Mother' title = 'Example' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;affiliatelink\u0026quot;: \u0026quot;http://www.my-book-link.here\u0026quot;, \u0026quot;recommendedby\u0026quot;: \u0026quot;My Mother\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Example\u0026quot; } ``` ​\t然后可以通过 .Params.affiliatelink 和 .Params.recommendedby 访问这些字段。\n\u0026lt;h3\u0026gt;\u0026lt;a href=\u0026#34;{{ .Params.affiliatelink }}\u0026#34;\u0026gt;Buy this book\u0026lt;/a\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;It was recommended by {{ .Params.recommendedby }}.\u0026lt;/p\u0026gt; ​\t该模板将被渲染成如下：\n\u0026lt;h3\u0026gt;\u0026lt;a href=\u0026#34;http://www.my-book-link.here\u0026#34;\u0026gt;Buy this book\u0026lt;/a\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;It was recommended by my Mother.\u0026lt;/p\u0026gt; ​\t有关在每篇内容之间保持 Params 的一致性，请参见 Archetypes。\n.Param方法 # ​\t在 Hugo 中，您可以针对个别页面和整个站点全局声明参数。一个常见的用例是为站点参数设置一个通用值，为一些页面设置更具体的值（例如，头像图片）：\n{{ $.Param \u0026#34;header_image\u0026#34; }} ​\t.Param 方法提供了一种解析单个值的方式，根据它在页面参数（即内容的前置条件）或站点参数（即您的 config）中的定义。\n访问前置元数据中的嵌套字段 # ​\t当前置元数据包含类似以下的嵌套字段时：\ncontent/example.md\n=== \u0026ldquo;yaml\u0026rdquo;\n` yaml --- author: display_name: John Feminella family_name: Feminella given_name: John title: Example --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ title = 'Example' [author] display_name = 'John Feminella' family_name = 'Feminella' given_name = 'John' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;author\u0026quot;: { \u0026quot;display_name\u0026quot;: \u0026quot;John Feminella\u0026quot;, \u0026quot;family_name\u0026quot;: \u0026quot;Feminella\u0026quot;, \u0026quot;given_name\u0026quot;: \u0026quot;John\u0026quot; }, \u0026quot;title\u0026quot;: \u0026quot;Example\u0026quot; } ``` ​\t.Param 可以通过连接字段名称并用点号分隔来访问这些字段：\n{{ $.Param \u0026#34;author.display_name\u0026#34; }} 另请参阅 # Pages方法 "},{"id":20,"href":"/hugo/installation/windows/","title":"Windows","section":"安装Hugo","content":" Windows # https://gohugo.io/installation/windows/\n​\t在 Windows 上安装 Hugo。\n版本 # ​\tHugo 有两个版本：标准版和扩展版。使用扩展版，您可以：\n将 WebP 图像进行编码（标准版和扩展版都可以解码 WebP 图像） 使用内置的 LibSass 转译器将 Sass 转译为 CSS ​\t我们建议您安装扩展版。\n先决条件 # ​\t虽然在某些情况下不是必需的，但在使用 Hugo 时经常使用 Git 和 Go。\n​\t需要Git的情况：\n使用Hugo Modules功能 从源代码构建Hugo 将主题安装为Git子模块 从本地Git存储库访问提交信息 使用服务托管您的站点，例如AWS Amplify、CloudCannon、Cloudflare Pages、GitHub Pages、GitLab Pages和Netlify。 ​\t需要Go的情况：\n使用Hugo Modules功能 从源代码构建Hugo ​\t请参阅Git和Go文档以获取安装说明。\n预构建二进制文件 # ​\t预构建的二进制文件可用于各种操作系统和架构。访问最新版本页面，然后向下滚动到Assets 部分。\n下载所需版本、操作系统和架构的存档 解压缩存档 将可执行文件移动到所需目录 将此目录添加到PATH环境变量中 验证您对该文件具有执行权限 ​\t如果需要帮助设置文件权限或修改PATH环境变量，请参考操作系统文档。\n​\t如果您没有看到所需版本、操作系统和架构的预构建二进制文件，请使用以下方法之一安装Hugo。\n包管理器 # Chocolatey # ​\tChocolatey是 Windows 的一个免费开源软件包管理器。这将安装 Hugo 的扩展版：\nchoco install hugo-extended Scoop # ​\tScoop是 Windows 的一个免费开源软件包管理器。这将安装 Hugo 的扩展版：\nscoop install hugo-extended Winget # ​\tWinget是微软的官方免费开源软件包管理器。这将安装 Hugo 的扩展版：\nwinget install Hugo.Hugo.Extended Docker # ​\tErlend Klakegg Bergheim 慷慨地维护基于 Alpine Linux、Busybox、Debian 和 Ubuntu 的 Docker 映像。\ndocker pull klakegg/hugo 从源代码构建 # 要从源代码构建 Hugo，您必须：\n安装Git 安装 Go 版本 1.18 或更高版本 按照 Go 文档中的说明更新 PATH 环境变量。 ​\t安装目录由GOPATH和GOBIN环境变量控制。如果设置了GOBIN，则二进制文件将安装到该目录。如果设置了GOPATH，则二进制文件将安装到GOPATH列表中第一个目录的bin子目录中。否则，二进制文件将安装到默认的GOPATH的bin子目录中（$HOME/go或%USERPROFILE%\\go）。\n​\t然后进行构建和测试：\ngo install -tags extended github.com/gohugoio/hugo@latest hugo version ​\t在Windows上构建Hugo的扩展版时，还需要安装GCC编译器。请参考这些详细的说明。\n比较 # Prebuilt binaries Package managers Docker Build from source Easy to install? ✔️ ✔️ ✔️ ✔️ Easy to upgrade? ✔️ ✔️ ✔️ ✔️ Easy to downgrade? ✔️ ✔️ 1 ✔️ ✔️ Automatic updates? ❌ ❌ 2 ❌ 2 ❌ Latest version available? ✔️ ✔️ ✔️ ✔️ 如果先前安装了旧版本，则易于安装。↩︎ 可能，但需要高级配置。↩︎ ↩︎ See 另请参阅 # Linux macOS BSD 在21YunBox上托管 在 GitHub 上托管 "},{"id":21,"href":"/hugo/gettingstarted/","title":"开始入门","section":"文档","content":" Get Started - 开始入门 # https://gohugo.io/getting-started/\n​\t如果这是您第一次使用 Hugo，而且已经在计算机上安装了 Hugo，则建议使用快速入门。您也可以使用外部学习资源学习 Hugo。\n"},{"id":22,"href":"/hugo/abouthugo/whatishugo/","title":"什么是 Hugo","section":"关于Hugo","content":" What is Hugo - 什么是 Hugo # https://gohugo.io/about/what-is-hugo/\n​\tHugo 是一个用 Go 语言编写的快速现代静态站点生成器，旨在重新让站点创建变得有趣。\n​\tHugo 是一个通用的站点框架。从技术上讲，Hugo 是一个静态站点生成器。与每个访问者请求动态构建页面的系统不同，Hugo 在创建或更新内容时构建页面。由于站点被查看的频率远远高于它们被编辑的频率，因此 Hugo 的设计旨在为您站点的最终用户提供最佳的查看体验，为站点作者提供理想的编写体验。\n​\t使用 Hugo 构建的站点极快且安全。 Hugo 站点可以托管在任何地方，包括 Netlify， Heroku， GoDaddy， DreamHost， GitHub Pages， GitLab Pages， Surge， Firebase， Google Cloud Storage， Amazon S3， Rackspace， Azure 和 CloudFront ，并且可以很好地与 CDN 协作。 Hugo 站点无需数据库或依赖于昂贵的运行时，如 Ruby、Python 或 PHP。\n​\t我们认为 Hugo 是理想的站点创建工具，几乎可以在瞬间完成构建，并能够在进行更改时重新构建。\nHugo 有多快？ # Hugo 做了什么？ # ​\t在技术上，Hugo 接受一个源目录的文件和模板作为输入，并使用这些内容创建一个完整的站点。\n谁应该使用 Hugo？ # ​\tHugo 适用于更喜欢在文本编辑器中编写而不是在浏览器中的人。\n​\tHugo 适用于想要手动编写自己站点的人，而不必担心设置复杂的运行时、依赖项和数据库。\n​\tHugo 适用于构建博客、公司站点、组合站点、文档、单个着陆页或包含数千个页面的站点的人。\n"},{"id":23,"href":"/hugo/functions/_get/","title":".Get","section":"函数","content":"将以下英文翻译为中文：\n.Get # https://gohugo.io/functions/get/\n​\t访问简码声明中的位置参数和有序参数。\n语法 # .Get INDEX .Get KEY ​\t.Get 是在创建您自己的 简码模板 时专门用于访问传递给它的 位置和命名 参数。当与数字索引一起使用时，它查询位置参数（从 0 开始）。使用字符串键时，它查询命名参数。\n​\t当访问不存在的命名或位置参数时，.Get 返回一个空字符串而不是中断构建。这使您可以将 .Get 与 if、with、default 或 cond 链接在一起来检查参数是否存在。例如：\n{{ $quality := default \u0026#34;100\u0026#34; (.Get 1) }} 另请参阅 # Create Your Own Shortcodes Shortcode Variables Shortcodes "},{"id":24,"href":"/hugo/variables/shortcodevariables/","title":"简码变量","section":"变量","content":" Shortcode Variables- 简码变量 # https://gohugo.io/variables/shortcodes/\n​\t简码可以访问页面变量，并且有其自己的特定内置变量。\n​\t简码通过.Get访问简码声明中分隔的参数、页面级别和站点级别的变量，还可以访问以下简码特定字段：\n.Name # ​\t简码名称。\n.Ordinal # ​\t与其父简码相对位置的零基序数。如果父简码是页面本身，则该序数将表示页面内容中此简码的位置。\n.Page # ​\tThe owning ´Page`.\n​\t拥有此简码的页面。\n.Parent # ​\t为嵌套简码提供访问父简码上下文的能力。这对于从根继承常见简码参数非常有用。\n.Position # ​\tContains filename and position for the shortcode in a page. Note that this can be relatively expensive to calculate, and is meant for error reporting. See Error Handling in Shortcodes.\n​\t包含页面中此简码的文件名和位置。请注意，这可能是相对昂贵的计算，并且是用于错误报告的。请参见简码错误处理。\n.IsNamedParams # ​\t返回布尔值，当涉及的简码使用命名参数而不是位置参数时返回true。\n.Inner # ​\trepresents the content between the opening and closing shortcode tags when a closing shortcode is used\n​\t表示在使用关闭简码时开放和关闭简码标记之间的内容。\n.Scratch # ​\t返回一个可写的Scratch，以存储和操作将附加到此简码上下文的数据。此 Scratch 在服务器重新构建时会被重置。\n.InnerDeindent New in v0.100.0 # ​\t获取任何缩进已删除的.Inner。这是内置的\\{\\{\\\u0026lt; highlight \\\u0026gt;\\}\\}简码中使用的内容。\n另请参阅 # .Get 创建自己的简码 简码 "},{"id":25,"href":"/hugo/gettingstarted/directorystructure/","title":"目录结构","section":"开始入门","content":" Directory Structure - 目录结构 # https://gohugo.io/getting-started/directory-structure/\n​\tHugo的CLI脚手架会创建一个项目目录结构，然后使用该单个目录作为输入来创建一个完整的站点。\n新建站点脚手架 # ​\t从命令行运行hugo new site example会创建一个带有以下元素的目录结构：\nexample/ ├── archetypes/ │ └── default.md ├── assets/ ├── content/ ├── data/ ├── layouts/ ├── public/ ├── static/ ├── themes/ └── config.toml 目录结构说明 # ​\t以下是每个目录的高级概述，并提供了链接到Hugo文档中各自部分的链接。\narchetypes\n您可以使用hugo new命令在Hugo中创建新的内容文件。默认情况下，Hugo将创建带有date、title（从文件名推断）和draft = true的新内容文件。这节省了时间，并为使用多个内容类型的站点促进了一致性。您还可以创建自己的原型（archetypes），其中包含自定义的预配置前置元数据字段。\nassets\n存储需要由Hugo Pipes处理的所有文件。只有使用.Permalink或.RelPermalink的文件将被发布到public目录。\nconfig\nHugo带有大量的配置指令。config目录是存储这些指令的地方，以JSON、YAML或TOML文件的形式存储。每个根设置对象都可以作为自己的文件，并按环境结构化。设置最少且不需要环境感知的项目可以在其根目录使用单个config.toml文件。\n许多站点可能不需要任何配置，但Hugo提供了大量的配置指令，用于更精细的指导如何构建您的站点。注意：config目录不会默认创建。\ncontent\n您站点的所有内容都将位于此目录中。Hugo中的每个顶层文件夹都被视为内容章节。例如，如果您的站点有三个主要章节——博客（blog）、文章（articles）和教程（tutorials）——则在content/blog、content/articles和content/tutorials中将会有三个目录。Hugo使用章节来分配默认内容类型。\ndata\n此目录用于存储在生成站点时Hugo可以使用的配置文件。您可以按YAML、JSON或TOML格式编写这些文件。除了将这些文件添加到此文件夹中外，您还可以创建从动态内容中提取的数据模板。\nlayouts\n存储模板，以.html文件的形式指定如何将您的内容视图渲染为静态站点。模板包括列表页面、主页、分类法模板、局部、单页模板等。\nstatic\n存储所有的静态内容：图片、CSS、JavaScript等。当Hugo构建您的站点时，static目录内的所有资源都将按原样复制。一个使用static目录的好例子是在Google Search Console上验证站点所有权，您希望Hugo复制完整的HTML文件而不修改其内容。\n​\t从 Hugo 0.31 版本开始，您可以有多个静态目录。\nresources\n缓存一些文件以加速生成。也可以由模板作者用于分发已构建的 Sass 文件，这样您就不必安装预处理器。注意：默认情况下不会创建resources 目录。\n另请参阅 # 配置模块 主题组件 使用 Hugo 模块 静态文件 评论 "},{"id":26,"href":"/hugo/contentmanagement/contentformats/","title":"内容格式","section":"内容管理","content":" Content Formats - 内容格式 # https://gohugo.io/content-management/formats/\n​\tHugo支持HTML和Markdown这两种内容格式。\n​\t您可以将任何文件类型放入您的 /content 目录下，但Hugo会使用 前置元数据 中的 markup 值（如果设置了）或文件扩展名（见下表中的 Markup identifiers）来确定是否需要处理标记语言，例如：\nMarkdown 转换为 HTML 处理 Shortcodes 应用布局 内容格式列表 # ​\tHugo当前支持的内容格式如下：\nName Markup identifiers 备注 Goldmark md, markdown, goldmark 注意您可以将 md 和 markdown 的默认处理器设置为其他内容，请参见配置标记。 Emacs Org-Mode org 参见 go-org. AsciiDoc asciidocext, adoc, ad 需要安装 Asciidoctor。 RST rst 需要安装 RST 。 Pandoc pandoc, pdc 需要安装 Pandoc 。 HTML html, htm 要将其视为内容文件（包括布局、shortcodes等），它必须有前置元数据。否则，它将被原样复制。 ​\tmarkup identifier可以从前置元数据中的markup变量或文件扩展名中获取。有关标记语言相关的配置，请参见配置标记。\n外部助手 # ​\t上表中的某些格式需要在您的计算机上安装外部助手。例如，对于 AsciiDoc 文件，Hugo 将尝试调用 asciidoctor 命令。这意味着您需要在您的计算机上安装相应的工具才能使用这些格式。\n​\t默认情况下，Hugo会将合理的默认参数传递给这些外部助手：\nasciidoctor: --no-header-footer - rst2html: --leave-comments --initial-header-level=2 pandoc: --mathjax ​\t由于其他格式是外部命令，生成性能将严重依赖于您正在使用的外部工具的性能。由于此功能仍处于初期阶段，因此欢迎提供反馈。\nAsciiDoc 外部助手 # ​\tAsciiDoc实现于 2020 年 1 月结束生命周期并不再得到支持。AsciiDoc 的开发正在 Asciidoctor 下继续进行。当然，AsciiDoc 格式仍然存在。但请继续使用 Asciidoctor 实现。\nAsciidoctor 外部助手 # ​\tAsciidoctor 社区提供了一系列针对 AsciiDoc 格式的工具，可以额外安装到 Hugo 中。请参阅 Asciidoctor 文档以获取安装说明。如果需要，请确保还安装了所有可选扩展，例如 asciidoctor-diagram 或 asciidoctor-html5s。\n​\t外部 asciidoctor 命令要求 Hugo 将渲染内容写入磁盘的特定目标目录。必须使用命令选项 --destination 运行 Hugo。\n​\t一些 Asciidoctor参数可以在 Hugo 中自定义：\n参数 备注 backend 除非您知道自己在做什么，否则不要更改此参数。 doctype 目前，Hugo仅支持article类型的文档。 extensions 可用的扩展包括 asciidoctor-html5s, asciidoctor-bibtex, asciidoctor-diagram, asciidoctor-interdoc-reftext, asciidoctor-katex, asciidoctor-latex, asciidoctor-mathematical, asciidoctor-question, asciidoctor-rouge. attributes 用于在AsciiDoc文件中引用的变量。这是一个变量名称/值映射列表。参见Asciidoctor的属性。 noHeaderOrFooter 输出一个可嵌入的文档，不包括标题、页脚和文档正文之外的内容。除非您知道自己在做什么，否则不要更改此参数。 safeMode 安全模式级别unsafe、safe、server或secure。除非您知道自己在做什么，否则不要更改此参数。 sectionNumbers 自动为章节标题编号。 verbose 详细打印处理信息和配置文件检查到stderr。 trace 在错误信息中包含回溯信息。 failureLevel 触发非零退出码（失败）的最小日志记录级别。 ​\tHugo提供了一些额外的设置，这些设置不能直接映射到Asciidoctor的CLI选项中：\nworkingFolderCurrent\n将工作目录设置为正在处理的AsciiDoc文件的目录，以便include可以使用相对路径。此设置使用asciidoctor cli参数--base-dir和attribute outdir=. 若要使用asciidoctor-diagram渲染图表，必须将workingFolderCurrent设置为true。\npreserveTOC\n默认情况下，Hugo会删除Asciidoctor生成的目录，并通过内置变量.TableOfContents提供它，以便进行进一步的自定义并更好地与各种Hugo主题集成。可以将此选项设置为true以保留Asciidoctor的目录。\n​\t以下是所有与AsciiDoc相关的设置及其默认值：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml markup: asciidocExt: attributes: {} backend: html5 extensions: [] failureLevel: fatal noHeaderOrFooter: true preserveTOC: false safeMode: unsafe sectionNumbers: false trace: false verbose: false workingFolderCurrent: false ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [markup] [markup.asciidocExt] backend = 'html5' extensions = [] failureLevel = 'fatal' noHeaderOrFooter = true preserveTOC = false safeMode = 'unsafe' sectionNumbers = false trace = false verbose = false workingFolderCurrent = false [markup.asciidocExt.attributes] ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;markup\u0026quot;: { \u0026quot;asciidocExt\u0026quot;: { \u0026quot;attributes\u0026quot;: {}, \u0026quot;backend\u0026quot;: \u0026quot;html5\u0026quot;, \u0026quot;extensions\u0026quot;: [], \u0026quot;failureLevel\u0026quot;: \u0026quot;fatal\u0026quot;, \u0026quot;noHeaderOrFooter\u0026quot;: true, \u0026quot;preserveTOC\u0026quot;: false, \u0026quot;safeMode\u0026quot;: \u0026quot;unsafe\u0026quot;, \u0026quot;sectionNumbers\u0026quot;: false, \u0026quot;trace\u0026quot;: false, \u0026quot;verbose\u0026quot;: false, \u0026quot;workingFolderCurrent\u0026quot;: false } } } ``` ​\t请注意，出于安全考虑，只允许没有路径分隔符（\\、/或.）的扩展名。这意味着只有在Ruby的$LOAD_PATH中（即，扩展名很可能是由用户安装的），扩展名才能被调用。任何相对于站点路径声明的扩展名都将不被接受。\nExample of how to set extensions and attributes:\n​\t设置扩展名和属性的示例：\n[markup.asciidocExt] extensions = [\u0026#34;asciidoctor-html5s\u0026#34;, \u0026#34;asciidoctor-diagram\u0026#34;] workingFolderCurrent = true [markup.asciidocExt.attributes] my-base-url = \u0026#34;https://example.com/\u0026#34; my-attribute-name = \u0026#34;my value\u0026#34; ​\t在复杂的 Asciidoctor 环境中，有时候调试带有所有参数的外部助手的确切调用是很有帮助的。使用 -v 选项运行 Hugo。您将得到如下输出：\nINFO 2019/12/22 09:08:48 Rendering book-as-pdf.adoc with C:\\Ruby26-x64\\bin\\asciidoctor.bat using asciidoc args [--no-header-footer -r asciidoctor-html5s -b html5s -r asciidoctor-diagram --base-dir D:\\prototypes\\hugo_asciidoc_ddd\\docs -a outdir=D:\\prototypes\\hugo_asciidoc_ddd\\build -] ... 学习Markdown # ​\tMarkdown 语法简单易学，只需花费一个短暂的时间就能掌握。以下资源是很好的起步指南：\nDaring Fireball: Markdown, John Gruber (Creator of Markdown) Markdown Cheatsheet, Adam Pritchard Markdown Tutorial (Interactive), Garen Torikian The Markdown Guide, Matt Cone 另请参阅 # .RenderString Markdown渲染钩子 Shortcodes anchorize markdownify "},{"id":27,"href":"/hugo/hugomodules/themecomponents/","title":"主题组件","section":"Hugo模块","content":" Theme Components - 主题组件 # https://gohugo.io/hugo-modules/theme-components/\n​\tHugo 提供了主题组件的高级主题支持。\n​\t本部分包含的信息可能已过时，并正在重写过程中。\n​\t从 Hugo 0.42 版本开始，项目可以将主题配置为所需的多个主题组件的组合：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml theme: - my-shortcodes - base-theme - hyde ``` === \u0026ldquo;toml\u0026rdquo;\n```toml theme = ['my-shortcodes', 'base-theme', 'hyde'] ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;theme\u0026quot;: [ \u0026quot;my-shortcodes\u0026quot;, \u0026quot;base-theme\u0026quot;, \u0026quot;hyde\u0026quot; ] } ``` ​\t甚至可以嵌套使用，主题组件本身可以在其 own config.toml 中包含主题组件 (主题继承)。1\n​\t上述 config.toml 中的主题定义示例创建了一个具有从左到右优先级的三个主题组件的主题。\n​\t对于任何给定的文件、数据条目等，Hugo 将首先查找项目，然后查找 my-shortcodes、base-theme，最后是 hyde。\n​\tHugo 使用两种不同的算法来合并文件系统，具体取决于文件类型：\n对于 i18n 和data文件，Hugo 使用文件内部的翻译 ID 和数据键进行深度合并。 对于static文件、layouts (templates) 和archetypes文件，这些文件在文件级别上进行合并。所以最左边的文件将被选中。 ​\t上面的theme定义中使用的名称必须与 /your-site/themes 中的一个文件夹相匹配，例如 /your-site/themes/my-shortcodes。计划改进此功能，并获取 URL 方案，以便可以自动解析。\n​\t还要注意，作为主题的组件可以有自己的配置文件，例如 config.toml。目前，主题组件可以配置的内容存在一些限制：\nparams (global and per language) menu (global and per language) outputformats and mediatypes ​\t这里也适用相同的规则：具有相同 ID 的最左边的 param/menu 等将获胜。上述内容中还存在一些隐藏的实验性命名空间支持，我们将在未来努力改进，但鼓励主题作者创建自己的命名空间，以避免命名冲突。\n对于托管在 Hugo Themes Showcase中的主题组件，需要将组件添加为 git 子模块，指向目录 exampleSite/themes。 ↩︎ 另请参阅 # 配置模块 使用 Hugo 模块 目录结构 静态文件 将您的 Hugo 主题添加到展示中 "},{"id":28,"href":"/hugo/templ/customoutputformats/","title":"自定义输出格式","section":"模板","content":" Custom Output Formats - 自定义输出格式 # https://gohugo.io/templates/output-formats/\n​\tHugo可以将内容输出为多种格式，包括日历事件、电子书格式、Google AMP和JSON搜索索引，或任何自定义文本格式。\n​\t本页介绍了如何正确配置站点的媒体类型和输出格式，以及如何为自定义输出创建模板。\n媒体类型 # ​\t媒体类型（也称为MIME类型和内容类型）是用于在互联网上传输文件格式和格式内容的两部分标识符。\n​\t这是Hugo中的完整内置媒体类型集：\ntype suffixes application/json [json] application/manifest+json [webmanifest] application/octet-stream [] application/pdf [pdf] application/rss+xml [xml rss] application/toml [toml] application/xml [xml] application/yaml [yaml yml] font/otf [otf] font/ttf [ttf] image/bmp [bmp] image/gif [gif] image/jpeg [jpg jpeg jpe jif jfif] image/png [png] image/svg+xml [svg] image/webp [webp] text/calendar [ics] text/css [css] text/csv [csv] text/html [html] text/javascript [js jsm mjs] text/jsx [jsx] text/markdown [md markdown] text/plain [txt] text/tsx [tsx] text/typescript [ts] text/x-sass [sass] text/x-scss [scss] video/3gpp [3gpp 3gp] video/mp4 [mp4] video/mpeg [mpg mpeg] video/ogg [ogv] video/webm [webm] video/x-msvideo [avi] 注意：\n可以添加自定义媒体类型或更改默认值；例如，如果您想将text/html的后缀更改为asp。 Suffixes是在Hugo中用于该媒体类型的URL和文件名的值。 Type是定义新/自定义Output Formats时必须使用的标识符（见下文）。 完整的媒体类型集将在Hugo的内置开发服务器中注册，以确保它们被浏览器识别。 ​\t要添加或修改媒体类型，请在站点配置中的mediaTypes部分中定义它，可以为所有站点或特定语言定义。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml mediaTypes: text/enriched: suffixes: - enr text/html: suffixes: - asp ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [mediaTypes] [mediaTypes.'text/enriched'] suffixes = ['enr'] [mediaTypes.'text/html'] suffixes = ['asp'] ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;mediaTypes\u0026quot;: { \u0026quot;text/enriched\u0026quot;: { \u0026quot;suffixes\u0026quot;: [ \u0026quot;enr\u0026quot; ] }, \u0026quot;text/html\u0026quot;: { \u0026quot;suffixes\u0026quot;: [ \u0026quot;asp\u0026quot; ] } } } ``` ​\t上面的示例添加了一个新的媒体类型text/enriched，并更改了内置的text/html媒体类型的后缀。\n注意：这些媒体类型是针对您的输出格式进行配置的。如果要重新定义Hugo的默认输出格式（例如HTML），还需要重新定义媒体类型。因此，如果要将HTML输出格式的后缀从html（默认）更改为htm：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml mediaTypes: text/html: suffixes: - htm outputFormats: HTML: mediaType: text/html ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [mediaTypes] [mediaTypes.'text/html'] suffixes = ['htm'] [outputFormats] [outputFormats.HTML] mediaType = 'text/html' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;mediaTypes\u0026quot;: { \u0026quot;text/html\u0026quot;: { \u0026quot;suffixes\u0026quot;: [ \u0026quot;htm\u0026quot; ] } }, \u0026quot;outputFormats\u0026quot;: { \u0026quot;HTML\u0026quot;: { \u0026quot;mediaType\u0026quot;: \u0026quot;text/html\u0026quot; } } } ``` 注意，要让上述内容生效，您还需要在站点配置中添加 outputs 定义。\n输出格式定义 # ​\t给定一个媒体类型和一些其他配置，您可以获得一个输出格式。\n​\t这是Hugo的所有内置输出格式：\nname mediaType path baseName rel protocol isPlainText isHTML noUgly permalinkable HTML text/html index canonical false true false true AMP text/html amp index amphtml false true false true CSS text/css styles stylesheet true false false false CSV text/csv index alternate true false false false Calendar text/calendar index alternate webcal:// true false false false JSON application/json index alternate true false false false MARKDOWN text/markdown index alternate true false false false ROBOTS text/plain robots alternate true false false false RSS application/rss+xml index alternate false false true false Sitemap application/xml sitemap sitemap false false true false WebAppManifest application/manifest+json manifest manifest true false false false 一个页面可以按您想要的多种输出格式输出，只要它们在文件系统上解析为唯一路径即可定义无限数量的输出格式。在上面的表格中，最好的例子是AMP vs HTML。AMP的Path值为amp，因此不会覆盖HTML版本。例如，我们现在可以同时拥有 /index.html 和 /amp/index.html。 MediaType 必须匹配已定义媒体类型的Type。 您可以定义新的输出格式或重新定义内置的输出格式；例如，如果您想将AMP页面放在不同的路径中。 ​\t要添加或修改输出格式，请在站点配置文件中的 outputFormats 部分中定义它，无论是为所有站点还是为给定的语言。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml outputFormats: MyEnrichedFormat: baseName: myindex isPlainText: true mediaType: text/enriched protocol: bep:// ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [outputFormats] [outputFormats.MyEnrichedFormat] baseName = 'myindex' isPlainText = true mediaType = 'text/enriched' protocol = 'bep://' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;outputFormats\u0026quot;: { \u0026quot;MyEnrichedFormat\u0026quot;: { \u0026quot;baseName\u0026quot;: \u0026quot;myindex\u0026quot;, \u0026quot;isPlainText\u0026quot;: true, \u0026quot;mediaType\u0026quot;: \u0026quot;text/enriched\u0026quot;, \u0026quot;protocol\u0026quot;: \u0026quot;bep://\u0026quot; } } } ``` ​\t上述示例是虚构的，但如果用于具有 baseURL https://example.org 的站点的主页，它将产生一个具有 URL bep://example.org/myindex.enr 的纯文本主页。\n配置输出格式 # ​\t以下是输出格式的完整配置选项列表及其默认值：\nname\n输出格式标识符。用于定义您页面的输出格式。\nmediaType\n这必须与已定义的媒体类型的Type匹配。\npath\n保存输出文件的子路径。\nbaseName\n用于列表文件名（主页等）的基本文件名。默认值：index。\nrel\n可用于在link标记中创建 rel 值。默认值：alternate。\nprotocol\n将替换 baseURL 中此输出格式的\u0026quot;http://\u0026ldquo;或\u0026quot;https://\u0026quot;。\nisPlainText\n使用 Go 的纯文本模板解析器进行模板解析。默认值： false。\nisHTML\n仅在与 HTML 类型格式相关的情况下使用，例如页面别名。默认值： false。\nnoUgly\n用于关闭丑陋的 URL（如果在站点中设置了 uglyURLs为 true）。默认值： false。\nnotAlternative\nenable if it doesn’t make sense to include this format in an AlternativeOutputFormats format listing on Page (e.g., with CSS). Note that we use the term alternative and not alternate here, as it does not necessarily replace the other format. Default: false.\n如果在Page的 AlternativeOutputFormats 格式列表中包含此格式不合理（例如使用 CSS），则启用此选项。请注意，此处我们使用 alternative 而不是 alternate 一词，因为它并不一定替代其他格式。默认值： false。\npermalinkable\n使 .Permalink 和 .RelPermalink 返回渲染输出格式而不是主格式（见下文）。默认情况下，对于 HTML 和 AMP 启用此选项。默认值： false。\nweight\n将其设置为非零值将用作第一个排序标准。\n页面的输出格式 # ​\t在 Hugo 中，Page可以在文件系统上呈现为多种输出格式。\n默认输出格式 # ​\t每个Page都有一个 Kind 属性，其默认输出格式是基于此属性设置的。\nKind Default Output Formats page HTML home HTML, RSS section HTML, RSS taxonomy HTML, RSS term HTML, RSS 自定义输出格式 # ​\t这可以通过在Page前置元数据或站点配置（对所有站点或每种语言）中定义一个outputs列表来更改。\n​\t站点配置文件中的示例：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml outputs: home: - HTML - AMP - RSS page: - HTML ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [outputs] home = ['HTML', 'AMP', 'RSS'] page = ['HTML'] ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;outputs\u0026quot;: { \u0026quot;home\u0026quot;: [ \u0026quot;HTML\u0026quot;, \u0026quot;AMP\u0026quot;, \u0026quot;RSS\u0026quot; ], \u0026quot;page\u0026quot;: [ \u0026quot;HTML\u0026quot; ] } } ``` 请注意，在上面的示例中，section、taxonomy和term的输出格式将保持其默认值 [\u0026quot;HTML\u0026quot;, \u0026quot;RSS\u0026quot;]。\nKind Description Example home The landing page for the home page /index.html page The landing page for a given page my-post page (/posts/my-post/index.html) section The landing page of a given section posts section (/posts/index.html) taxonomy The landing page for a taxonomy tags taxonomy (/tags/index.html) term The landing page for one taxonomy’s term term awesome in tags taxonomy (/tags/awesome/index.html) outputs 定义是每种Page的 Kind（page、home、section、taxonomy 或 term）的。\nThese can be overridden per Page in the front matter of content files.\n所使用的名称（例如 HTML、AMP）必须与已定义的输出格式的Name匹配。\n这些名称不区分大小写。\n这些可以在内容文件的前置元数据中针对每个Page进行覆盖。\n​\t以下是一个在内容文件中定义呈现Page输出格式的前置元数据的示例：\ncontent/example.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- outputs: - html - amp - json title: Example --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ outputs = ['html', 'amp', 'json'] title = 'Example' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;outputs\u0026quot;: [ \u0026quot;html\u0026quot;, \u0026quot;amp\u0026quot;, \u0026quot;json\u0026quot; ], \u0026quot;title\u0026quot;: \u0026quot;Example\u0026quot; } ``` 输出格式列表 # ​\t每个Page都有 .OutputFormats（所有格式，包括当前格式）和 .AlternativeOutputFormats 变量，后者可用于在站点的 \u0026lt;head\u0026gt; 中创建link rel 列表。\n{{ range .AlternativeOutputFormats -}} \u0026lt;link rel=\u0026#34;{{ .Rel }}\u0026#34; type=\u0026#34;{{ .MediaType.Type }}\u0026#34; href=\u0026#34;{{ .Permalink | safeURL }}\u0026#34;\u0026gt; {{ end -}} 输出格式链接 # ​\tPage 上的 .Permalink 和 .RelPermalink 将返回为该页面定义的第一个输出格式（通常为 HTML，如果没有其他定义的话）。这与调用它们的模板文件无关。\n来自 single.json.json：\n{{ .RelPermalink }} \u0026gt; /that-page/ {{ with .OutputFormats.Get \u0026#34;json\u0026#34; -}} {{ .RelPermalink }} \u0026gt; /that-page/index.json {{- end }} ​\t为了使它们返回当前模板文件的输出格式，给定的输出格式应设置其 permalinkable 属性为 true。\n与上面相同的模板文件，带有json 输出格式的 permalinkable 设置为 true：\n{{ .RelPermalink }} \u0026gt; /that-page/index.json {{ with .OutputFormats.Get \u0026#34;html\u0026#34; -}} {{ .RelPermalink }} \u0026gt; /that-page/ {{- end }} ​\t从内容文件中，您可以使用 ref 或 relref 简码：\n[Neat](\\{\\{\\\u0026lt; ref \u0026#34;blog/neat.md\u0026#34; \u0026#34;amp\u0026#34; \\\u0026gt;\\}\\}) [Who](\\{\\{\\\u0026lt; relref \u0026#34;about.md#who\u0026#34; \u0026#34;amp\u0026#34; \\\u0026gt;\\}\\}) 您的输出格式模板 # ​\t一个新的输出格式需要一个相应的模板才能渲染任何有用的内容。\n​\t对于 Hugo 0.20 及更高版本的关键区别在于，Hugo 查看输出格式的 Name 和 MediaType 的 Suffixes，以选择用于渲染给定 Page 的模板。\n​\t以下表格显示了不同输出格式的示例、所使用的后缀以及 Hugo 的模板查找顺序。表格中的所有示例都可以：\n使用基础模板。 包含局部模板。 Example OutputFormat Suffix Template Lookup Order \u0026ldquo;posts\u0026rdquo; 章节的单个页面 HTML html [layouts/posts/single.html.html layouts/posts/single.html layouts/_default/single.html.html layouts/_default/single.html] \u0026ldquo;posts\u0026rdquo; 章节的单个页面基础模板 HTML html [layouts/posts/single-baseof.html.html layouts/posts/baseof.html.html layouts/posts/single-baseof.html layouts/posts/baseof.html layouts/_default/single-baseof.html.html layouts/_default/baseof.html.html layouts/_default/single-baseof.html layouts/_default/baseof.html] Single page in \u0026ldquo;posts\u0026rdquo; section with layout set HTML html [layouts/posts/demolayout.html.html layouts/posts/single.html.html layouts/posts/demolayout.html layouts/posts/single.html layouts/_default/demolayout.html.html layouts/_default/single.html.html layouts/_default/demolayout.html layouts/_default/single.html] Base template for single page in \u0026ldquo;posts\u0026rdquo; section with layout set HTML html [layouts/posts/demolayout-baseof.html.html layouts/posts/single-baseof.html.html layouts/posts/baseof.html.html layouts/posts/demolayout-baseof.html layouts/posts/single-baseof.html layouts/posts/baseof.html layouts/_default/demolayout-baseof.html.html layouts/_default/single-baseof.html.html layouts/_default/baseof.html.html layouts/_default/demolayout-baseof.html layouts/_default/single-baseof.html layouts/_default/baseof.html] AMP single page AMP html [layouts/posts/single.amp.html layouts/posts/single.html layouts/_default/single.amp.html layouts/_default/single.html] AMP single page, French language AMP html [layouts/posts/single.fr.amp.html layouts/posts/single.amp.html layouts/posts/single.fr.html layouts/posts/single.html layouts/_default/single.fr.amp.html layouts/_default/single.amp.html layouts/_default/single.fr.html layouts/_default/single.html] Home page HTML html [layouts/index.html.html layouts/home.html.html layouts/list.html.html layouts/index.html layouts/home.html layouts/list.html layouts/_default/index.html.html layouts/_default/home.html.html layouts/_default/list.html.html layouts/_default/index.html layouts/_default/home.html layouts/_default/list.html] Base template for home page HTML html [layouts/index-baseof.html.html layouts/home-baseof.html.html layouts/list-baseof.html.html layouts/baseof.html.html layouts/index-baseof.html layouts/home-baseof.html layouts/list-baseof.html layouts/baseof.html layouts/_default/index-baseof.html.html layouts/_default/home-baseof.html.html layouts/_default/list-baseof.html.html layouts/_default/baseof.html.html layouts/_default/index-baseof.html layouts/_default/home-baseof.html layouts/_default/list-baseof.html layouts/_default/baseof.html] Home page with type set HTML html [layouts/demotype/index.html.html layouts/demotype/home.html.html layouts/demotype/list.html.html layouts/demotype/index.html layouts/demotype/home.html layouts/demotype/list.html layouts/index.html.html layouts/home.html.html layouts/list.html.html layouts/index.html layouts/home.html layouts/list.html layouts/_default/index.html.html layouts/_default/home.html.html layouts/_default/list.html.html layouts/_default/index.html layouts/_default/home.html layouts/_default/list.html] Base template for home page with type set HTML html [layouts/demotype/index-baseof.html.html layouts/demotype/home-baseof.html.html layouts/demotype/list-baseof.html.html layouts/demotype/baseof.html.html layouts/demotype/index-baseof.html layouts/demotype/home-baseof.html layouts/demotype/list-baseof.html layouts/demotype/baseof.html layouts/index-baseof.html.html layouts/home-baseof.html.html layouts/list-baseof.html.html layouts/baseof.html.html layouts/index-baseof.html layouts/home-baseof.html layouts/list-baseof.html layouts/baseof.html layouts/_default/index-baseof.html.html layouts/_default/home-baseof.html.html layouts/_default/list-baseof.html.html layouts/_default/baseof.html.html layouts/_default/index-baseof.html layouts/_default/home-baseof.html layouts/_default/list-baseof.html layouts/_default/baseof.html] Home page with layout set HTML html [layouts/demolayout.html.html layouts/index.html.html layouts/home.html.html layouts/list.html.html layouts/demolayout.html layouts/index.html layouts/home.html layouts/list.html layouts/_default/demolayout.html.html layouts/_default/index.html.html layouts/_default/home.html.html layouts/_default/list.html.html layouts/_default/demolayout.html layouts/_default/index.html layouts/_default/home.html layouts/_default/list.html] AMP home, French language AMP html [layouts/index.fr.amp.html layouts/home.fr.amp.html layouts/list.fr.amp.html layouts/index.amp.html layouts/home.amp.html layouts/list.amp.html layouts/index.fr.html layouts/home.fr.html layouts/list.fr.html layouts/index.html layouts/home.html layouts/list.html layouts/_default/index.fr.amp.html layouts/_default/home.fr.amp.html layouts/_default/list.fr.amp.html layouts/_default/index.amp.html layouts/_default/home.amp.html layouts/_default/list.amp.html layouts/_default/index.fr.html layouts/_default/home.fr.html layouts/_default/list.fr.html layouts/_default/index.html layouts/_default/home.html layouts/_default/list.html] JSON home JSON json [layouts/index.json.json layouts/home.json.json layouts/list.json.json layouts/index.json layouts/home.json layouts/list.json layouts/_default/index.json.json layouts/_default/home.json.json layouts/_default/list.json.json layouts/_default/index.json layouts/_default/home.json layouts/_default/list.json] RSS home RSS xml [layouts/index.rss.xml layouts/home.rss.xml layouts/rss.xml layouts/list.rss.xml layouts/index.xml layouts/home.xml layouts/list.xml layouts/_default/index.rss.xml layouts/_default/home.rss.xml layouts/_default/rss.xml layouts/_default/list.rss.xml layouts/_default/index.xml layouts/_default/home.xml layouts/_default/list.xml layouts/_internal/_default/rss.xml] RSS section posts RSS xml [layouts/posts/section.rss.xml layouts/posts/rss.xml layouts/posts/list.rss.xml layouts/posts/section.xml layouts/posts/list.xml layouts/section/section.rss.xml layouts/section/rss.xml layouts/section/list.rss.xml layouts/section/section.xml layouts/section/list.xml layouts/_default/section.rss.xml layouts/_default/rss.xml layouts/_default/list.rss.xml layouts/_default/section.xml layouts/_default/list.xml layouts/_internal/_default/rss.xml] Taxonomy in categories RSS xml [layouts/categories/category.terms.rss.xml layouts/categories/terms.rss.xml layouts/categories/taxonomy.rss.xml layouts/categories/rss.xml layouts/categories/list.rss.xml layouts/categories/category.terms.xml layouts/categories/terms.xml layouts/categories/taxonomy.xml layouts/categories/list.xml layouts/category/category.terms.rss.xml layouts/category/terms.rss.xml layouts/category/taxonomy.rss.xml layouts/category/rss.xml layouts/category/list.rss.xml layouts/category/category.terms.xml layouts/category/terms.xml layouts/category/taxonomy.xml layouts/category/list.xml layouts/taxonomy/category.terms.rss.xml layouts/taxonomy/terms.rss.xml layouts/taxonomy/taxonomy.rss.xml layouts/taxonomy/rss.xml layouts/taxonomy/list.rss.xml layouts/taxonomy/category.terms.xml layouts/taxonomy/terms.xml layouts/taxonomy/taxonomy.xml layouts/taxonomy/list.xml layouts/_default/category.terms.rss.xml layouts/_default/terms.rss.xml layouts/_default/taxonomy.rss.xml layouts/_default/rss.xml layouts/_default/list.rss.xml layouts/_default/category.terms.xml layouts/_default/terms.xml layouts/_default/taxonomy.xml layouts/_default/list.xml layouts/_internal/_default/rss.xml] Term in categories RSS xml [layouts/categories/term.rss.xml layouts/categories/category.rss.xml layouts/categories/taxonomy.rss.xml layouts/categories/rss.xml layouts/categories/list.rss.xml layouts/categories/term.xml layouts/categories/category.xml layouts/categories/taxonomy.xml layouts/categories/list.xml layouts/term/term.rss.xml layouts/term/category.rss.xml layouts/term/taxonomy.rss.xml layouts/term/rss.xml layouts/term/list.rss.xml layouts/term/term.xml layouts/term/category.xml layouts/term/taxonomy.xml layouts/term/list.xml layouts/taxonomy/term.rss.xml layouts/taxonomy/category.rss.xml layouts/taxonomy/taxonomy.rss.xml layouts/taxonomy/rss.xml layouts/taxonomy/list.rss.xml layouts/taxonomy/term.xml layouts/taxonomy/category.xml layouts/taxonomy/taxonomy.xml layouts/taxonomy/list.xml layouts/category/term.rss.xml layouts/category/category.rss.xml layouts/category/taxonomy.rss.xml layouts/category/rss.xml layouts/category/list.rss.xml layouts/category/term.xml layouts/category/category.xml layouts/category/taxonomy.xml layouts/category/list.xml layouts/_default/term.rss.xml layouts/_default/category.rss.xml layouts/_default/taxonomy.rss.xml layouts/_default/rss.xml layouts/_default/list.rss.xml layouts/_default/term.xml layouts/_default/category.xml layouts/_default/taxonomy.xml layouts/_default/list.xml layouts/_internal/_default/rss.xml] Section list for \u0026ldquo;posts\u0026rdquo; section HTML html [layouts/posts/posts.html.html layouts/posts/section.html.html layouts/posts/list.html.html layouts/posts/posts.html layouts/posts/section.html layouts/posts/list.html layouts/section/posts.html.html layouts/section/section.html.html layouts/section/list.html.html layouts/section/posts.html layouts/section/section.html layouts/section/list.html layouts/_default/posts.html.html layouts/_default/section.html.html layouts/_default/list.html.html layouts/_default/posts.html layouts/_default/section.html layouts/_default/list.html] Section list for \u0026ldquo;posts\u0026rdquo; section with type set to \u0026ldquo;blog\u0026rdquo; HTML html [layouts/blog/posts.html.html layouts/blog/section.html.html layouts/blog/list.html.html layouts/blog/posts.html layouts/blog/section.html layouts/blog/list.html layouts/posts/posts.html.html layouts/posts/section.html.html layouts/posts/list.html.html layouts/posts/posts.html layouts/posts/section.html layouts/posts/list.html layouts/section/posts.html.html layouts/section/section.html.html layouts/section/list.html.html layouts/section/posts.html layouts/section/section.html layouts/section/list.html layouts/_default/posts.html.html layouts/_default/section.html.html layouts/_default/list.html.html layouts/_default/posts.html layouts/_default/section.html layouts/_default/list.html] Section list for \u0026ldquo;posts\u0026rdquo; section with layout set to \u0026ldquo;demoLayout\u0026rdquo; HTML html [layouts/posts/demolayout.html.html layouts/posts/posts.html.html layouts/posts/section.html.html layouts/posts/list.html.html layouts/posts/demolayout.html layouts/posts/posts.html layouts/posts/section.html layouts/posts/list.html layouts/section/demolayout.html.html layouts/section/posts.html.html layouts/section/section.html.html layouts/section/list.html.html layouts/section/demolayout.html layouts/section/posts.html layouts/section/section.html layouts/section/list.html layouts/_default/demolayout.html.html layouts/_default/posts.html.html layouts/_default/section.html.html layouts/_default/list.html.html layouts/_default/demolayout.html layouts/_default/posts.html layouts/_default/section.html layouts/_default/list.html] Taxonomy list in categories HTML html [layouts/categories/category.terms.html.html layouts/categories/terms.html.html layouts/categories/taxonomy.html.html layouts/categories/list.html.html layouts/categories/category.terms.html layouts/categories/terms.html layouts/categories/taxonomy.html layouts/categories/list.html layouts/category/category.terms.html.html layouts/category/terms.html.html layouts/category/taxonomy.html.html layouts/category/list.html.html layouts/category/category.terms.html layouts/category/terms.html layouts/category/taxonomy.html layouts/category/list.html layouts/taxonomy/category.terms.html.html layouts/taxonomy/terms.html.html layouts/taxonomy/taxonomy.html.html layouts/taxonomy/list.html.html layouts/taxonomy/category.terms.html layouts/taxonomy/terms.html layouts/taxonomy/taxonomy.html layouts/taxonomy/list.html layouts/_default/category.terms.html.html layouts/_default/terms.html.html layouts/_default/taxonomy.html.html layouts/_default/list.html.html layouts/_default/category.terms.html layouts/_default/terms.html layouts/_default/taxonomy.html layouts/_default/list.html] Taxonomy term in categories HTML html [layouts/categories/term.html.html layouts/categories/category.html.html layouts/categories/taxonomy.html.html layouts/categories/list.html.html layouts/categories/term.html layouts/categories/category.html layouts/categories/taxonomy.html layouts/categories/list.html layouts/term/term.html.html layouts/term/category.html.html layouts/term/taxonomy.html.html layouts/term/list.html.html layouts/term/term.html layouts/term/category.html layouts/term/taxonomy.html layouts/term/list.html layouts/taxonomy/term.html.html layouts/taxonomy/category.html.html layouts/taxonomy/taxonomy.html.html layouts/taxonomy/list.html.html layouts/taxonomy/term.html layouts/taxonomy/category.html layouts/taxonomy/taxonomy.html layouts/taxonomy/list.html layouts/category/term.html.html layouts/category/category.html.html layouts/category/taxonomy.html.html layouts/category/list.html.html layouts/category/term.html layouts/category/category.html layouts/category/taxonomy.html layouts/category/list.html layouts/_default/term.html.html layouts/_default/category.html.html layouts/_default/taxonomy.html.html layouts/_default/list.html.html layouts/_default/term.html layouts/_default/category.html layouts/_default/taxonomy.html layouts/_default/list.html] ​\tHugo 现在还可以检测 partials 的媒体类型和输出格式（如果可能的话），并使用这些信息来决定是否将 partial 解析为纯文本模板。\n​\tHugo将查找给定的名称，因此您可以根据需要随意命名它。但是，如果要将其视为纯文本，请使用文件后缀，如果需要，还要使用输出格式的名称。 模式如下：\n[partial name].[OutputFormat].[suffix] ​\t以下 partial 是一个纯文本模板（输出格式为 CSV，由于这是唯一带有后缀 csv 的输出格式，因此我们不需要包含输出格式的Name）：\n{{ partial \u0026#34;mytextpartial.csv\u0026#34; . }} 另请参阅 # Hugo中的内容列表 RSS模板 "},{"id":29,"href":"/hugo/installation/bsd/","title":"BSD","section":"安装Hugo","content":" BSD # https://gohugo.io/installation/bsd/\nInstall Hugo on BSD derivatives.\nEditions # Hugo is available in two editions: standard and extended. With the extended edition you can:\nEncode WebP images (you can decode WebP images with both editions) Transpile Sass to CSS using the embedded LibSass transpiler We recommend that you install the extended edition.\nPrerequisites # Although not required in all cases, Git and Go are often used when working with Hugo.\nGit is required to:\nUse the Hugo Modules feature Build Hugo from source Install a theme as a Git submodule Access commit information from a local Git repository Host your site with services such as AWS Amplify, CloudCannon, Cloudflare Pages, GitHub Pages, GitLab Pages, and Netlify. Go is required to:\nUse the Hugo Modules feature Build Hugo from source Please refer to the Git and Go documentation for installation instructions.\nPrebuilt binaries # Prebuilt binaries are available for a variety of operating systems and architectures. Visit the latest release page, and scroll down to the Assets section.\nDownload the archive for the desired edition, operating system, and architecture Extract the archive Move the executable to the desired directory Add this directory to the PATH environment variable Verify that you have execute permission on the file Please consult your operating system documentation if you need help setting file permissions or modifying your PATH environment variable.\nIf you do not see a prebuilt binary for the desired edition, operating system, and architecture, install Hugo using one of the methods described below.\nRepository packages # Most BSD derivatives maintain a repository for commonly installed applications. Please note that these repositories may not contain the latest release.\nDragonFly BSD # DragonFly BSD includes Hugo in its package repository. This will install the extended edition of Hugo:\nsudo pkg install gohugo FreeBSD # FreeBSD includes Hugo in its package repository. This will install the extended edition of Hugo:\nsudo pkg install gohugo NetBSD # NetBSD includes Hugo in its package repository. This will install the extended edition of Hugo:\nsudo pkgin install go-hugo OpenBSD # OpenBSD includes Hugo in its package repository. This will prompt you to select which edition of Hugo to install:\ndoas pkg_add hugo Build from source # To build Hugo from source you must:\nInstall Git Install Go version 1.18 or later Update your PATH environment variable as described in the Go documentation The install directory is controlled by the GOPATH and GOBIN environment variables. If GOBIN is set, binaries are installed to that directory. If GOPATH is set, binaries are installed to the bin subdirectory of the first directory in the GOPATH list. Otherwise, binaries are installed to the bin subdirectory of the default GOPATH ($HOME/go or %USERPROFILE%\\go).\nThen build and test:\ngo install -tags extended github.com/gohugoio/hugo@latest hugo version Comparison # Prebuilt binaries Repository packages Build from source Easy to install? ✔️ ✔️ ✔️ Easy to upgrade? ✔️ varies ✔️ Easy to downgrade? ✔️ varies ✔️ Automatic updates? ❌ varies ❌ Latest version available? ✔️ varies ✔️ 另请参阅 # Linux Windows macOS Host on 21YunBox Host on GitHub "},{"id":30,"href":"/hugo/abouthugo/hugofeatures/","title":"Hugo的特性","section":"关于Hugo","content":" Hugo Features - Hugo的特性 # https://gohugo.io/about/features/\nHugo boasts blistering speed, robust content management, and a powerful templating language making it a great fit for all kinds of static websites.\nHugo 拥有极快的构建速度、强大的内容管理和功能强大的模板语言，非常适合各种静态站点的开发。\n常规 # 极快的构建速度（每页小于1毫秒） 完全跨平台，易于在 macOS、Linux、Windows 等系统上安装 使用 LiveReload在开发过程中动态渲染更改 强大的主题支持 在任何地方托管您的站点 组织 # 为项目提供直观的组织结构，包括站点章节 可自定义的 URLs 支持可配置的分类法，包括类别和标签 通过强大的模板函数按您所需的方式排序内容 自动生成目录 动态菜单创建 支持美化 URL 支持永久链接模式 通过别名重定向 内容 # 本地支持 Markdown 和 Emacs Org-Mode，也支持其他语言的外部辅助程序（参见支持的格式） 在正文中支持 TOML、YAML 和 JSON 元数据 可自定义的首页 多种内容类型 自动生成和用户定义的内容摘要 通过简码在 Markdown 内部添加丰富的内容 \u0026ldquo;阅读所需时间\u0026ldquo;功能 \u0026ldquo;字数统计\u0026ldquo;功能 其他特性 # 集成 Disqus评论支持 集成 Google Analytics 支持 自动生成 RSS 支持 Go HTML 模板 使用 Chroma进行语法高亮 "},{"id":31,"href":"/hugo/hugomodules/","title":"Hugo模块","section":"文档","content":" Hugo Modules - Hugo 模块 # https://gohugo.io/hugo-modules/\n​\tHugo 模块是 Hugo 的核心构建块。一个模块可以是您的主项目或一个较小的模块，提供 Hugo 中定义的 7 种组件类型之一或多个组件类型：static， content， layouts，data， assets， i18n 和archetypes。\n​\t您可以以任何组合方式组合模块，甚至挂载来自非 Hugo 项目的目录，形成一个大的虚拟联合文件系统。\n​\tHugo 模块由 Go 模块驱动。有关 Go 模块的更多信息，请参见：\nhttps://github.com/golang/go/wiki/Modules https://go.dev/blog/using-go-modules ​\t这一切都是全新的，只有很少几个示例项目：\nhttps://github.com/bep/docuapi 是一个主题，已被移植到 Hugo 模块中进行测试。它是一个挂载到 Hugo 文件夹结构中的非 Hugo 项目的很好的例子。它甚至展示了在常规 Go 模板中实现 JS Bundler。 https://github.com/bep/my-modular-site 是一个非常简单的用于测试的站点。 "},{"id":32,"href":"/hugo/functions/_getpage/","title":".GetPage","section":"函数","content":"将以下英文翻译为中文：\n.GetPage # https://gohugo.io/functions/getpage/\n​\t获取给定 path 的 Page。\n语法 # .GetPage PATH ​\t.GetPage 返回给定 path 的页面。Site 和 Page 都实现了该方法。如果给定相对路径（即没有前导 / 的路径），Page 变量会尝试查找相对于当前页面的页面。\n注意： 在 Hugo 0.45 中我们重新设计和简化了 .GetPage API。在此之前，除了路径，您还需要提供一个 Kind 属性，例如 {{ .Site.GetPage \u0026quot;section\u0026quot; \u0026quot;blog\u0026quot; }}。这仍然可以工作，但是现在是多余的（superfluous）。\n{{ with .Site.GetPage \u0026#34;/blog\u0026#34; }}{{ .Title }}{{ end }} ​\t当找不到页面时，此方法将返回 nil，因此如果找不到blog章节，则上面的示例不会打印任何内容。\n​\t要在blog章节中查找一个常规页面：\n{{ with .Site.GetPage \u0026#34;/blog/my-post.md\u0026#34; }}{{ .Title }}{{ end }} ​\t由于 Page 还提供了一个 .GetPage 方法，因此上述示例与以下示例相同：\n{{ with .Site.GetPage \u0026#34;/blog\u0026#34; }} {{ with .GetPage \u0026#34;my-post.md\u0026#34; }}{{ .Title }}{{ end }} {{ end }} .GetPage 和多语言站点 # ​\t前面的示例使用了完整的内容文件名来查找帖子。根据您的内容组织方式（文件名中是否有语言代码，例如 my-post.en.md），您可能希望在没有扩展名的情况下进行查找。这将为您获取当前语言版本的页面：\n{{ with .Site.GetPage \u0026#34;/blog/my-post\u0026#34; }}{{ .Title }}{{ end }} .GetPage 示例 # ​\t此代码片段（以局部模板的形式）允许您执行以下操作：\n获取 tags 分类法的索引对象。 将该对象分配给变量 $t。 按受欢迎程度排序与分类法相关联的条目。 获取分类法中最受欢迎的两个条目（即分配给内容的两个最受欢迎的标签）。 grab-top-two-tags.html\n\u0026lt;ul class=\u0026#34;most-popular-tags\u0026#34;\u0026gt; {{ $t := .Site.GetPage \u0026#34;/tags\u0026#34; }} {{ range first 2 $t.Data.Terms.ByCount }} \u0026lt;li\u0026gt;{{ . }}\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; .GetPage 在页面bundle中 # ​\t如果通过 .GetPage 检索到的页面是Leaf Bundle，并且您需要获取其中的嵌套page资源，则需要使用 .Resources 中的方法，如Page Resources中所述。\n​\t有关示例，请参见Headless Bundle文档。\n另请参阅 # Content Sections Content Types Lists of Content in Hugo Menu Templates Pagination "},{"id":33,"href":"/hugo/templ/basetemplatesandblocks/","title":"基础模板和块","section":"模板","content":" Base Templates and Blocks - 基础模板和块 # https://gohugo.io/templates/base/\n​\t基本模板和块结构允许您定义主模板的外壳（即页面的Chrome）。\n​\tblock关键字允许您定义页面一个或多个主模板的外壳，然后根据需要填充或覆盖部分（portions ）。\n基础模板查找顺序 # ​\t基础模板查找顺序紧跟它所应用的模板的查找顺序（例如，_default/list.html）。\n​\t有关详细信息和示例，请参见模板查找顺序。\n定义基础模板 # ​\t以下定义了一个简单的基础模板 _default/baseof.html。作为默认模板，它是从所有页面渲染的外壳，除非您在查找顺序的开头指定另一个*baseof.html。\nlayouts/_default/baseof.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;{{ block \u0026#34;title\u0026#34; . }} \u0026lt;!-- Blocks may include default content. --\u0026gt; {{ .Site.Title }} {{ end }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- Code that all your templates share, like a header --\u0026gt; {{ block \u0026#34;main\u0026#34; . }} \u0026lt;!-- The part of the page that begins to differ between templates --\u0026gt; {{ end }} {{ block \u0026#34;footer\u0026#34; . }} \u0026lt;!-- More shared code, perhaps a footer but that can be overridden if need be in --\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 覆盖基础模板 # ​\t从上面的基本模板，您可以定义默认的列表模板。默认的列表模板将继承上面定义的所有代码，然后可以根据需要实现自己的\u0026quot;main\u0026quot;块：\nlayouts/_default/list.html\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;h1\u0026gt;Posts\u0026lt;/h1\u0026gt; {{ range .Pages }} \u0026lt;article\u0026gt; \u0026lt;h2\u0026gt;{{ .Title }}\u0026lt;/h2\u0026gt; {{ .Content }} \u0026lt;/article\u0026gt; {{ end }} {{ end }} ​\t这将用实际有用的内容替换我们（基本上为空的）\u0026quot;main\u0026quot;块的内容，对于列表中的内容，我们没有定义\u0026quot;title\u0026quot;块，因此在列表中保留了来自基础模板的内容。\n​\t放置在块定义之外的代码会破坏您的布局，这甚至包括HTML注释。例如：\n\u0026lt;!-- Seemingly harmless HTML comment..that will break your layout at build --\u0026gt; {{ define \u0026#34;main\u0026#34; }} ...your code here {{ end }} 请参见Hugo讨论论坛中的此主题。\n​\t以下显示了如何使用特定于默认单个页面模板的代码覆盖基础模板的\u0026quot;main\u0026quot;和\u0026quot;title\u0026quot;块区域：\nlayouts/_default/single.html\n{{ define \u0026#34;title\u0026#34; }} \u0026lt;!-- This will override the default value set in baseof.html; i.e., \u0026#34;{{ .Site.Title }}\u0026#34; in the original example--\u0026gt; {{ .Title }} \u0026amp;ndash; {{ .Site.Title }} {{ end }} {{ define \u0026#34;main\u0026#34; }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ end }} 另请参阅 # path.Base path.BaseName "},{"id":34,"href":"/hugo/gettingstarted/configuration/","title":"配置 Hugo","section":"开始入门","content":" Configure Hugo - 配置 Hugo # https://gohugo.io/getting-started/configuration/\n​\t如何配置您的 Hugo 站点。\n配置文件 # ​\tHugo 使用 config.toml、config.yaml 或 config.json（如果在站点根目录中找到）作为默认的站点配置文件。\n​\t用户可以使用命令行 --config 开关选择覆盖默认设置的一个或多个站点配置文件。\n例如：\nhugo --config debugconfig.toml hugo --config a.toml,b.toml,c.toml ​\t可以将多个站点配置文件指定为逗号分隔的字符串传递给 --config 开关。\nhugo.toml vs config.toml # ​\t在 Hugo 0.110.0 中，我们将默认的配置基础文件名更改为 hugo，例如 hugo.toml。我们仍会查找 config.toml 等文件，但我们建议您最终将其重命名（但如果您想支持旧版本的 Hugo，则需要等待）。我们这样做的主要原因是为了让代码编辑器和构建工具更容易识别这是 Hugo 的配置文件和项目。\nv0.110.0 新功能 配置目录 # ​\t除了使用单个站点配置文件外，您还可以使用 configDir 目录（默认为 config/）来维护更易于组织和特定于环境的设置。\n每个文件都代表一个配置根对象，例如 params.toml 代表 [Params]，menu(s).toml 代表 [Menu]，languages.toml 代表 [Languages] 等等… 每个文件的内容必须是顶级的，例如： config.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml Params: foo: bar ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [Params] foo = 'bar' ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;Params\u0026quot;: { \u0026quot;foo\u0026quot;: \u0026quot;bar\u0026quot; } } ``` params.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml foo: bar ``` === \u0026ldquo;toml\u0026rdquo;\n```toml foo = 'bar' ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;foo\u0026quot;: \u0026quot;bar\u0026quot; } ``` 每个目录保存了一组文件，包含特定环境的设置。 文件可以本地化，变成特定语言。 ├── config │ ├── _default │ │ ├── config.toml │ │ ├── languages.toml │ │ ├── menus.en.toml │ │ ├── menus.zh.toml │ │ └── params.toml │ ├── production │ │ ├── config.toml │ │ └── params.toml │ └── staging │ ├── config.toml │ └── params.toml ​\t考虑上述结构，在运行hugo --environment staging命令时，Hugo将使用config/_default中的所有设置，并在其上合并staging的设置。\n​\t让我们举个例子来更好地理解这个过程。假设您的站点使用Google Analytics。这要求您在config.toml中指定googleAnalytics = \u0026quot;G-XXXXXXXX\u0026quot;。现在考虑以下场景：\n您不希望在开发中加载分析代码，即在localhost上。 您想为生产和staging环境使用不同的googleAnalytics ID： 生产环境的G-PPPPPPPP staging环境的G-SSSSSSSS ​\t考虑上述情况，您需要如何配置您的config.toml文件：\n在_default/config.toml中，您根本不需要提及googleAnalytics参数。这可以确保在您运行hugo server时，即在您的开发服务器上不加载Google Analytics代码。这是因为，当您运行hugo server时，默认情况下Hugo设置Environment=development，它使用_default文件夹中的配置文件。\n在production/config.toml中，您只需要有一行：\ngoogleAnalytics = \u0026quot;G-PPPPPPPP\u0026quot;\n您不需要在此配置文件中再次提及所有其他参数，如title、baseURL、theme等。您只需要提及那些不同或新的生产环境参数。这是由于Hugo将在_default/config.toml之上合并此参数。现在，当您运行hugo（build命令）时，默认情况下hugo设置Environment=production，因此G-PPPPPPPP分析代码将存在于您的生产站点中。\n同样，在staging/config.toml中，您只需要有一行：\ngoogleAnalytics = \u0026quot;G-SSSSSSSS\u0026quot;\n现在，您需要告诉Hugo您正在使用staging环境。因此，您的构建命令应该是hugo --environment staging，这将在您的staging站点中加载G-SSSSSSSS分析代码。\n​\t默认环境是hugo server下的development和hugo下的production。\n合并主题配置 # ​\t_merge 的配置值可以是以下之一：\nnone\n不合并。\nshallow\n仅添加新键的值。\ndeep\n添加新键的值，合并现有键的值。\n​\t请注意，您不需要像下面的默认设置那样冗长；如果未设置，则会继承更高的_merge值。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml build: _merge: none caches: _merge: none cascade: _merge: none frontmatter: _merge: none imaging: _merge: none languages: _merge: none en: _merge: none menus: _merge: shallow params: _merge: deep markup: _merge: none mediatypes: _merge: shallow menus: _merge: shallow minify: _merge: none module: _merge: none outputformats: _merge: shallow params: _merge: deep permalinks: _merge: none privacy: _merge: none related: _merge: none security: _merge: none sitemap: _merge: none taxonomies: _merge: none ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [build] _merge = 'none' [caches] _merge = 'none' [cascade] _merge = 'none' [frontmatter] _merge = 'none' [imaging] _merge = 'none' [languages] _merge = 'none' [languages.en] _merge = 'none' [languages.en.menus] _merge = 'shallow' [languages.en.params] _merge = 'deep' [markup] _merge = 'none' [mediatypes] _merge = 'shallow' [menus] _merge = 'shallow' [minify] _merge = 'none' [module] _merge = 'none' [outputformats] _merge = 'shallow' [params] _merge = 'deep' [permalinks] _merge = 'none' [privacy] _merge = 'none' [related] _merge = 'none' [security] _merge = 'none' [sitemap] _merge = 'none' [taxonomies] _merge = 'none' ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;build\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;none\u0026quot; }, \u0026quot;caches\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;none\u0026quot; }, \u0026quot;cascade\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;none\u0026quot; }, \u0026quot;frontmatter\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;none\u0026quot; }, \u0026quot;imaging\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;none\u0026quot; }, \u0026quot;languages\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;none\u0026quot;, \u0026quot;en\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;none\u0026quot;, \u0026quot;menus\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;shallow\u0026quot; }, \u0026quot;params\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;deep\u0026quot; } } }, \u0026quot;markup\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;none\u0026quot; }, \u0026quot;mediatypes\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;shallow\u0026quot; }, \u0026quot;menus\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;shallow\u0026quot; }, \u0026quot;minify\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;none\u0026quot; }, \u0026quot;module\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;none\u0026quot; }, \u0026quot;outputformats\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;shallow\u0026quot; }, \u0026quot;params\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;deep\u0026quot; }, \u0026quot;permalinks\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;none\u0026quot; }, \u0026quot;privacy\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;none\u0026quot; }, \u0026quot;related\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;none\u0026quot; }, \u0026quot;security\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;none\u0026quot; }, \u0026quot;sitemap\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;none\u0026quot; }, \u0026quot;taxonomies\u0026quot;: { \u0026quot;_merge\u0026quot;: \u0026quot;none\u0026quot; } } ``` 所有配置设置 # ​\t以下是Hugo定义的变量的完整列表。用户可以选择在其站点配置文件中覆盖这些值。\narchetypeDir # ​\t默认值：\u0026ldquo;archetypes\u0026rdquo;\n​\tHugo查找原型文件（内容模板）的目录。另请参阅模块挂载配置，以了解配置此目录的另一种替代方式（从Hugo 0.56开始）。\nassetDir # ​\t默认值：\u0026ldquo;assets\u0026rdquo;\n​\tHugo查找Hugo Pipes中使用的资产文件的目录。另请参阅模块挂载配置，以了解配置此目录的另一种替代方式（从Hugo 0.56开始）。\nbaseURL # ​\t您发布站点的绝对 URL（协议、主机、路径和尾随斜杠），例如 https://www.example.org/docs/。\nbuild # ​\t请参阅配置构建\nbuildDrafts (false) # ​\t默认值：false\n​\t在构建时包括草稿。\nbuildExpired # ​\t默认值：false\n​\t包括已过期的内容。\nbuildFuture # ​\t默认值：false\n​\t包括发布日期在未来的内容。\ncaches # ​\t请参阅配置文件缓存\ncascade # ​\t将默认配置值（正面）传递到内容树中的页面。站点配置中的选项与页面前置元数据相同，请参阅前置元数据层叠。\ncanonifyURLs # ​\t默认值：false\n​\t启用将相对URL转换为绝对URL。\ncleanDestinationDir # ​\t默认值：false\n​\t在构建时，从目标中删除在static 目录中找不到的文件。\ncontentDir # ​\t默认值：\u0026ldquo;content\u0026rdquo;\n​\tHugo读取内容文件的目录。也可以参考模块安装配置的另一种方式来配置此目录（从Hugo 0.56开始）。\ncopyright # ​\t默认值：\u0026quot;\u0026quot;\n​\t站点的版权声明，通常显示在页脚上。\ndataDir # ​\t默认值：\u0026ldquo;data\u0026rdquo;\n​\tHugo读取数据文件的目录。也可以参考模块安装配置的另一种方式来配置此目录（从Hugo 0.56开始）。\ndefaultContentLanguage \u0026lt;- # ​\t默认值：\u0026ldquo;en\u0026rdquo;\n​\t没有语言标识的内容将默认为此语言。\ndefaultContentLanguageInSubdir # ​\t默认值：false\n​\t在子目录中呈现默认的内容语言，例如content/en/。站点根目录/将重定向到/en/。\ndisableAliases # ​\t默认值：false\n​\t禁用别名重定向的生成。请注意，即使设置了disableAliases，别名本身仍将保留在页面上。这样做的动机是能够在.htaccess、Netlify _redirects文件或类似的输出格式中使用301重定向。\ndisableHugoGeneratorInject # ​\t默认值：false\n​\tHugo默认情况下仅在主页的HTML头中插入一个生成器元标记。您可以关闭它，但我们真的很希望您不要这样做，因为这是观察Hugo的受欢迎程度的好方法。\ndisableKinds # ​\t默认值：[]\n​\t启用禁用指定类型的所有页面。在此列表中允许的值为：\u0026quot;page\u0026quot;、\u0026quot;home\u0026quot;、\u0026quot;section\u0026quot;、\u0026quot;taxonomy\u0026quot;、\u0026quot;term\u0026quot;、\u0026quot;RSS\u0026quot;、\u0026quot;sitemap\u0026quot;、\u0026quot;robotsTXT\u0026quot;、\u0026quot;404\u0026quot;。\ndisableLiveReload # ​\t默认值：false\n​\t禁用浏览器窗口的自动实时重新加载。\ndisablePathToLower # ​\t默认值：false\n​\t不要将url/path转换为小写。\nenableEmoji \u0026lt;- # ​\t默认值：false\n​\t为页面内容启用表情符号支持；参见Emoji备忘表。\nenableGitInfo \u0026lt;- # ​\t默认值：false\n​\t为每个页面启用.GitInfo对象（如果Hugo站点已经通过Git进行版本控制）。这将使用每个内容文件的最后git提交日期来更新每个页面的Lastmod参数。\nenableInlineShortcodes # ​\t默认值：false\n​\t启用内联shortcode 支持。参见内联shortcode 。\nenableMissingTranslationPlaceholders # ​\t默认值：false\n​\t如果缺少翻译，则显示占位符，而不是默认值或空字符串。\nenableRobotsTXT \u0026lt;- # ​\t默认值：false\n​\t启用robots.txt文件的生成。\nfrontmatter # ​\t请参阅前置元数据配置。\ngoogleAnalytics # ​\t默认值：\u0026quot;\u0026quot;\n​\tGoogle Analytics 跟踪 ID。\nhasCJKLanguage \u0026lt;- # ​\t默认值：false\n​\t如果为 true，则自动检测内容中的中文/日文/韩文语言。这将使得 .Summary 和 .WordCount 在 CJK 语言中正确工作。\nimaging # ​\t请参阅图像处理配置。\nlanguageCode # ​\t默认值：\u0026quot;\u0026quot;\n​\t由 RFC 5646 定义的语言标签。此值用于填充：\n内部 RSS 模板中的 \u0026lt;language\u0026gt; 元素 内部别名模板中 \u0026lt;html\u0026gt; 元素的 lang 属性 languages # ​\t请参阅配置语言。\ndisableLanguages # ​\t请参阅禁用语言。\nmarkup # ​\t请参阅配置标记。\nmediaTypes # ​\t请参阅配置媒体类型。\nmenus \u0026lt;- # ​\t请参阅菜单。\nminify # ​\t请参阅配置 Minify。\nmodule # ​\t模块配置，请参阅模块配置。\nnewContentEditor # ​\t默认值：\u0026quot;\u0026quot;\n​\t创建新内容时要使用的编辑器。\nnoChmod # ​\t默认值：false\n​\t不同步文件的权限模式。\nnoTimes # ​\t默认值：false\n​\t不同步文件的修改时间。\noutputFormats # ​\t请参阅配置输出格式。\npaginate \u0026lt;- # ​\t默认值：10\n​\t分页中每页的默认元素数。\npaginatePath # ​\t默认值：\u0026ldquo;page\u0026rdquo;\n​\t在分页期间使用的路径元素（https://example.com/page/2）。\npermalinks # ​\t请参阅内容管理。\npluralizeListTitles # ​\t默认值：true\n​\t在列表中使用复数形式的标题。\npublishDir # ​\t默认值：\u0026ldquo;public\u0026rdquo;\n​\tHugo将生成的最终静态站点（HTML文件等）写入的目录。\nrelated # ​\t请参阅相关内容（Related Content）。\nrelativeURLs # ​\t默认值：false\n​\t启用此选项可使所有相对URL相对于内容根目录。请注意，这不会影响绝对URL。\nrefLinksErrorLevel # ​\t默认值：\u0026ldquo;ERROR\u0026rdquo;\n​\t使用ref或relref解析页面链接时，如果无法解析链接，将以此日志级别记录。有效值为ERROR（默认值）或WARNING。任何ERROR将导致构建失败（exit -1）。\nrefLinksNotFoundURL # ​\t在ref或relref中找不到页面引用时要使用的URL占位符。按原样使用。\nremovePathAccents # ​\t默认值：false\n​\t从内容路径中的组合字符中删除非间隔标记。\ncontent/post/hügó.md --\u0026gt; https://example.org/post/hugo/ rssLimit # ​\t默认值：-1（无限制）\n​\tRSS feed中的最大项目数。\nsectionPagesMenu # ​\t请参阅菜单（Menus）。\nsecurity # ​\t请参阅安全策略（Security Policy）。\nsitemap # ​\t默认站点地图配置。\nsummaryLength # ​\t默认值：70\n​\t在.Summary中显示的文本长度（以单词计算）。\ntaxonomies # ​\t请参阅分类（Configure Taxonomies）。\ntheme # ​\t请参阅模块配置（Module Config）以了解如何导入主题。\nthemesDir # ​\t默认值：\u0026ldquo;themes\u0026rdquo;\n​\tHugo从中读取主题的目录。\ntimeout # ​\t默认值：\u0026ldquo;30s\u0026rdquo;\n​\t生成页面内容的超时时间，以持续时间或毫秒表示。注意：这用于退出递归内容生成。如果页面生成较慢（例如因为它们需要大量的图像处理或依赖于远程内容），则可能需要提高此限制。\ntimeZone \u0026lt;- # ​\t用于解析前置元数据日期（不带此信息）和time function的时区（或位置），例如Europe/Oslo。有效值列表可能因系统而异，但应包括UTC、Local和IANA时区数据库中的任何位置。\ntitle # ​\t站点标题。\ntitleCaseStyle # ​\t默认值：\u0026ldquo;AP\u0026rdquo;\n​\t请参阅配置标题大小写（Configure Title Case）。\nuglyURLs # ​\t默认值：false\n​\t启用时，将创建形式为/filename.html而不是/filename/的URL。\nwatch # ​\t默认值：false\n​\t监视文件系统以进行更改，并根据需要重新创建。\n​\t如果您在*nix机器上开发您的站点，这是一个方便的从命令行查找配置选项的快捷方式：\ncd ~/sites/yourhugosite hugo config | grep emoji 显示输出如下：\nenableemoji: true 配置构建 -\u0026gt; [build] # ​\tbuild配置部分包含全局构建相关的配置选项。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml build: noJSConfigInAssets: false useResourceCacheWhen: fallback writeStats: false ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [build] noJSConfigInAssets = false useResourceCacheWhen = 'fallback' writeStats = false ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;build\u0026quot;: { \u0026quot;noJSConfigInAssets\u0026quot;: false, \u0026quot;useResourceCacheWhen\u0026quot;: \u0026quot;fallback\u0026quot;, \u0026quot;writeStats\u0026quot;: false } } ``` useResourceCacheWhen\n决定在 PostCSS 和 ToCSS 中何时使用 /resources/_gen 中的缓存资源。有效值为 never、always 和 fallback。最后一个值表示如果 PostCSS/extended版本不可用，则尝试使用缓存。\nwriteStats\n启用后，将在项目根目录下写入一个名为 hugo_stats.json 的文件，其中包含有关构建的一些汇总数据，例如已发布的 HTML 实体列表，可用于进行 CSS pruning。如果您仅在生产构建中使用此功能，则应考虑将其放在 config/production 下面。值得一提的是，由于部分服务器构建的本质，当您添加或更改 HTML 实体时，将添加新的 HTML 实体，但旧值不会在您重启服务器或运行常规的 hugo 构建之前被删除。\n请注意，这是清除未使用的 CSS 的主要用例；它专为速度而建，可能会出现误报（例如，检测到不是 HTML 元素的 HTML 元素）。\nnoJSConfigInAssets\n关闭在 /assets 文件夹中写入一个 jsconfig.json，其中包含来自运行 js.Build 的导入映射。此文件旨在帮助在诸如 VS Code 等代码编辑器内进行智能感知/导航。请注意，如果您不使用 js.Build，则不会写入任何文件。\nConfigure Server -\u0026gt; [server] # ​\t仅在运行 hugo server 时相关，在开发过程中可以设置 HTTP 标头，从而可以测试您的内容安全策略等。配置格式与 Netlify 的格式相匹配，并具有略微更强大的全局匹配功能：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml server: headers: - for: /** values: Content-Security-Policy: script-src localhost:1313 Referrer-Policy: strict-origin-when-cross-origin X-Content-Type-Options: nosniff X-Frame-Options: DENY X-XSS-Protection: 1; mode=block ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [server] [[server.headers]] for = '/**' [server.headers.values] Content-Security-Policy = 'script-src localhost:1313' Referrer-Policy = 'strict-origin-when-cross-origin' X-Content-Type-Options = 'nosniff' X-Frame-Options = 'DENY' X-XSS-Protection = '1; mode=block' ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;server\u0026quot;: { \u0026quot;headers\u0026quot;: [ { \u0026quot;for\u0026quot;: \u0026quot;/**\u0026quot;, \u0026quot;values\u0026quot;: { \u0026quot;Content-Security-Policy\u0026quot;: \u0026quot;script-src localhost:1313\u0026quot;, \u0026quot;Referrer-Policy\u0026quot;: \u0026quot;strict-origin-when-cross-origin\u0026quot;, \u0026quot;X-Content-Type-Options\u0026quot;: \u0026quot;nosniff\u0026quot;, \u0026quot;X-Frame-Options\u0026quot;: \u0026quot;DENY\u0026quot;, \u0026quot;X-XSS-Protection\u0026quot;: \u0026quot;1; mode=block\u0026quot; } } ] } } ``` ​\t由于这仅适用于\u0026quot;development only\u0026quot;，因此将其放置在development环境下可能是有意义的：\nconfig/development/server.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml headers: - for: /** values: Content-Security-Policy: script-src localhost:1313 Referrer-Policy: strict-origin-when-cross-origin X-Content-Type-Options: nosniff X-Frame-Options: DENY X-XSS-Protection: 1; mode=block ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [[headers]] for = '/**' [headers.values] Content-Security-Policy = 'script-src localhost:1313' Referrer-Policy = 'strict-origin-when-cross-origin' X-Content-Type-Options = 'nosniff' X-Frame-Options = 'DENY' X-XSS-Protection = '1; mode=block' ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;headers\u0026quot;: [ { \u0026quot;for\u0026quot;: \u0026quot;/**\u0026quot;, \u0026quot;values\u0026quot;: { \u0026quot;Content-Security-Policy\u0026quot;: \u0026quot;script-src localhost:1313\u0026quot;, \u0026quot;Referrer-Policy\u0026quot;: \u0026quot;strict-origin-when-cross-origin\u0026quot;, \u0026quot;X-Content-Type-Options\u0026quot;: \u0026quot;nosniff\u0026quot;, \u0026quot;X-Frame-Options\u0026quot;: \u0026quot;DENY\u0026quot;, \u0026quot;X-XSS-Protection\u0026quot;: \u0026quot;1; mode=block\u0026quot; } } ] } ``` ​\t您还可以为服务器指定简单的重定向规则。 语法与Netlify类似。\n​\t请注意，status200会触发URL重写，这是在SPA情况下所需要的，例如：\nconfig/development/server.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml redirects: - force: false from: /myspa/** status: 200 to: /myspa/ ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [[redirects]] force = false from = '/myspa/**' status = 200 to = '/myspa/' ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;redirects\u0026quot;: [ { \u0026quot;force\u0026quot;: false, \u0026quot;from\u0026quot;: \u0026quot;/myspa/**\u0026quot;, \u0026quot;status\u0026quot;: 200, \u0026quot;to\u0026quot;: \u0026quot;/myspa/\u0026quot; } ] } ``` ​\t设置force=true将使重定向即使路径中存在现有内容也会生效。 请注意，在Hugo 0.76之前，force是默认行为，但这符合Netlify的处理方式。\n404服务器错误页面 -\u0026gt; [[redirects]] # New in v0.103.0\n​\t当运行hugo server时，默认情况下，Hugo将使用404.html模板呈现所有404错误。 请注意，如果您已经添加了一个或多个重定向到服务器配置中，则需要显式添加404重定向，例如：\nconfig/development/server.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml redirects: - from: /** status: 404 to: /404.html ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [[redirects]] from = '/**' status = 404 to = '/404.html' ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;redirects\u0026quot;: [ { \u0026quot;from\u0026quot;: \u0026quot;/**\u0026quot;, \u0026quot;status\u0026quot;: 404, \u0026quot;to\u0026quot;: \u0026quot;/404.html\u0026quot; } ] } ``` 配置标题大小写 -\u0026gt; titleCaseStyle # ​\t设置titleCaseStyle以指定title模板函数和Hugo中自动部分标题使用的标题样式。\n​\t默认情况下，Hugo遵循美联社 （Associated Press（AP））风格指南中的大写规则。 如果您想遵循芝加哥风格（Chicago Manual of Style）手册，则将titleCaseStyle设置为chicago，或将其设置为go以使用Go的惯例，即每个单词都大写。\n配置环境变量 # HUGO_NUMWORKERMULTIPLIER\n可以设置为增加或减少在Hugo中并行处理中使用的工作程序数量。 如果未设置，则将使用逻辑CPU的数量。\n配置查找顺序 # ​\t与模板查找顺序类似，Hugo有一组默认规则，用于在站点源目录的根目录中搜索配置文件作为默认行为：\n./config.toml ./config.yaml ./config.json ​\t在config文件中，您可以指导Hugo如何渲染您的站点，控制您的站点菜单，并任意定义特定于您的项目的站点范围（site-wide）参数。\n示例配置 # ​\t以下是典型的配置文件示例。在params:下嵌套的值将填充.Site.Params变量，供模板使用：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml baseURL: https://yoursite.example.com/ params: AuthorName: Jon Doe GitHubUser: spf13 ListOfFoo: - foo1 - foo2 SidebarRecentLimit: 5 Subtitle: Hugo is Absurdly Fast! permalinks: posts: /:year/:month/:title/ title: My Hugo Site ``` === \u0026ldquo;toml\u0026rdquo;\n```toml baseURL = 'https://yoursite.example.com/' title = 'My Hugo Site' [params] AuthorName = 'Jon Doe' GitHubUser = 'spf13' ListOfFoo = ['foo1', 'foo2'] SidebarRecentLimit = 5 Subtitle = 'Hugo is Absurdly Fast!' [permalinks] posts = '/:year/:month/:title/' ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;baseURL\u0026quot;: \u0026quot;https://yoursite.example.com/\u0026quot;, \u0026quot;params\u0026quot;: { \u0026quot;AuthorName\u0026quot;: \u0026quot;Jon Doe\u0026quot;, \u0026quot;GitHubUser\u0026quot;: \u0026quot;spf13\u0026quot;, \u0026quot;ListOfFoo\u0026quot;: [ \u0026quot;foo1\u0026quot;, \u0026quot;foo2\u0026quot; ], \u0026quot;SidebarRecentLimit\u0026quot;: 5, \u0026quot;Subtitle\u0026quot;: \u0026quot;Hugo is Absurdly Fast!\u0026quot; }, \u0026quot;permalinks\u0026quot;: { \u0026quot;posts\u0026quot;: \u0026quot;/:year/:month/:title/\u0026quot; }, \u0026quot;title\u0026quot;: \u0026quot;My Hugo Site\u0026quot; } ``` 使用环境变量配置 # ​\t除了已经提到的三个配置选项外，可以通过操作系统环境变量定义配置键值。\n​\t例如，以下命令将在类Unix系统上有效地设置站点标题：\n$ env HUGO_TITLE=\u0026#34;Some Title\u0026#34; hugo ​\t如果您使用像Netlify这样的服务部署您的站点，则这非常有用。请参阅Hugo文档中的Netlify配置文件示例。\n​\t名称必须以HUGO_为前缀，并且设置操作系统环境变量时必须将配置键设置为大写。\n​\t要设置配置参数，请使用HUGO_PARAMS_作为前缀。\n​\t如果您使用了下划线命名法，则上述方法将无法正常工作。Hugo通过HUGO之后的第一个字符确定要使用的分隔符。这允许您使用任何[允许的](https://stackoverflow.com/questions/2821043/allowed-characters-in-linux-environment-variable-names#:~:text=So names may contain any,not begin with a digit)分隔符来定义形式为HUGOxPARAMSxAPI_KEY=abcdefgh的环境变量。\n忽略内容和数据文件的渲染 -\u0026gt; ignoreFiles # ​\t注意：这个方法可行，但我们建议您使用更新且更强大的includeFiles和excludeFiles挂载选项。\n​\t要在渲染站点时排除特定的content和data目录中的文件，请将ignoreFiles设置为一个或多个正则表达式，以匹配绝对文件路径。\n​\t要忽略以.foo或.boo结尾的文件：\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml ignoreFiles: - \\.foo$ - \\.boo$ ``` === \u0026ldquo;toml\u0026rdquo;\n```toml ignoreFiles = ['\\.foo$', '\\.boo$'] ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;ignoreFiles\u0026quot;: [ \u0026quot;\\\\.foo$\u0026quot;, \u0026quot;\\\\.boo$\u0026quot; ] } ``` ​\t通过绝对文件路径忽略一个文件：\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml ignoreFiles: - ^/home/user/project/content/test\\.md$ ``` === \u0026ldquo;toml\u0026rdquo;\n```toml ignoreFiles = ['^/home/user/project/content/test\\.md$'] ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;ignoreFiles\u0026quot;: [ \u0026quot;^/home/user/project/content/test\\\\.md$\u0026quot; ] } ``` 配置Front Matter -\u0026gt; [frontmatter] # 配置日期 # ​\t日期在Hugo中很重要，您可以通过向config.toml添加frontmatter部分来配置Hugo如何为您的内容页面分配日期。\n默认配置如下：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml frontmatter: date: - date - publishDate - lastmod expiryDate: - expiryDate lastmod: - :git - lastmod - date - publishDate publishDate: - publishDate - date ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [frontmatter] date = ['date', 'publishDate', 'lastmod'] expiryDate = ['expiryDate'] lastmod = [':git', 'lastmod', 'date', 'publishDate'] publishDate = ['publishDate', 'date'] ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;frontmatter\u0026quot;: { \u0026quot;date\u0026quot;: [ \u0026quot;date\u0026quot;, \u0026quot;publishDate\u0026quot;, \u0026quot;lastmod\u0026quot; ], \u0026quot;expiryDate\u0026quot;: [ \u0026quot;expiryDate\u0026quot; ], \u0026quot;lastmod\u0026quot;: [ \u0026quot;:git\u0026quot;, \u0026quot;lastmod\u0026quot;, \u0026quot;date\u0026quot;, \u0026quot;publishDate\u0026quot; ], \u0026quot;publishDate\u0026quot;: [ \u0026quot;publishDate\u0026quot;, \u0026quot;date\u0026quot; ] } } ``` ​\t如果您的一些内容中具有非标准日期参数，您可以覆盖date的设置：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml frontmatter: date: - myDate - :default ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [frontmatter] date = ['myDate', ':default'] ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;frontmatter\u0026quot;: { \u0026quot;date\u0026quot;: [ \u0026quot;myDate\u0026quot;, \u0026quot;:default\u0026quot; ] } } ``` ​\t:default是默认设置的快捷方式。以上设置将根据需要将.Date设置为myDate中的日期值，如果不存在，则会查找date、publishDate、lastmod并选择第一个有效日期。\n​\t在右侧的列表中，以\u0026quot;:\u0026ldquo;开头的值是具有特殊含义的日期处理程序（见下文）。其他的只是您的正文数据配置中日期参数的名称（大小写不敏感）。另请注意，Hugo有一些内置别名：lastmod =\u0026gt; modified，publishDate =\u0026gt; pubdate，published和expiryDate =\u0026gt; unpublishdate。例如，使用front matter中的pubDate作为日期将默认分配给.PublishDate。\n​\t特殊日期处理程序为：\n:fileModTime\n从内容文件的最后修改时间戳中提取日期。\n例如：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml frontmatter: lastmod: - lastmod - :fileModTime - :default ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [frontmatter] lastmod = ['lastmod', ':fileModTime', ':default'] ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;frontmatter\u0026quot;: { \u0026quot;lastmod\u0026quot;: [ \u0026quot;lastmod\u0026quot;, \u0026quot;:fileModTime\u0026quot;, \u0026quot;:default\u0026quot; ] } } ``` ​\t上面的配置将首先尝试从front matter参数中lastmod 提取.Lastmod的值，然后再从内容文件的修改时间戳中提取日期值。最后，:default在这里不需要，但是Hugo最终会在:git、date和publishDate中查找有效的日期。\n:filename\n从内容文件的文件名中提取日期。例如，2018-02-22-mypage.md将提取日期2018-02-22。此外，如果slug未设置，则mypage将作为.Slug的值。\n例如：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml frontmatter: date: - :filename - :default ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [frontmatter] date = [':filename', ':default'] ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;frontmatter\u0026quot;: { \u0026quot;date\u0026quot;: [ \u0026quot;:filename\u0026quot;, \u0026quot;:default\u0026quot; ] } } ``` ​\t以上配置将首先尝试从文件名中提取.Date的值，然后再从front matter参数的date、publishDate和lastmod中查找。\n:git\n这是此内容文件的最后修订版的Git作者日期。这只有在设置了 --enableGitInfo 或在站点配置中设置了 enableGitInfo = true 时才会被设置。\n配置其他输出格式 # ​\tHugo v0.20引入了将内容呈现为多种输出格式（例如JSON、AMP html或CSV）的能力。请参阅输出格式，了解如何将这些值添加到您的Hugo项目配置文件中。\n配置压缩 -\u0026gt; [minify] # 默认配置：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml minify: disableCSS: false disableHTML: false disableJS: false disableJSON: false disableSVG: false disableXML: false minifyOutput: false tdewolff: css: keepCSS2: true precision: 0 html: keepComments: false keepConditionalComments: true keepDefaultAttrVals: true keepDocumentTags: true keepEndTags: true keepQuotes: false keepWhitespace: false js: keepVarNames: false noNullishOperator: false precision: 0 json: keepNumbers: false precision: 0 svg: keepComments: false precision: 0 xml: keepWhitespace: false ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [minify] disableCSS = false disableHTML = false disableJS = false disableJSON = false disableSVG = false disableXML = false minifyOutput = false [minify.tdewolff] [minify.tdewolff.css] keepCSS2 = true precision = 0 [minify.tdewolff.html] keepComments = false keepConditionalComments = true keepDefaultAttrVals = true keepDocumentTags = true keepEndTags = true keepQuotes = false keepWhitespace = false [minify.tdewolff.js] keepVarNames = false noNullishOperator = false precision = 0 [minify.tdewolff.json] keepNumbers = false precision = 0 [minify.tdewolff.svg] keepComments = false precision = 0 [minify.tdewolff.xml] keepWhitespace = false ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;minify\u0026quot;: { \u0026quot;disableCSS\u0026quot;: false, \u0026quot;disableHTML\u0026quot;: false, \u0026quot;disableJS\u0026quot;: false, \u0026quot;disableJSON\u0026quot;: false, \u0026quot;disableSVG\u0026quot;: false, \u0026quot;disableXML\u0026quot;: false, \u0026quot;minifyOutput\u0026quot;: false, \u0026quot;tdewolff\u0026quot;: { \u0026quot;css\u0026quot;: { \u0026quot;keepCSS2\u0026quot;: true, \u0026quot;precision\u0026quot;: 0 }, \u0026quot;html\u0026quot;: { \u0026quot;keepComments\u0026quot;: false, \u0026quot;keepConditionalComments\u0026quot;: true, \u0026quot;keepDefaultAttrVals\u0026quot;: true, \u0026quot;keepDocumentTags\u0026quot;: true, \u0026quot;keepEndTags\u0026quot;: true, \u0026quot;keepQuotes\u0026quot;: false, \u0026quot;keepWhitespace\u0026quot;: false }, \u0026quot;js\u0026quot;: { \u0026quot;keepVarNames\u0026quot;: false, \u0026quot;noNullishOperator\u0026quot;: false, \u0026quot;precision\u0026quot;: 0 }, \u0026quot;json\u0026quot;: { \u0026quot;keepNumbers\u0026quot;: false, \u0026quot;precision\u0026quot;: 0 }, \u0026quot;svg\u0026quot;: { \u0026quot;keepComments\u0026quot;: false, \u0026quot;precision\u0026quot;: 0 }, \u0026quot;xml\u0026quot;: { \u0026quot;keepWhitespace\u0026quot;: false } } } } ``` 配置文件缓存 -\u0026gt; [caches] # ​\t自Hugo 0.52版本以来，您可以配置的不仅是cacheDir。这是默认配置：\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml caches: assets: dir: :resourceDir/_gen maxAge: -1 getcsv: dir: :cacheDir/:project maxAge: -1 getjson: dir: :cacheDir/:project maxAge: -1 getresource: dir: :cacheDir/:project maxAge: -1 images: dir: :resourceDir/_gen maxAge: -1 modules: dir: :cacheDir/modules maxAge: -1 ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [caches] [caches.assets] dir = ':resourceDir/_gen' maxAge = -1 [caches.getcsv] dir = ':cacheDir/:project' maxAge = -1 [caches.getjson] dir = ':cacheDir/:project' maxAge = -1 [caches.getresource] dir = ':cacheDir/:project' maxAge = -1 [caches.images] dir = ':resourceDir/_gen' maxAge = -1 [caches.modules] dir = ':cacheDir/modules' maxAge = -1 ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;caches\u0026quot;: { \u0026quot;assets\u0026quot;: { \u0026quot;dir\u0026quot;: \u0026quot;:resourceDir/_gen\u0026quot;, \u0026quot;maxAge\u0026quot;: -1 }, \u0026quot;getcsv\u0026quot;: { \u0026quot;dir\u0026quot;: \u0026quot;:cacheDir/:project\u0026quot;, \u0026quot;maxAge\u0026quot;: -1 }, \u0026quot;getjson\u0026quot;: { \u0026quot;dir\u0026quot;: \u0026quot;:cacheDir/:project\u0026quot;, \u0026quot;maxAge\u0026quot;: -1 }, \u0026quot;getresource\u0026quot;: { \u0026quot;dir\u0026quot;: \u0026quot;:cacheDir/:project\u0026quot;, \u0026quot;maxAge\u0026quot;: -1 }, \u0026quot;images\u0026quot;: { \u0026quot;dir\u0026quot;: \u0026quot;:resourceDir/_gen\u0026quot;, \u0026quot;maxAge\u0026quot;: -1 }, \u0026quot;modules\u0026quot;: { \u0026quot;dir\u0026quot;: \u0026quot;:cacheDir/modules\u0026quot;, \u0026quot;maxAge\u0026quot;: -1 } } } ``` ​\t您可以在自己的config.toml中覆盖这些缓存设置。\n关键字的解释 # :cacheDir\n这是cacheDir配置选项的值，如果设置了的话（也可以通过OS环境变量HUGO_CACHEDIR设置）。如果在Netlify上，将回退到/opt/build/cache/hugo_cache/，对于其他的操作系统，将位于操作系统临时目录下的hugo_cache目录。这意味着，如果您在Netlify上运行构建，所有配置为:cacheDir的缓存都将保存并在下一次构建时恢复。对于其他的CI供应商，请阅读其文档。有关CircleCI示例，请参见此配置。\n:project\n当前Hugo项目的基本目录名称。这意味着，在默认设置中，每个项目都有单独的文件缓存，这意味着当您运行hugo --gc时，您不会触及与其他在同一台电脑上运行的Hugo项目相关的文件。\n:resourceDir\n这是resourceDir配置选项的值。\nmaxAge\n这是缓存条目被清除之前的持续时间，-1表示永远，0有效地关闭该特定缓存。使用Go的time.Duration，所以有效值是\u0026quot;10s\u0026quot;（10秒），\u0026quot;10m\u0026quot;（10分钟）和\u0026quot;10h\u0026quot;（10小时）。\ndir\n这是用于存储此缓存文件的绝对路径。允许的起始占位符是:cacheDir和:resourceDir（见上文）。\n配置格式规范 # TOML 规范 YAML 规范 JSON 规范 参见 # 数据模板 前置元数据 配置标记 在GitLab上托管 Hugo和一般数据保护条例（GDPR） "},{"id":35,"href":"/hugo/contentmanagement/diagrams/","title":"图表","section":"内容管理","content":" Diagrams # Use fenced code blocks and markdown render hooks to display diagrams.\nNew in v0.93.0\nGoAT Diagrams (Ascii) # Hugo supports GoAT natively. This means that this code block:\n```goat . . . .--- 1 .-- 1 / 1 / \\ | | .---+ .-+ + / \\ .---+---. .--+--. | \u0026#39;--- 2 | \u0026#39;-- 2 / \\ 2 + + | | | | ---+ ---+ + / \\ / \\ .-+-. .-+-. .+. .+. | .--- 3 | .-- 3 \\ / 3 / \\ / \\ | | | | | | | | \u0026#39;---+ \u0026#39;-+ + 1 2 3 4 1 2 3 4 1 2 3 4 \u0026#39;--- 4 \u0026#39;-- 4 \\ 4 ``` Will be rendered as:\nMermaid Diagrams # Hugo currently does not provide default templates for Mermaid diagrams. But you can easily add your own. One way to do it would be to create layouts/_default/_markup/render-codeblock-mermaid.html:\n\u0026lt;div class=\u0026#34;mermaid\u0026#34;\u0026gt; {{- .Inner | safeHTML }} \u0026lt;/div\u0026gt; {{ .Page.Store.Set \u0026#34;hasMermaid\u0026#34; true }} And then include this snippet at the bottom of the content template (Note: below .Content as the render hook is not processed until .Content is executed):\n{{ if .Page.Store.Get \u0026#34;hasMermaid\u0026#34; }} \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import mermaid from \u0026#39;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs\u0026#39;; mermaid.initialize({ startOnLoad: true }); \u0026lt;/script\u0026gt; {{ end }} With that you can use the mermaid language in Markdown code blocks:\n```mermaid sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! ``` Goat Ascii Diagram Examples # Graphics # Complex # Process # File tree # Created from https://arthursonzogni.com/Diagon/#Tree\nSequence Diagram # https://arthursonzogni.com/Diagon/#Sequence\nFlowchart # https://arthursonzogni.com/Diagon/#Flowchart\nTable # https://arthursonzogni.com/Diagon/#Table\n"},{"id":36,"href":"/hugo/variables/pagesmethods/","title":"页面方法","section":"变量","content":" Pages Methods - 页面方法 # https://gohugo.io/variables/pages/\n​\tPages是Hugo中的核心页面集合，具有许多有用的方法。\n​\t此外，请参阅列表模板以获取排序方法的概述。\n.Next PAGE # ​\t在Pages上的.Next和.Prev与在.Page上具有相同名称的方法类似，但更加灵活（并且略微慢一些），因为它们可以用于任何页面集合。\n​\t.Next指向与作为参数发送的页面相对的下一个页面。例如：{{ with .Site.RegularPages.Next . }}{{ .RelPermalink }}{{ end }}。对集合中的第一个页面调用.Next将返回nil。\n.Prev PAGE # ​\t.Prev指向与作为参数发送的页面相对的上一个页面。例如：{{ with .Site.RegularPages.Prev . }}{{ .RelPermalink }}{{ end }}。对集合中的最后一个页面调用.Prev将返回nil。\n另请参阅 # 页面变量 "},{"id":37,"href":"/hugo/abouthugo/thebenefitsofstatic/","title":"静态站点生成器的好处","section":"关于Hugo","content":" The Benefits of Static Site Generators - 静态站点生成器的好处 # https://gohugo.io/about/benefits/\n​\t改进的性能、安全性和易用性是静态站点生成器如此吸引人的几个原因之一。\n​\t站点生成器的目的是将内容渲染成HTML文件。大多数都是\u0026quot;动态站点生成器\u0026quot;。这意味着HTTP服务器——即将文件发送到浏览器以供查看的程序——在每次终端用户请求页面时运行生成器创建一个新的HTML文件。\n​\t随着时间的推移，动态站点生成器被编程以缓存其HTML文件，以防止向终端用户提供页面时不必要的延迟。缓存的页面是网页的静态版本。\n​\tHugo在缓存方面更进了一步，所有HTML文件都在您的计算机上渲染。您可以在将文件复制到托管HTTP服务器的计算机之前在本地查看这些文件。由于HTML文件不是动态生成的，我们称Hugo是一个静态站点生成器。\n​\t这有许多好处。最明显的是性能。HTTP服务器非常擅长发送文件——事实上，您可以使用动态站点所需内存和CPU的一小部分有效地提供相同数量的页面。\n更多关于静态站点生成器的信息 # \u0026ldquo;静态站点生成器简介\u0026rdquo;，David Walsh \u0026ldquo;Hugo与WordPress页面加载速度比较：Hugo远胜WordPress\u0026rdquo;，GettingThingsTech \u0026ldquo;静态站点生成器\u0026rdquo;，O’Reilly StaticGen: 顶级开源静态站点生成器（GitHub Stars） \u0026ldquo;前十名静态站点生成器\u0026rdquo;，Netlify博客 \u0026ldquo;The Resurgence of Static\u0026rdquo;，dotCMS 另请参阅 # partialCached "},{"id":38,"href":"/hugo/contentmanagement/","title":"内容管理","section":"文档","content":" Content Management - 内容管理 # https://gohugo.io/content-management/\n​\t静态站点生成器需要扩展超越前置元数据和几个模板才能实现可伸缩性和可管理性。Hugo 设计时不仅考虑了开发人员，也考虑了内容管理人员和作者。\n"},{"id":39,"href":"/hugo/functions/_hasmenucurrent/","title":".HasMenuCurrent","section":"函数","content":"将以下英文翻译为中文：\n.HasMenuCurrent # https://gohugo.io/functions/hasmenucurrent/\n语法 # PAGE.HasMenuCurrent MENU MENUENTRY ​\t.HasMenuCurrent 是 Page 对象中的一个方法，返回一个布尔值。如果 PAGE 是给定 MENU 中 MENUENTRY 的一个子菜单选项中 .Page 的相同对象，则返回true。\n​\t如果 MENUENTRY 的.Page是一个 section，则从 Hugo 0.86.0 开始，此方法对该章节的任何后代也返回true。\n​\t您可以在 菜单模板 中找到其使用示例。\n另请参阅 # .IsMenuCurrent Menu Templates Menu Variables Menus "},{"id":40,"href":"/hugo/templ/renderhooks/","title":"Markdown渲染钩子","section":"模板","content":" Markdown Render Hooks - Markdown渲染钩子 # https://gohugo.io/templates/render-hooks/\n​\t渲染钩子允许自定义模板覆盖markdown渲染功能。\n​\t请注意，这只支持Goldmark渲染器。\n​\t您可以通过在layouts/_default/_markup中创建名称为render-{kind}的模板来覆盖默认的Markdown渲染为HTML的某些部分。\n​\t您还可以在layouts/[type/section]/_markup中创建特定于type/section的钩子，例如：layouts/blog/_markup。\n​\t目前支持的钩子种类有：\nimage link heading codeblock New in v0.93.0 ​\t如果需要，您可以定义特定于输出格式和语言的模板。您的layouts文件夹可能如下所示：\nlayouts/ └── _default/ └── _markup/ ├── render-codeblock-bash.html ├── render-codeblock.html ├── render-heading.html ├── render-image.html ├── render-image.rss.xml └── render-link.html ​\t以下是上述用法的一些示例：\n使用.GetPage解析链接引用。这将使链接可移植，因为您可以将./my-post.md（和在GitHub上可以使用的类似构造）转换为/blog/2019/01/01/my-post/等。 为外部链接添加target=_blank。 解析和处理图像。 添加标题链接。 渲染钩子应用于标题、链接和图像 # 传递给render-link和render-image的上下文 # ​\trender-link和render-image模板将接收到以下上下文：\nPage\n正在被渲染的Page。\nDestination\nThe URL.\nTitle\ntitle属性。\nText\n渲染后的（HTML）链接文本。\nPlainText\n上述文本的纯文本版本。\n传递给render-heading的上下文 # ​\trender-heading模板将接收以下上下文：\nPage\n正在被渲染的页面。\nLevel\n标题级别（1-6）\nAnchor\n在该页面中唯一的自动生成的HTML id。\nText\n被渲染后的（HTML）文本。\nPlainText\n上述内容的纯文本版本。\nAttributes (map)\n一个属性映射（例如id、class）。需要注意的是，对于链接，这个映射目前始终为空。\nThe render-image templates will also receive:\n​\trender-image模板还将接收：\nIsBlock New in v0.108.0\n如果这是一个独立的图像并且配置选项markup.goldmark.parser.wrapStandAloneImageWithinParagraph被禁用，则返回true。\nOrdinal New in v0.108.0\n当前文档中所有图像的基于零的序数。\n带标题的Markdown链接示例 # [Text](https://www.gohugo.io \u0026#34;Title\u0026#34;) ​\t以下是render-link.html模板的代码示例：\nlayouts/_default/_markup/render-link.html\n\u0026lt;a href=\u0026#34;{{ .Destination | safeURL }}\u0026#34;{{ with .Title }} title=\u0026#34;{{ . }}\u0026#34;{{ end }}{{ if strings.HasPrefix .Destination \u0026#34;http\u0026#34; }} target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34;{{ end }}\u0026gt;{{ .Text | safeHTML }}\u0026lt;/a\u0026gt; 图像Markdown示例 # ![Text](https://gohugo.io/images/hugo-logo-wide.svg \u0026#34;Title\u0026#34;) ​\t以下是render-image.html模板的代码示例：\nlayouts/_default/_markup/render-image.html\n\u0026lt;p class=\u0026#34;md__image\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ .Destination | safeURL }}\u0026#34; alt=\u0026#34;{{ .Text }}\u0026#34; {{ with .Title }} title=\u0026#34;{{ . }}\u0026#34;{{ end }} /\u0026gt; \u0026lt;/p\u0026gt; 标题链接示例 # ​\t给定此模板文件\nlayouts/_default/_markup/render-heading.html\n\u0026lt;h{{ .Level }} id=\u0026#34;{{ .Anchor | safeURL }}\u0026#34;\u0026gt;{{ .Text | safeHTML }} \u0026lt;a href=\u0026#34;#{{ .Anchor | safeURL }}\u0026#34;\u0026gt;¶\u0026lt;/a\u0026gt;\u0026lt;/h{{ .Level }}\u0026gt; ​\t以及这个 markdown\n### Section A ​\t渲染出的 HTML 代码将是\n\u0026lt;h3 id=\u0026#34;section-a\u0026#34;\u0026gt;Section A \u0026lt;a href=\u0026#34;#section-a\u0026#34;\u0026gt;¶\u0026lt;/a\u0026gt;\u0026lt;/h3\u0026gt; 代码块的渲染钩子 # New in v0.93.0\n​\t您可以为所有代码块或特定类型/语言（例如下面的bash）添加钩子模板：\n​\t这些代码块的默认行为是进行代码高亮，但是由于可以向这些代码块传递属性，因此它们可以用于几乎任何事情。一个示例是内置的GoAT Diagrams或这个Mermaid Diagram Code Block Hook示例。\n​\t代码块模板中您可以获取到的上下文（\u0026quot;.\u0026quot;）包括：\nType (string)\n代码块的类型。这将是编程语言，例如bash，用于进行代码高亮。\nAttributes (map)\n从Markdown传递的属性（例如{ attrName1=attrValue1 attrName2=\u0026quot;attr Value 2\u0026quot; }）。\nOptions (map)\nChroma 高亮处理选项。仅在 Type 是已知的 Chroma Lexer 时才填充。\nInner (string)\n代码围栏之间的文本。\nOrdinal (integer)\n当前文档中所有代码块的从零开始的序数。\nPage\n所属的Page。\nPosition\n在错误日志中有用，因为它会打印出文件名和位置（行号、列号），例如 {{ errorf \u0026quot;error in code block: %s\u0026quot; .Position }}。\n另请参阅 # .RenderString [内容格式 (https://gohugo.io/content-management/formats/) 简码 anchorize markdownify "},{"id":41,"href":"/hugo/variables/taxonomyvariables/","title":"分类法（Taxonomy）变量","section":"变量","content":" Taxonomy Variables - 分类法（Taxonomy）变量 # https://gohugo.io/variables/taxonomy/\n​\tHugo 的分类法系统向分类法和条目模板公开了变量。\n分类模板 # ​\t由分类法模板渲染的页面的 .Kind 设置为 taxonomy，.Type 设置为分类法名称。\n​\t在分类法模板中，您可以访问 .Site、.Page、.Section 和 .File 变量，以及以下分类法变量：\n.Data.Singular # ​\t分类法的单数形式名称（例如， tags =\u0026gt; tag）。\n.Data.Plural # ​\t分类法的复数形式名称（例如， tags =\u0026gt; tags）。\n.Data.Pages # ​\t与此分类法相关的条目页面集合。别名为 .Pages 。\n.Data.Terms # ​\t一个与此分类法相关的条目和加权页面的映射。\n.Data.Terms.Alphabetical # ​\t一个与此分类法相关的条目和加权页面的映射，按字母顺序升序排序。使用 .Data.Terms.Alphabetical.Reverse 可以反转排序顺序。\n.Data.Terms.ByCount # ​\t一个与此分类法相关的条目和加权页面的映射，按计数升序排序。使用 .Data.Terms.ByCount.Reverse 可以反转排序顺序。\nTerm templates # ​\t由条目模板渲染的页面的 .Kind 设置为 term，.Type 设置为分类法名称。\nIn term templates you may access .Site, .Page. .Section, and .File variables, as well as the following term variables:\n在分类项模板中，您可以访问 .Site、.Page、.Section 和 .File 变量，以及以下分类项变量：\n​\t在分类法条目模板中，您可以访问 .Site、.Page、.Section 和 .File 变量，以及以下条目变量：\n.Data.Singular # ​\t分类法的单数形式名称（例如 tags =\u0026gt; tag）。\n.Data.Plural # ​\t分类法的复数形式名称（例如 tags =\u0026gt; tags）。\n.Data.Pages # ​\t与此条目相关的内容页面集合。别名为 .Pages 。\n.Data.Term # ​\t条目本身（例如， tag-one）。\n从任何模板访问分类法数据 # ​\t从任何模板中访问整个分类法数据结构，使用 site.Taxonomies。这将返回一个包含分类法、条目和与每个条目相关的加权内容页面集合的映射。例如：\n{ \u0026#34;categories\u0026#34;: { \u0026#34;news\u0026#34;: [ { \u0026#34;Weight\u0026#34;: 0, \u0026#34;Page\u0026#34;: { \u0026#34;Title\u0026#34;: \u0026#34;Post 1\u0026#34;, \u0026#34;Date\u0026#34;: \u0026#34;2022-12-18T15:13:35-08:00\u0026#34; ... } }, { \u0026#34;Weight\u0026#34;: 0, \u0026#34;Page\u0026#34;: { \u0026#34;Title\u0026#34;: \u0026#34;Post 2\u0026#34;, \u0026#34;Date\u0026#34;: \u0026#34;2022-12-18T15:13:46-08:00\u0026#34;, ... } } ] }, \u0026#34;tags\u0026#34;: { \u0026#34;international\u0026#34;: [ { \u0026#34;Weight\u0026#34;: 0, \u0026#34;Page\u0026#34;: { \u0026#34;Title\u0026#34;: \u0026#34;Post 1\u0026#34;, \u0026#34;Date\u0026#34;: \u0026#34;2021-01-01T00:00:00Z\u0026#34; ... } } ] } } Access a subset of the taxonomy data structure by chaining one or more identifiers, or by using the index function with one or more keys. For example, to access the collection of weighted content pages related to the news category, use either of the following:\n​\t通过链接一个或多个标识符，或使用 index 函数加上一个或多个键，可以访问分类法数据结构的子集。例如，要访问与新闻类别相关的加权内容页面集合，请使用以下任一方法：\n{{ $pages := site.Taxonomies.categories.news }} {{ $pages := index site.Taxonomies \u0026#34;categories\u0026#34; \u0026#34;news\u0026#34; }} ​\t例如，将整个分类法数据结构渲染为嵌套的无序列表：\n\u0026lt;ul\u0026gt; {{ range $taxonomy, $terms := site.Taxonomies }} \u0026lt;li\u0026gt; {{ with site.GetPage $taxonomy }} \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;ul\u0026gt; {{ range $term, $weightedPages := $terms }} \u0026lt;li\u0026gt; {{ with site.GetPage (path.Join $taxonomy $term) }} \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/li\u0026gt; \u0026lt;ul\u0026gt; {{ range $weightedPages }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt; {{ .LinkTitle }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; ​\t有关更多示例，请参见分类法模板。\n"},{"id":42,"href":"/hugo/contentmanagement/frontmatter/","title":"前置元数据","section":"内容管理","content":" Front matter - 前置元数据 # https://gohugo.io/content-management/front-matter/\n​\tHugo 允许您在您的内容文件中添加 YAML、TOML 或 JSON 格式的前置元数据。\n​\t前置元数据允许您将元数据附加到内容类型实例中，即嵌入在内容文件内部，这是 Hugo 赋予其强大功能的众多特点之一。\n前置元数据格式 # ​\tHugo 支持四种前置元数据格式，每种格式都有其自己的标识符。\nTOML\n由打开和关闭 +++ 标识。\nYAML\n由打开和关闭 --- 标识。\nJSON\n由 \u0026lsquo;{\u0026rsquo; 和 \u0026lsquo;}\u0026rsquo; 包围的单个 JSON 对象，后跟一个换行符。\nORG\n​\t由一组以\u0026rsquo;#+KEY: VALUE\u0026lsquo;格式呈现的Org模式关键字组成。任何不以#+开头的行都会结束前置元数据部分。关键字值可以是字符串（#+KEY: VALUE）或空格分隔的字符串列表（#+KEY[]: VALUE_1 VALUE_2）。\n示例 # === \u0026ldquo;yaml\u0026rdquo;\n``` yaml categories: - Development - VIM date: \u0026quot;2012-04-06\u0026quot; description: spf13-vim is a cross platform distribution of vim plugins and resources for Vim. slug: spf13-vim-3-0-release-and-new-website tags: - .vimrc - plugins - spf13-vim - vim title: spf13-vim 3.0 release and new website ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml categories = ['Development', 'VIM'] date = '2012-04-06' description = 'spf13-vim is a cross platform distribution of vim plugins and resources for Vim.' slug = 'spf13-vim-3-0-release-and-new-website' tags = ['.vimrc', 'plugins', 'spf13-vim', 'vim'] title = 'spf13-vim 3.0 release and new website' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;categories\u0026quot;: [ \u0026quot;Development\u0026quot;, \u0026quot;VIM\u0026quot; ], \u0026quot;date\u0026quot;: \u0026quot;2012-04-06\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;spf13-vim is a cross platform distribution of vim plugins and resources for Vim.\u0026quot;, \u0026quot;slug\u0026quot;: \u0026quot;spf13-vim-3-0-release-and-new-website\u0026quot;, \u0026quot;tags\u0026quot;: [ \u0026quot;.vimrc\u0026quot;, \u0026quot;plugins\u0026quot;, \u0026quot;spf13-vim\u0026quot;, \u0026quot;vim\u0026quot; ], \u0026quot;title\u0026quot;: \u0026quot;spf13-vim 3.0 release and new website\u0026quot; } ``` 前置元数据变量 # 预定义 # ​\t有一些预定义变量是 Hugo 能够识别的。请参阅页面变量以了解如何在模板中调用这些预定义变量。\naliases\n一个由一个或多个别名（例如，已更名的内容的旧发布路径）组成的数组，这些别名将在输出目录结构中创建。详见别名。\naudio\n一个路径数组，用于与页面相关的音频文件；用于填充 og:audio 的 opengraph 内部模板。\ncascade\n一个前置元数据键值对映射，其值会传递给页面的子代，除非被自身或更近的祖先级别的 cascade 覆盖。详见前置元数据级联。\ndate\n分配给此页面的日期时间。通常从前置元数据中的date字段获取，但此行为是可配置的。\ndescription\n内容的描述。\ndraft\n如果为 true，则不会渲染该内容，除非在 hugo 命令中传递 --buildDrafts 或 -D标志。\nexpiryDate\n内容应不再由 Hugo 发布的日期时间；除非在 hugo 命令中传递 --buildExpired 或-E标志，否则不会渲染已过期的内容。\nheadless\n如果为 true，则将叶子bundle设置为headless。\nimages\n一个路径数组，用于与该页面相关的图像；用于内部模板，例如 _internal/twitter_cards.html。\nisCJKLanguage\n如果为 true，则 Hugo 将明确地将内容视为 CJK 语言；.Summary 和 .WordCount 在 CJK 语言中均能正常工作。\nkeywords\n该内容的元关键字。\nlayout\n在渲染内容时 Hugo 应从查找顺序中选择的布局。如果在前置元数据中未指定type，则 Hugo 将在与内容所属章节对应的布局目录中查找同名的布局。请参阅内容类型。\nlastmod\n该内容上次修改的日期时间。\nlinkTitle\n用于创建链接到内容；如果设置，则 Hugo 默认使用title之前的linktitle。Hugo 还可以按照linktitle对内容列表进行排序。\nmarkup\n实验性功能；指定\u0026quot;rst\u0026quot;表示使用reStructuredText（需要rst2html）或\u0026quot;md\u0026quot;（默认）表示使用Markdown。\noutputs\n允许您指定特定于该内容的输出格式。请参见输出格式。\npublishDate\n如果在将来，则不会呈现内容，除非传递--buildFuture或-F标志给hugo命令。\nresources\n用于配置页面捆绑资源。请参见页面资源。\nseries\n该页面属于的系列数组，作为series分类法的子集；被内部模板opengraph用于填充og:see_also。\nslug\n覆盖URL路径的最后一段。不适用于章节页面。有关详细信息，请参见URL管理。\nsummary\n在.Summary页面变量中提供文章摘要时使用的文本；有关详细信息，请参见内容摘要部分。\ntitle\n该内容的标题。\ntype\n该内容的类型；如果在前置元数据中未指定，则该值将自动从目录（即章节）派生。\nurl\n覆盖整个URL路径。适用于常规页面和章节页面。有关详细信息，请参见URL管理。\nvideos\n页面相关视频路径的数组；被内部模板opengraph用于填充og:video。\nweight\n用于在列表中排序内容。较低的权重具有更高的优先级。因此，具有较低权重的内容将首先出现。如果设置了权重，则权重应为非零，因为0会被解释为未设置权重。\n\u0026lt;taxonomies\u0026gt;\n索引的复数形式的字段名称。请参见上面的前置元数据示例中的tags和categories。请注意，用户定义的分类法（taxonomies）的复数形式不能与任何预定义的前置元数据变量相同。\n​\t如果 slug 和 url 都不存在，并且在您的站点配置文件中未配置永久链接，Hugo 将使用您的内容文件名来创建输出 URL。请参见 Hugo 中的内容组织以了解 Hugo 中路径的说明，以及 URL 管理以了解自定义 Hugo 的默认行为的方式。\n用户自定义 # ​\t您可以任意添加字段到您的前置元数据中以满足您的需求。这些用户自定义的键值被放入一个.Params变量中，以供在您的模板中使用。\n​\t以下字段可以通过.Params.include_toc和.Params.show_comments进行访问。变量章节提供有关在模板中使用Hugo的页面级别和站点级别变量的更多信息。\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml include_toc: true show_comments: false ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml include_toc = true show_comments = false ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;include_toc\u0026quot;: true, \u0026quot;show_comments\u0026quot;: false } ``` 前置元数据级联 # ​\t只要在保留的cascade前置元数据键下定义，任何节点或章节都可以向后代传递一组前置元数据值。\n目标特定页面 # The cascade block can be a slice with a optional _target keyword, allowing for multiple cascade values targeting different page sets.\n​\tcascade块可以是一个切片，其中包含一个可选的_target关键字，允许多个cascade值针对不同的页面集。\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml cascade: - _target: kind: page lang: en path: /blog/** background: yosemite.jpg - _target: kind: section background: goldenbridge.jpg title: Blog ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml title = 'Blog' [[cascade]] background = 'yosemite.jpg' [cascade._target] kind = 'page' lang = 'en' path = '/blog/**' [[cascade]] background = 'goldenbridge.jpg' [cascade._target] kind = 'section' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;cascade\u0026quot;: [ { \u0026quot;_target\u0026quot;: { \u0026quot;kind\u0026quot;: \u0026quot;page\u0026quot;, \u0026quot;lang\u0026quot;: \u0026quot;en\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/blog/**\u0026quot; }, \u0026quot;background\u0026quot;: \u0026quot;yosemite.jpg\u0026quot; }, { \u0026quot;_target\u0026quot;: { \u0026quot;kind\u0026quot;: \u0026quot;section\u0026quot; }, \u0026quot;background\u0026quot;: \u0026quot;goldenbridge.jpg\u0026quot; } ], \u0026quot;title\u0026quot;: \u0026quot;Blog\u0026quot; } ``` ​\t可用于_target的关键字：\npath\n匹配/content下的内容路径的通配符模式。期望是Unix风格的斜杠。注意，这是虚拟路径，因此它从挂载根开始。匹配支持双星号，因此您可以匹配模式如/blog/*/**，以匹配从第三层及以下的任何内容。\nkind\n匹配该页面种类的通配符模式，例如\u0026quot;{home, section}\u0026quot;。\nlang\n匹配该页面语言的通配符模式，例如\u0026quot;{en, sv}\u0026quot;。\nenvironment\n匹配构建环境的通配符模式，例如\u0026quot;{production, development}\u0026quot;\n​\t以上任何一个都可以省略。\n示例 # 在 content/blog/_index.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml cascade: banner: images/typewriter.jpg title: Blog ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml title = 'Blog' [cascade] banner = 'images/typewriter.jpg' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;cascade\u0026quot;: { \u0026quot;banner\u0026quot;: \u0026quot;images/typewriter.jpg\u0026quot; }, \u0026quot;title\u0026quot;: \u0026quot;Blog\u0026quot; } ``` 在上面的示例中，除非：\n该子页面已经设置了自己的banner值 或更近的祖先节点已经设置了自己的cascade.banner值 否则博客章节页面和其后代页面将在调用.Params.banner时将返回images/typewriter.jpg。\n通过前置元数据对内容进行排序 # ​\t您可以在内容的前置元数据中分配特定于内容的weight。这些值对于列表视图中的排序非常有用。您可以使用weight对内容进行排序，使用_weight的约定对分类法（taxonomy）内的内容进行排序。请参阅对有序列表进行排序和分组，以了解如何使用weight在列表视图中组织您的内容。\n覆盖全局 Markdown 配置 # ​\t可以在内容的前置元数据中设置某些Markdown渲染选项，作为对项目配置中设置的Rendering选项的覆盖。\n前置元数据格式规范 # TOML 规范 YAML 规范 JSON 规范 另请参阅 # 原型 配置 Hugo 数据模板 Taxonomies Taxonomy Templates "},{"id":43,"href":"/hugo/abouthugo/license/","title":"Apache License","section":"关于Hugo","content":" Apache License # https://gohugo.io/about/license/\nHugo v0.15 and later are released under the Apache 2.0 license.\nHugo v0.15 and later are released under the Apache 2.0 license. Earlier versions of Hugo were released under the Simple Public License.\nVersion 2.0, January 2004 https://www.apache.org/licenses/LICENSE-2.0\nTerms and Conditions for use, reproduction, and distribution\n1. Definitions # \u0026ldquo;License\u0026rdquo; shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\u0026ldquo;Licensor\u0026rdquo; shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\u0026ldquo;Legal Entity\u0026rdquo; shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \u0026ldquo;control\u0026rdquo; means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\u0026ldquo;You\u0026rdquo; (or \u0026ldquo;Your\u0026rdquo;) shall mean an individual or Legal Entity exercising permissions granted by this License.\n\u0026ldquo;Source\u0026rdquo; form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\u0026ldquo;Object\u0026rdquo; form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\u0026ldquo;Work\u0026rdquo; shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\u0026ldquo;Derivative Works\u0026rdquo; shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\u0026ldquo;Contribution\u0026rdquo; shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \u0026ldquo;submitted\u0026rdquo; means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \u0026ldquo;Not a Contribution.\u0026rdquo;\n\u0026ldquo;Contributor\u0026rdquo; shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n2. Grant of Copyright License # Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n3. Grant of Patent License # Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n4. Redistribution # You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n(a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \u0026ldquo;NOTICE\u0026rdquo; text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n5. Submission of Contributions # Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n6. Trademarks # This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n7. Disclaimer of Warranty # Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u0026ldquo;AS IS\u0026rdquo; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n8. Limitation of Liability # In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n9. Accepting Warranty or Additional Liability # While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work # To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets [] replaced with your own identifying information. (Don’t include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \u0026ldquo;printed page\u0026rdquo; as the copyright notice for easier identification within third-party archives.\napache-notice.txt\nCopyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. "},{"id":44,"href":"/hugo/templ/","title":"模板","section":"文档","content":"https://gohugo.io/templates/introduction/\n"},{"id":45,"href":"/hugo/gettingstarted/configurationmarkup/","title":"Configure Markup","section":"开始入门","content":" Configure Markup # How to handle Markdown and other markup related configuration.\nConfigure Markup # See Goldmark for settings related to the default Markdown handler in Hugo.\nBelow are all markup related configuration in Hugo with their default settings:\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml markup: asciidocExt: attributes: {} backend: html5 extensions: [] failureLevel: fatal noHeaderOrFooter: true preserveTOC: false safeMode: unsafe sectionNumbers: false trace: false verbose: false workingFolderCurrent: false defaultMarkdownHandler: goldmark goldmark: extensions: definitionList: true footnote: true linkify: true linkifyProtocol: https strikethrough: true table: true taskList: true typographer: true parser: attribute: block: false title: true autoHeadingID: true autoHeadingIDType: github wrapStandAloneImageWithinParagraph: true renderer: hardWraps: false unsafe: false xhtml: false highlight: anchorLineNos: false codeFences: true guessSyntax: false hl_Lines: \u0026quot;\u0026quot; hl_inline: false lineAnchors: \u0026quot;\u0026quot; lineNoStart: 1 lineNos: false lineNumbersInTable: true noClasses: true noHl: false style: monokai tabWidth: 4 tableOfContents: endLevel: 3 ordered: false startLevel: 2 ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [markup] defaultMarkdownHandler = 'goldmark' [markup.asciidocExt] backend = 'html5' extensions = [] failureLevel = 'fatal' noHeaderOrFooter = true preserveTOC = false safeMode = 'unsafe' sectionNumbers = false trace = false verbose = false workingFolderCurrent = false [markup.asciidocExt.attributes] [markup.goldmark] [markup.goldmark.extensions] definitionList = true footnote = true linkify = true linkifyProtocol = 'https' strikethrough = true table = true taskList = true typographer = true [markup.goldmark.parser] autoHeadingID = true autoHeadingIDType = 'github' wrapStandAloneImageWithinParagraph = true [markup.goldmark.parser.attribute] block = false title = true [markup.goldmark.renderer] hardWraps = false unsafe = false xhtml = false [markup.highlight] anchorLineNos = false codeFences = true guessSyntax = false hl_Lines = '' hl_inline = false lineAnchors = '' lineNoStart = 1 lineNos = false lineNumbersInTable = true noClasses = true noHl = false style = 'monokai' tabWidth = 4 [markup.tableOfContents] endLevel = 3 ordered = false startLevel = 2 ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;markup\u0026quot;: { \u0026quot;asciidocExt\u0026quot;: { \u0026quot;attributes\u0026quot;: {}, \u0026quot;backend\u0026quot;: \u0026quot;html5\u0026quot;, \u0026quot;extensions\u0026quot;: [], \u0026quot;failureLevel\u0026quot;: \u0026quot;fatal\u0026quot;, \u0026quot;noHeaderOrFooter\u0026quot;: true, \u0026quot;preserveTOC\u0026quot;: false, \u0026quot;safeMode\u0026quot;: \u0026quot;unsafe\u0026quot;, \u0026quot;sectionNumbers\u0026quot;: false, \u0026quot;trace\u0026quot;: false, \u0026quot;verbose\u0026quot;: false, \u0026quot;workingFolderCurrent\u0026quot;: false }, \u0026quot;defaultMarkdownHandler\u0026quot;: \u0026quot;goldmark\u0026quot;, \u0026quot;goldmark\u0026quot;: { \u0026quot;extensions\u0026quot;: { \u0026quot;definitionList\u0026quot;: true, \u0026quot;footnote\u0026quot;: true, \u0026quot;linkify\u0026quot;: true, \u0026quot;linkifyProtocol\u0026quot;: \u0026quot;https\u0026quot;, \u0026quot;strikethrough\u0026quot;: true, \u0026quot;table\u0026quot;: true, \u0026quot;taskList\u0026quot;: true, \u0026quot;typographer\u0026quot;: true }, \u0026quot;parser\u0026quot;: { \u0026quot;attribute\u0026quot;: { \u0026quot;block\u0026quot;: false, \u0026quot;title\u0026quot;: true }, \u0026quot;autoHeadingID\u0026quot;: true, \u0026quot;autoHeadingIDType\u0026quot;: \u0026quot;github\u0026quot;, \u0026quot;wrapStandAloneImageWithinParagraph\u0026quot;: true }, \u0026quot;renderer\u0026quot;: { \u0026quot;hardWraps\u0026quot;: false, \u0026quot;unsafe\u0026quot;: false, \u0026quot;xhtml\u0026quot;: false } }, \u0026quot;highlight\u0026quot;: { \u0026quot;anchorLineNos\u0026quot;: false, \u0026quot;codeFences\u0026quot;: true, \u0026quot;guessSyntax\u0026quot;: false, \u0026quot;hl_Lines\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;hl_inline\u0026quot;: false, \u0026quot;lineAnchors\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;lineNoStart\u0026quot;: 1, \u0026quot;lineNos\u0026quot;: false, \u0026quot;lineNumbersInTable\u0026quot;: true, \u0026quot;noClasses\u0026quot;: true, \u0026quot;noHl\u0026quot;: false, \u0026quot;style\u0026quot;: \u0026quot;monokai\u0026quot;, \u0026quot;tabWidth\u0026quot;: 4 }, \u0026quot;tableOfContents\u0026quot;: { \u0026quot;endLevel\u0026quot;: 3, \u0026quot;ordered\u0026quot;: false, \u0026quot;startLevel\u0026quot;: 2 } } } ``` See each section below for details.\nGoldmark # Goldmark is from Hugo 0.60 the default library used for Markdown. It’s fast, it’s CommonMark compliant and it’s very flexible.\nThis is the default configuration:\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml markup: goldmark: extensions: definitionList: true footnote: true linkify: true linkifyProtocol: https strikethrough: true table: true taskList: true typographer: true parser: attribute: block: false title: true autoHeadingID: true autoHeadingIDType: github wrapStandAloneImageWithinParagraph: true renderer: hardWraps: false unsafe: false xhtml: false ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [markup] [markup.goldmark] [markup.goldmark.extensions] definitionList = true footnote = true linkify = true linkifyProtocol = 'https' strikethrough = true table = true taskList = true typographer = true [markup.goldmark.parser] autoHeadingID = true autoHeadingIDType = 'github' wrapStandAloneImageWithinParagraph = true [markup.goldmark.parser.attribute] block = false title = true [markup.goldmark.renderer] hardWraps = false unsafe = false xhtml = false ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;markup\u0026quot;: { \u0026quot;goldmark\u0026quot;: { \u0026quot;extensions\u0026quot;: { \u0026quot;definitionList\u0026quot;: true, \u0026quot;footnote\u0026quot;: true, \u0026quot;linkify\u0026quot;: true, \u0026quot;linkifyProtocol\u0026quot;: \u0026quot;https\u0026quot;, \u0026quot;strikethrough\u0026quot;: true, \u0026quot;table\u0026quot;: true, \u0026quot;taskList\u0026quot;: true, \u0026quot;typographer\u0026quot;: true }, \u0026quot;parser\u0026quot;: { \u0026quot;attribute\u0026quot;: { \u0026quot;block\u0026quot;: false, \u0026quot;title\u0026quot;: true }, \u0026quot;autoHeadingID\u0026quot;: true, \u0026quot;autoHeadingIDType\u0026quot;: \u0026quot;github\u0026quot;, \u0026quot;wrapStandAloneImageWithinParagraph\u0026quot;: true }, \u0026quot;renderer\u0026quot;: { \u0026quot;hardWraps\u0026quot;: false, \u0026quot;unsafe\u0026quot;: false, \u0026quot;xhtml\u0026quot;: false } } } } ``` For details on the extensions, refer to this section of the Goldmark documentation\nSome settings explained:\nhardWraps\nBy default, Goldmark ignores newlines within a paragraph. Set to true to render newlines as \u0026lt;br\u0026gt; elements.\nunsafe\nBy default, Goldmark does not render raw HTMLs and potentially dangerous links. If you have lots of inline HTML and/or JavaScript, you may need to turn this on.\ntypographer\nThis extension substitutes punctuations with typographic entities like smartypants.\nattribute\nEnable custom attribute support for titles and blocks by adding attribute lists inside single curly brackets ({.myclass class=\u0026quot;class1 class2\u0026quot; }) and placing it after the Markdown element it decorates, on the same line for titles and on a new line directly below for blocks.\nHugo supports adding attributes (e.g. CSS classes) to Markdown blocks, e.g. tables, lists, paragraphs etc.\nA blockquote with a CSS class:\n\u0026gt; foo \u0026gt; bar {.myclass} There are some current limitations: For tables you can currently only apply it to the full table, and for lists the ul/ol-nodes only, e.g.:\n* Fruit * Apple * Orange * Banana {.fruits} * Dairy * Milk * Cheese {.dairies} {.list} Note that attributes in code fences must come after the opening tag, with any other highlighting processing instruction, e.g.:\n```go {.myclass linenos=table,hl_lines=[8,\u0026#34;15-17\u0026#34;],linenostart=199} // ... code ``` autoHeadingIDType (“github”)\nThe strategy used for creating auto IDs (anchor names). Available types are github, github-ascii and blackfriday. github produces GitHub-compatible IDs, github-ascii will drop any non-Ascii characters after accent normalization, and blackfriday will make the IDs compatible with Blackfriday, the default Markdown engine before Hugo 0.60. Note that if Goldmark is your default Markdown engine, this is also the strategy used in the anchorize template func.\nHighlight # This is the default highlight configuration. Note that some of these settings can be set per code block, see Syntax Highlighting.\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml markup: highlight: anchorLineNos: false codeFences: true guessSyntax: false hl_Lines: \u0026quot;\u0026quot; hl_inline: false lineAnchors: \u0026quot;\u0026quot; lineNoStart: 1 lineNos: false lineNumbersInTable: true noClasses: true noHl: false style: monokai tabWidth: 4 ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [markup] [markup.highlight] anchorLineNos = false codeFences = true guessSyntax = false hl_Lines = '' hl_inline = false lineAnchors = '' lineNoStart = 1 lineNos = false lineNumbersInTable = true noClasses = true noHl = false style = 'monokai' tabWidth = 4 ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;markup\u0026quot;: { \u0026quot;highlight\u0026quot;: { \u0026quot;anchorLineNos\u0026quot;: false, \u0026quot;codeFences\u0026quot;: true, \u0026quot;guessSyntax\u0026quot;: false, \u0026quot;hl_Lines\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;hl_inline\u0026quot;: false, \u0026quot;lineAnchors\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;lineNoStart\u0026quot;: 1, \u0026quot;lineNos\u0026quot;: false, \u0026quot;lineNumbersInTable\u0026quot;: true, \u0026quot;noClasses\u0026quot;: true, \u0026quot;noHl\u0026quot;: false, \u0026quot;style\u0026quot;: \u0026quot;monokai\u0026quot;, \u0026quot;tabWidth\u0026quot;: 4 } } } ``` For style, see these galleries:\nShort snippets Long snippets For CSS, see Generate Syntax Highlighter CSS.\nTable Of Contents # config.\n=== \u0026ldquo;yaml\u0026rdquo;\n```yaml markup: tableOfContents: endLevel: 3 ordered: false startLevel: 2 ``` === \u0026ldquo;toml\u0026rdquo;\n```toml [markup] [markup.tableOfContents] endLevel = 3 ordered = false startLevel = 2 ``` === \u0026ldquo;json\u0026rdquo;\n```json { \u0026quot;markup\u0026quot;: { \u0026quot;tableOfContents\u0026quot;: { \u0026quot;endLevel\u0026quot;: 3, \u0026quot;ordered\u0026quot;: false, \u0026quot;startLevel\u0026quot;: 2 } } } ``` These settings only works for the Goldmark renderer:\nstartLevel\nThe heading level, values starting at 1 (h1), to start render the table of contents.\nendLevel\nThe heading level, inclusive, to stop render the table of contents.\nordered\nWhether or not to generate an ordered list instead of an unordered list.\nMarkdown Render Hooks # See Markdown Render Hooks.\nSee Also # Configure Hugo Shortcodes Syntax Highlighting highlight "},{"id":46,"href":"/hugo/contentmanagement/buildoptions/","title":"构建选项","section":"内容管理","content":" Build Options - 构建选项 # https://gohugo.io/content-management/build-options/\n​\t构建选项有助于定义 Hugo 在构建站点时如何处理给定页面。\n​\t它们存储在名为 _build 的保留前置元数据对象中，具有以下默认值：\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml _build: list: always publishResources: true render: always ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [_build] list = 'always' publishResources = true render = 'always' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;_build\u0026quot;: { \u0026quot;list\u0026quot;: \u0026quot;always\u0026quot;, \u0026quot;publishResources\u0026quot;: true, \u0026quot;render\u0026quot;: \u0026quot;always\u0026quot; } } ``` render # ​\t如果设置为 always，该页面将被视为已发布页面，并保留其专用输出文件（index.html 等）和永久链接。\n​\t我们从布尔值将此属性扩展为枚举，从 Hugo 0.76.0 开始，有效值包括：\nnever\n该页面不会包含在任何页面集合中。\nalways (default)\n该页面将被渲染到磁盘并获得 RelPermalink 等。\nlink\n该页面不会被渲染到磁盘，但会获得 RelPermalink。\nlist # ​\t请注意，我们从布尔值将此属性扩展为枚举，从 Hugo 0.68.0 开始，有效值包括：\nnever\n该页面不会包含在任何页面集合中。\nalways (default)\n该页面将包含在所有页面集合中，例如 site.RegularPages、$page.Pages。\nlocal\n该页面将包含在任何本地页面集合中，例如 $page.RegularPages、$page.Pages。其一个用例是创建完全可导航但无头内容章节。\n​\t如果为 true，则该页面将被视为项目集合的一部分，并在适当时通过 Hugo 的列表方法（.Pages、.RegularPages 等）返回。\npublishResources # ​\t如果设置为 true，则 Bundle 的资源将被发布。将其设置为 false 将仍会按需发布资源（当从模板调用资源的 .Permalink 或 .RelPermalink 时），但会跳过其他资源。\n​\t无论其构建选项如何，任何页面都始终可以使用 .GetPage 方法访问。\n说明性用例 # 不发布某个页面 # ​\t项目需要一个\u0026quot;Who We Are\u0026quot;内容文件，其中包括前置元数据和正文，用于主页但不用于其他任何地方。\ncontent/who-we-are.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- _build: list: false render: false title: Who we are --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ title = 'Who we are' [_build] list = false render = false +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;_build\u0026quot;: { \u0026quot;list\u0026quot;: false, \u0026quot;render\u0026quot;: false }, \u0026quot;title\u0026quot;: \u0026quot;Who we are\u0026quot; } ``` layouts/index.html\n\u0026lt;section id=\u0026#34;who-we-are\u0026#34;\u0026gt; {{ with site.GetPage \u0026#34;who-we-are\u0026#34; }} {{ .Content }} {{ end }} \u0026lt;/section\u0026gt; 列出未发布的页面 # ​\t站点需要展示一些可用的百余个\u0026quot;推荐（testimonials）\u0026ldquo;内容文件，而不发布其中任何一个。\n​\t为了避免在每个推荐中设置构建选项，可以在推荐章节的内容文件上使用cascade。\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml _build: render: true cascade: _build: list: true render: false title: Testimonials ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml title = 'Testimonials' [_build] render = true [cascade] [cascade._build] list = true render = false ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;_build\u0026quot;: { \u0026quot;render\u0026quot;: true }, \u0026quot;cascade\u0026quot;: { \u0026quot;_build\u0026quot;: { \u0026quot;list\u0026quot;: true, \u0026quot;render\u0026quot;: false } }, \u0026quot;title\u0026quot;: \u0026quot;Testimonials\u0026quot; } ``` layouts/_defaults/testimonials.html\n\u0026lt;section id=\u0026#34;testimonials\u0026#34;\u0026gt; {{ range first 5 .Pages }} \u0026lt;blockquote cite=\u0026#34;{{ .Params.cite }}\u0026#34;\u0026gt; {{ .Content }} \u0026lt;/blockquote\u0026gt; {{ end }} \u0026lt;/section\u0026gt; 另请参阅 # .Param 原型 评论 内容组织 前置元数据 "},{"id":47,"href":"/hugo/templ/listtemplates/","title":"在Hugo中的内容列表","section":"模板","content":" Lists of Content in Hugo - 在Hugo中的内容列表 # https://gohugo.io/templates/lists/\n​\t列表在 Hugo 中在渲染站点主页、章节页面、分类列表或分类术语列表时具有特定的含义和用法。\n什么是列表页面模板？ # ​\t列表页面模板是用于在单个 HTML 页面中渲染多个内容的模板。唯一的例外是主页，它仍然是一个列表，但有自己的专用模板。\n​\tHugo 在其最真实的意义上使用列表这个术语；即按字母或数字顺序的一系列材料。Hugo 在任何传统上列出内容的输出 HTML 页面上都使用列表模板：\n分类术语页面 分类列表页面 章节列表页面 RSS ​\t有关模板查找顺序，请参见模板查找。\n​\t列表页面的概念源于Web的分层心理模型，最好通过可视化进行演示：\n列表默认值 # 默认模板 # ​\t由于章节列表和分类列表（注意，不是分类术语列表）在模板方面都是列表，因此它们在查找顺序中都有相同的终止默认值 _default/list.html 或 themes/\u0026lt;THEME\u0026gt;/layouts/_default/list.html。此外，章节列表和分类列表在 _default 中都有自己的默认列表模板。\n​\t有关完整参考，请参阅模板查找顺序。\n将内容和前置元数据添加到列表页 # ​\t自从 v0.18 以来，Hugo 中的所有内容都是Page。这意味着列表页面和主页可以有关联的内容文件（即_index.md），其中包含页面元数据（即前置元数据）和内容。\n​\t这种新模型允许您通过 .Params 包含特定于列表的前置元数据，并且意味着列表模板（例如 layouts/_default/list.html）可以访问所有页面变量。\n​\t重要的是要注意，所有 _index.md 内容文件都将根据列表模板而不是单个页面模板进行渲染。\n示例项目目录 # ​\t以下是一个典型的Hugo项目的content目录的示例：\n. ... ├── content | ├── posts | | ├── _index.md | | ├── post-01.md | | └── post-02.md | └── quote | | ├── quote-01.md | | └── quote-02.md ... ​\t使用上述示例，假设您在content/posts/_index.md中有以下内容：\ncontent/posts/_index.md\n--- title: My Go Journey date: 2017-03-23 publishdate: 2017-03-24 --- I decided to start learning Go in March 2017. Follow my journey through this new blog. ​\t现在，您可以在列表模板中访问此_index.md的内容：\nlayouts/_default/list.html\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;main\u0026gt; \u0026lt;article\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;{{ .Title} }\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;!-- \u0026#34;{{ .Content} }\u0026#34; pulls from the markdown content of the corresponding _index.md --\u0026gt; {{ .Content }} \u0026lt;/article\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;!-- Ranges through content/posts/*.md --\u0026gt; {{ range .Pages }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;2006-01-02\u0026#34; }} | {{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/main\u0026gt; {{ end }} ​\t上面将输出以下 HTML：\nexample.com/posts/index.html\n\u0026lt;!--top of your baseof code--\u0026gt; \u0026lt;main\u0026gt; \u0026lt;article\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;My Go Journey\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;p\u0026gt;I decided to start learning Go in March 2017.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Follow my journey through this new blog.\u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/posts/post-01/\u0026#34;\u0026gt;Post 1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/posts/post-02/\u0026#34;\u0026gt;Post 2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;!--bottom of your baseof--\u0026gt; 没有 _index.md 的列表页面 # ​\t您不必为每个列表页面（即章节、分类、分类术语等）或主页创建 _index.md 文件。如果 Hugo 在渲染列表模板时在相应的内容章节中找不到 _index.md，则将创建该页面，但没有 {{ .Content }}，只有 .Title 等的默认值。\n​\t将相同的 layouts/_default/list.html 模板应用于上面的 quotes 章节将渲染以下输出。请注意，quotes 没有可供提取的 _index.md 文件：\nexample.com/quote/index.html\n\u0026lt;!--baseof--\u0026gt; \u0026lt;main\u0026gt; \u0026lt;article\u0026gt; \u0026lt;header\u0026gt; \u0026lt;!-- Hugo assumes that .Title is the name of the section since there is no _index.md content file from which to pull a \u0026#34;title:\u0026#34; field --\u0026gt; \u0026lt;h1\u0026gt;Quotes\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://example.com/quote/quotes-01/\u0026#34;\u0026gt;Quote 1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://example.com/quote/quotes-02/\u0026#34;\u0026gt;Quote 2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;!--baseof--\u0026gt; 默认情况下，Hugo会将列表标题进行复数化处理，因此在使用 .Title 页面变量时，quote部分会变为\u0026quot;Quotes\u0026quot;。您可以通过在站点配置中使用pluralizeListTitles指令来更改此设置。\n示例列表模板 # 章节模板 # ​\t这个列表模板是从spf13.com的模板进行了略微修改。它使用局部模板来渲染页面的外壳，而不是使用基础模板。下面的示例还使用了内容视图模板 li.html 或 summary.html。\nlayouts/section/posts.html\n{{ partial \u0026#34;header.html\u0026#34; . }} {{ partial \u0026#34;subheader.html\u0026#34; . }} \u0026lt;main\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;!-- Renders the li.html content view for each content/posts/*.md --\u0026gt; {{ range .Pages }} {{ .Render \u0026#34;li\u0026#34; }} {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; {{ partial \u0026#34;footer.html\u0026#34; . }} 分类模板 # layouts/_default/taxonomy.html\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;main\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;!-- ranges through each of the content files associated with a particular taxonomy term and renders the summary.html content view --\u0026gt; {{ range .Pages }} {{ .Render \u0026#34;summary\u0026#34; }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; {{ end }} 内容排序 # ​\tHugo 根据您在前置元数据中提供的内容来渲染列表。除了合理的默认值外，Hugo 还提供了多种方法，以便在列表模板内快速进行内容排序：\nDefault: Weight \u0026gt; Date \u0026gt; LinkTitle \u0026gt; FilePath # layouts/partials/default-order.html\n\u0026lt;ul\u0026gt; {{ range .Pages }} \u0026lt;li\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;time\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 按权重 # ​\t较低的权重具有较高的优先级。因此，权重较低的内容将排在前面。\nlayouts/partials/by-weight.html\n\u0026lt;ul\u0026gt; {{ range .Pages.ByWeight }} \u0026lt;li\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;time\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 按日期 # layouts/partials/by-date.html\n\u0026lt;ul\u0026gt; \u0026lt;!-- orders content according to the \u0026#34;date\u0026#34; field in front matter --\u0026gt; {{ range .Pages.ByDate }} \u0026lt;li\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;time\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 按发布日期 # layouts/partials/by-publish-date.html\n\u0026lt;ul\u0026gt; \u0026lt;!-- orders content according to the \u0026#34;publishdate\u0026#34; field in front matter --\u0026gt; {{ range .Pages.ByPublishDate }} \u0026lt;li\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;time\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 按到期日期 # layouts/partials/by-expiry-date.html\n\u0026lt;ul\u0026gt; {{ range .Pages.ByExpiryDate }} \u0026lt;li\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;time\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 按最后修改日期 # layouts/partials/by-last-mod.html\n\u0026lt;ul\u0026gt; \u0026lt;!-- orders content according to the \u0026#34;lastmod\u0026#34; field in front matter --\u0026gt; {{ range .Pages.ByLastmod }} \u0026lt;li\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;time\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 按长度 # layouts/partials/by-length.html\n\u0026lt;ul\u0026gt; \u0026lt;!-- orders content according to content length in ascending order (i.e., the shortest content will be listed first) --\u0026gt; {{ range .Pages.ByLength }} \u0026lt;li\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;time\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 按标题 # layouts/partials/by-title.html\n\u0026lt;ul\u0026gt; \u0026lt;!-- ranges through content in ascending order according to the \u0026#34;title\u0026#34; field set in front matter --\u0026gt; {{ range .Pages.ByTitle }} \u0026lt;li\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;time\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 按链接标题 # layouts/partials/by-link-title.html\n\u0026lt;ul\u0026gt; \u0026lt;!-- ranges through content in ascending order according to the \u0026#34;linktitle\u0026#34; field in front matter. If a \u0026#34;linktitle\u0026#34; field is not set, the range will start with content that only has a \u0026#34;title\u0026#34; field and use that value for .LinkTitle --\u0026gt; {{ range .Pages.ByLinkTitle }} \u0026lt;li\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;time\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 按参数 # ​\t根据指定的前置元数据参数进行排序。如果内容没有指定的前置元数据字段，则使用站点的 .Site.Params 默认值。如果在某些条目中根本找不到该参数，这些条目将一起出现在排序的末尾。\nlayouts/partials/by-rating.html\n\u0026lt;!-- Ranges through content according to the \u0026#34;rating\u0026#34; field set in front matter --\u0026gt; {{ range (.Pages.ByParam \u0026#34;rating\u0026#34;) }} \u0026lt;!-- ... --\u0026gt; {{ end }} ​\t如果目标的前置元数据字段嵌套在另一个字段下，则您可以使用点表示法来访问该字段。\nlayouts/partials/by-nested-param.html\n{{ range (.Pages.ByParam \u0026#34;author.last_name\u0026#34;) }} \u0026lt;!-- ... --\u0026gt; {{ end }} 倒序排序 # ​\t可以将倒序排序应用于上述任何一种方法。以下示例以 ByDate 为例：\nlayouts/partials/by-date-reverse.html\n\u0026lt;ul\u0026gt; {{ range .Pages.ByDate.Reverse }} \u0026lt;li\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;time\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 分组内容 # ​\tHugo 提供一些函数，可按章节、类型、日期等对页面进行分组。\n按页面字段 # layouts/partials/by-page-field.html\n\u0026lt;!-- Groups content according to content section. The \u0026#34;.Key\u0026#34; in this instance will be the section\u0026#39;s title. --\u0026gt; {{ range .Pages.GroupBy \u0026#34;Section\u0026#34; }} \u0026lt;h3\u0026gt;{{ .Key }}\u0026lt;/h3\u0026gt; \u0026lt;ul\u0026gt; {{ range .Pages }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026#34;meta\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} ​\t在上面的例子中，您可能希望 {{ .Title }} 指向您已添加到 _index.md 文件中的title字段。您可以使用 .GetPage 函数来访问此值：\nlayouts/partials/by-page-field.html\n\u0026lt;!-- Groups content according to content section.--\u0026gt; {{ range .Pages.GroupBy \u0026#34;Section\u0026#34; }} \u0026lt;!-- Checks for existence of _index.md for a section; if available, pulls from \u0026#34;title\u0026#34; in front matter --\u0026gt; {{ with $.Site.GetPage \u0026#34;section\u0026#34; .Key }} \u0026lt;h3\u0026gt;{{ .Title }}\u0026lt;/h3\u0026gt; {{ else }} \u0026lt;!-- If no _index.md is available, \u0026#34;.Key\u0026#34; defaults to the section title and filters to title casing --\u0026gt; \u0026lt;h3\u0026gt;{{ .Key | title }}\u0026lt;/h3\u0026gt; {{ end }} \u0026lt;ul\u0026gt; {{ range .Pages }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026#34;meta\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} 按日期 # layouts/partials/by-page-date.html\n\u0026lt;!-- Groups content by month according to the \u0026#34;date\u0026#34; field in front matter --\u0026gt; {{ range .Pages.GroupByDate \u0026#34;2006-01\u0026#34; }} \u0026lt;h3\u0026gt;{{ .Key }}\u0026lt;/h3\u0026gt; \u0026lt;ul\u0026gt; {{ range .Pages }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026#34;meta\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} 在新版本 v0.97.0 中，GroupByDate 函数接受与 time.Format 中相同的时间格式，并且结果中的 .Key 会根据当前语言进行本地化。\n按发布日期 # layouts/partials/by-page-publish-date.html\n\u0026lt;!-- Groups content by month according to the \u0026#34;publishDate\u0026#34; field in front matter --\u0026gt; {{ range .Pages.GroupByPublishDate \u0026#34;2006-01\u0026#34; }} \u0026lt;h3\u0026gt;{{ .Key }}\u0026lt;/h3\u0026gt; \u0026lt;ul\u0026gt; {{ range .Pages }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026#34;meta\u0026#34;\u0026gt;{{ .PublishDate.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} 在新版本 v0.97.0 中，GroupByDate 函数接受与 time.Format 中相同的时间格式，并且结果中的 .Key 会根据当前语言进行本地化。\n按照上次修改时间 # layouts/partials/by-page-lastmod.html\n\u0026lt;!-- Groups content by month according to the \u0026#34;lastMod\u0026#34; field in front matter --\u0026gt; {{ range .Pages.GroupByLastmod \u0026#34;2006-01\u0026#34; }} \u0026lt;h3\u0026gt;{{ .Key }}\u0026lt;/h3\u0026gt; \u0026lt;ul\u0026gt; {{ range .Pages }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026#34;meta\u0026#34;\u0026gt;{{ .Lastmod.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} 在新版本 v0.97.0 中，GroupByDate 函数接受与 time.Format 中相同的时间格式，并且结果中的 .Key 会根据当前语言进行本地化。\n按过期日期 # layouts/partials/by-page-expiry-date.html\n\u0026lt;!-- Groups content by month according to the \u0026#34;expiryDate\u0026#34; field in front matter --\u0026gt; {{ range .Pages.GroupByExpiryDate \u0026#34;2006-01\u0026#34; }} \u0026lt;h3\u0026gt;{{ .Key }}\u0026lt;/h3\u0026gt; \u0026lt;ul\u0026gt; {{ range .Pages }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026#34;meta\u0026#34;\u0026gt;{{ .ExpiryDate.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} 在新版本 v0.97.0 中，GroupByDate 函数接受与 time.Format 中相同的时间格式，并且结果中的 .Key 会根据当前语言进行本地化。\n按照页面参数 # layouts/partials/by-page-param.html\n\u0026lt;!-- Groups content according to the \u0026#34;param_key\u0026#34; field in front matter --\u0026gt; {{ range .Pages.GroupByParam \u0026#34;param_key\u0026#34; }} \u0026lt;h3\u0026gt;{{ .Key }}\u0026lt;/h3\u0026gt; \u0026lt;ul\u0026gt; {{ range .Pages }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026#34;meta\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} 按照页面参数和日期格式 # ​\t在按date分组的模板中，使用了 Go 的布局字符串来进一步分组。有关如何使用 Go 的布局字符串格式化 Hugo 中的日期的更多示例，请参见 Format 函数。\nlayouts/partials/by-page-param-as-date.html\n\u0026lt;!-- Groups content by month according to the \u0026#34;param_key\u0026#34; field in front matter --\u0026gt; {{ range .Pages.GroupByParamDate \u0026#34;param_key\u0026#34; \u0026#34;2006-01\u0026#34; }} \u0026lt;h3\u0026gt;{{ .Key }}\u0026lt;/h3\u0026gt; \u0026lt;ul\u0026gt; {{ range .Pages }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026#34;meta\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} 反向键顺序 # ​\t分组的排序是按字母数字顺序的键进行排序（A-Z、1-100），并按照日期的逆序排列（即，最新的日期排在最前面）。\n​\t虽然这些是逻辑上的默认值，但并不总是期望的排序。有两种不同的语法可以更改 Hugo 的默认分组排序，它们都以相同的方式工作。\n1. 添加 Reverse 方法 # {{ range (.Pages.GroupBy \u0026#34;Section\u0026#34;).Reverse }} {{ range (.Pages.GroupByDate \u0026#34;2006-01\u0026#34;).Reverse }} 2. 提供另一种方向 # {{ range .Pages.GroupByDate \u0026#34;2006-01\u0026#34; \u0026#34;asc\u0026#34; }} {{ range .Pages.GroupBy \u0026#34;Section\u0026#34; \u0026#34;desc\u0026#34; }} 组内排序 # ​\t由于Grouping返回一个{{ .Key }}和一个页面片段，因此上述所有排序方法都可用。\n​\t以下是示例的排序方式：\n根据前置元数据中的date字段按月份分组内容。 按升序列出分组（即最旧的分组先列出）。 每个分组内的页面根据title按字母顺序排序。 layouts/partials/by-group-by-page.html\n{{ range .Pages.GroupByDate \u0026#34;2006-01\u0026#34; \u0026#34;asc\u0026#34; }} \u0026lt;h3\u0026gt;{{ .Key }}\u0026lt;/h3\u0026gt; \u0026lt;ul\u0026gt; {{ range .Pages.ByTitle }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026#34;meta\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} 筛选和限制列表 # ​\t有时，您只想列出可用内容的子集。一个常见的方法是仅在博客主页上显示主要章节的文章。\n​\t有关详细信息，请参见where函数和first函数的文档。\n另请参阅 # .GetPage 内容章节 内容类型 菜单模板 分页 "},{"id":48,"href":"/hugo/functions/_ismenucurrent/","title":".IsMenuCurrent","section":"函数","content":"将以下英文翻译为中文：\n.IsMenuCurrent # https://gohugo.io/functions/ismenucurrent/\n语法 # PAGE.IsMenuCurrent MENU MENUENTRY ​\t.IsMenuCurrent 是 Page 对象的一个方法，返回一个 boolean 值。如果 PAGE 是给定 MENU 中 MENUENTRY 中 .Page 的相同对象，则返回true。\n​\t您可以在 菜单模板 中找到其使用示例。\n另请参阅 # .HasMenuCurrent Menu Templates Menu Variables Menus "},{"id":49,"href":"/hugo/hugopipes/babel/","title":"Babel","section":"Hugo Pipes","content":" Babel # https://gohugo.io/hugo-pipes/babel/\n​\tHugo Pipes 可以使用 Babel 处理 JS 文件。\n语法 # resources.Babel RESOURCE [OPTIONS] babel RESOURCE [OPTIONS] 用法 # ​\t使用 resources.Babel 将任何 JavaScript 资源文件转译为另一种 JavaScript 版本，它接受资源对象和下面列出的可选选项字典作为参数。Babel 使用 babel cli。\n​\tHugo Pipe 的 Babel 需要安装 @babel/cli 和 @babel/core JavaScript 包在项目中或全局安装 (npm install -g @babel/cli @babel/core)，以及使用的任何 Babel 插件或预设 (例如，npm install @babel/preset-env --save-dev)。\n​\t如果您使用的是 Hugo Snap 包，则 Babel 和插件需要在您的 Hugo 站点目录中本地安装，例如，不带 -g 标志的 npm install @babel/cli @babel/core --save-dev。\n配置 # ​\t当运行 Babel 和类似工具时，我们会将主项目的 node_modules 添加到 NODE_PATH。在这个领域，Babel 存在一些已知问题，因此如果您的 babel.config.js 存在于 Hugo 模块中（而不是项目本身），我们建议使用 require 来加载预设/插件，例如：\nmodule.exports = { presets: [ [ require(\u0026#34;@babel/preset-env\u0026#34;), { useBuiltIns: \u0026#34;entry\u0026#34;, corejs: 3, }, ], ], }; 选项 # config [string]\n​\tBabel 配置文件的路径。Hugo 默认会在项目中查找 babel.config.js 文件。有关这些配置文件的更多信息，请参见：babel 配置。\nminified [bool]\nSave as many bytes as possible when printing\n在打印时尽可能节省字节。\nnoComments [bool]\n将注释写入生成的输出中（默认为 true）。\ncompact [bool]\n不包括多余的空格字符和行终止符。如果未设置，默认值为auto。\nverbose [bool]\n记录所有日志。\nsourceMap [string]\n从 Babel 编译输出 inline 或 external sourcemap。外部 sourcemap 将写入目标文件名后带有 \u0026ldquo;.map\u0026rdquo; 的目标中。输入 sourcemap 可以从 js.Build 和节点模块中读取，并合并到输出 sourcemap 中。\n示例 # {{- $transpiled := resources.Get \u0026#34;scripts/main.js\u0026#34; | babel -}} 或使用选项：\n{{ $opts := dict \u0026#34;noComments\u0026#34; true }} {{- $transpiled := resources.Get \u0026#34;scripts/main.js\u0026#34; | babel $opts -}} 另请参阅 # js.Build ToCSS highlight Concat ExecuteAsTemplate "},{"id":50,"href":"/hugo/troubleshooting/buildperformance/","title":"BuildPerformance","section":"Troubleshooting","content":" Build Performance # https://gohugo.io/troubleshooting/build-performance/\nAn overview of features used for diagnosing and improving performance issues in site builds.\nTemplate Metrics # Hugo is a very fast static site generator, but it is possible to write inefficient templates. Hugo’s template metrics feature is extremely helpful in pinpointing which templates are executed most often and how long those executions take in terms of CPU time.\nMetric Name Description cumulative duration The cumulative time spent executing a given template. average duration The average time spent executing a given template. maximum duration The maximum time a single execution took for a given template. count The number of times a template was executed. template The template name. ▶ hugo --templateMetrics Started building sites ... Built site for language en: 0 draft content 0 future content 0 expired content 2 regular pages created 22 other pages created 0 non-page files copied 0 paginator pages created 4 tags created 3 categories created total in 18 ms Template Metrics: cumulative average maximum duration duration duration count template ---------- -------- -------- ----- -------- 6.419663ms 583.605µs 994.374µs 11 _internal/_default/rss.xml 4.718511ms 1.572837ms 3.880742ms 3 indexes/category.html 4.642666ms 2.321333ms 3.282842ms 2 posts/single.html 4.364445ms 396.767µs 2.451372ms 11 partials/header.html 2.346069ms 586.517µs 903.343µs 4 indexes/tag.html 2.330919ms 211.901µs 2.281342ms 11 partials/header.includes.html 1.238976ms 103.248µs 446.084µs 12 posts/li.html 972.16µs 972.16µs 972.16µs 1 _internal/_default/sitemap.xml 953.597µs 953.597µs 953.597µs 1 index.html 822.263µs 822.263µs 822.263µs 1 indexes/post.html 567.498µs 51.59µs 112.205µs 11 partials/navbar.html 348.22µs 31.656µs 88.249µs 11 partials/meta.html 346.782µs 173.391µs 276.176µs 2 posts/summary.html 235.184µs 21.38µs 124.383µs 11 partials/footer.copyright.html 132.003µs 12µs 117.999µs 11 partials/menu.html 72.547µs 6.595µs 63.764µs 11 partials/footer.html A Note About Parallelism\nHugo builds pages in parallel where multiple pages are generated simultaneously. Because of this parallelism, the sum of \u0026ldquo;cumulative duration\u0026rdquo; values is usually greater than the actual time it takes to build a site.\nCached Partials # Some partial templates such as sidebars or menus are executed many times during a site build. Depending on the content within the partial template and the desired output, the template may benefit from caching to reduce the number of executions. The partialCached template function provides caching capabilities for partial templates.\nNote that you can create cached variants of each partial by passing additional parameters to partialCached beyond the initial context. See the partialCached documentation for more details.\n另请参阅 # Partial Templates "},{"id":51,"href":"/hugo/hugopipes/concatenatingassets/","title":"Concat","section":"Hugo Pipes","content":" Concat # https://gohugo.io/hugo-pipes/bundling/\n​\t将任意数量的assets捆绑成一个资源。\n语法 # resources.Concat TARGET_PATH SLICE_RESOURCES 用法 # ​\t相同 MIME 类型的asset文件可以使用 resources.Concat 捆绑成一个资源，该函数需要两个参数，分别为创建资源捆绑的目标路径和要连接的资源对象的切片。\n{{ $plugins := resources.Get \u0026#34;js/plugins.js\u0026#34; }} {{ $global := resources.Get \u0026#34;js/global.js\u0026#34; }} {{ $js := slice $plugins $global | resources.Concat \u0026#34;js/bundle.js\u0026#34; }} 另请参阅 # Babel ExecuteAsTemplate Fingerprint FromString Minify "},{"id":52,"href":"/hugo/contentmanagement/contenttypes/","title":"ContentTypes","section":"内容管理","content":" Content Types - 内容类型 # https://gohugo.io/content-management/types/\nHugo is built around content organized in sections.\n​\tHugo 建立在按章节组织内容的基础上。\n​\t内容类型是组织内容的一种方式。Hugo 会根据正文中的类型或者文件路径中的第一个目录（如果没有设置类型）来确定内容类型。例如，如果没有设置类型，则 content/blog/my-first-event.md 将被认为是类型为blog的内容。\n​\t内容类型用于：\n确定如何渲染内容。了解更多请参见模板查找顺序和内容视图。 确定要用于新内容的原型模板。 另请参阅 # 内容章节 .GetPage Comments 内容组织 Hugo 中的内容列表 "},{"id":53,"href":"/hugo/hostingdeployment/deploymentwithrclone/","title":"Deployment with Rclone","section":"Hosting \u0026 部署","content":" Deployment with Rclone # https://gohugo.io/hosting-and-deployment/deployment-with-rclone/\nIf you have access to your web host with SFTP/FTP/SSH/HTTP(DAV), you can use rclone to incrementally deploy your entire Hugo website.\nAssumptions # A web host running a web server. This could be a shared hosting environment or a VPS. Access to your web host with any of the protocols supported by rclone, such as SFTP. A functional static website built with Hugo Deploying from an Rclone compatible operating system You have installed Rclone. NB: You can remove --interactive in the commands below once you are comfortable with rclone, if you wish. Also, --gc and --minify are optional in the hugo commands below.\nGetting Started # The spoiler is that you can even deploy your entire website from any compatible OS with no configuration. Using SFTP for example:\nhugo --gc --minify rclone sync --interactive --sftp-host sftp.example.com --sftp-user www-data --sftp-ask-password public/ :sftp:www/ Configure Rclone for Even Easier Usage # The easiest way is simply to run rclone config.\nThe Rclone docs provide an example of configuring Rclone to use SFTP.\nFor the next commands, we will assume you configured a remote you named hugo-www\nThe above ‘spoiler’ commands could become:\nhugo --gc --minify rclone sync --interactive public/ hugo-www:www/ After you issue the above commands (and respond to any prompts), check your website and you will see that it is deployed.\n另请参阅 # Deployment with Rsync Host on Azure Static Web Apps Host on GitLab Host on KeyCDN Host on Netlify "},{"id":54,"href":"/hugo/hostingdeployment/deploymentwithrsync/","title":"Deployment with Rsync","section":"Hosting \u0026 部署","content":" Deployment with Rsync # https://gohugo.io/hosting-and-deployment/deployment-with-rsync/\nIf you have access to your web host with SSH, you can use a simple rsync one-liner to incrementally deploy your entire Hugo website.\nAssumptions # A web host running a web server. This could be a shared hosting environment or a VPS. Access to your web host with SSH A functional static website built with Hugo The spoiler is that you can deploy your entire website with a command that looks like the following:\nhugo \u0026amp;\u0026amp; rsync -avz --delete public/ www-data@ftp.topologix.fr:~/www/ As you will see, we’ll put this command in a shell script file, which makes building and deployment as easy as executing ./deploy.\nCopy Your SSH Key to your Host # To make logging in to your server more secure and less interactive, you can upload your SSH key. If you have already installed your SSH key to your server, you can move on to the next section.\nFirst, install the ssh client. On Debian distributions, use the following command:\ninstall-openssh.sh\nsudo apt-get install openssh-client Then generate your ssh key. First, create the .ssh directory in your home directory if it doesn’t exist:\n~$ cd \u0026amp;\u0026amp; mkdir .ssh \u0026amp; cd .ssh Next, execute this command to generate a new keypair called rsa_id:\n~/.ssh/$ ssh-keygen -t rsa -q -C \u0026#34;For SSH\u0026#34; -f rsa_id You’ll be prompted for a passphrase, which is an extra layer of protection. Enter the passphrase you’d like to use, and then enter it again when prompted, or leave it blank if you don’t want to have a passphrase. Not using a passphrase will let you transfer files non-interactively, as you won’t be prompted for a password when you log in, but it is slightly less secure.\nTo make logging in easier, add a definition for your web host to the file ~/.ssh/config with the following command, replacing HOST with the IP address or hostname of your web host, and USER with the username you use to log in to your web host when transferring files:\n~/.ssh/$ cat \u0026gt;\u0026gt; config \u0026lt;\u0026lt;EOF Host HOST Hostname HOST Port 22 User USER IdentityFile ~/.ssh/rsa_id EOF Then copy your ssh public key to the remote server with the ssh-copy-id command:\n~/.ssh/$ ssh-copy-id -i rsa_id.pub USER@HOST.com Now you can easily connect to the remote server:\n~$ ssh user@host Enter passphrase for key \u0026#39;/home/mylogin/.ssh/rsa_id\u0026#39;: Now that you can log in with your SSH key, let’s create a script to automate deployment of your Hugo site.\nShell Script # Create a new script called deploy the root of your Hugo tree:\n~/websites/topologix.fr$ editor deploy Add the following content. Replace the USER, HOST, and DIR values with your own values:\n#!/bin/sh USER=my-user HOST=my-server.com DIR=my/directory/to/topologix.fr/ # the directory where your web site files should go hugo \u0026amp;\u0026amp; rsync -avz --delete public/ ${USER}@${HOST}:~/${DIR} # this will delete everything on the server that\u0026#39;s not in the local public folder exit 0 Note that DIR is the relative path from the remote user’s home. If you have to specify a full path (for instance /var/www/mysite/) you must change ~/${DIR} to ${DIR} inside the command-line. For most cases you should not have to.\nSave and close, and make the deploy file executable:\n~/websites/topologix.fr$ chmod +x deploy Now you only have to enter the following command to deploy and update your website:\n~/websites/topologix.fr$ ./deploy Your site builds and deploys:\nStarted building sites ... Built site for language en: 0 draft content 0 future content 0 expired content 5 pages created 0 non-page files copied 0 paginator pages created 0 tags created 0 categories created total in 56 ms sending incremental file list 404.html index.html index.xml sitemap.xml posts/ posts/index.html sent 9,550 bytes received 1,708 bytes 7,505.33 bytes/sec total size is 966,557 speedup is 85.86 You can incorporate other proprocessing tasks into this deployment script as well.\n另请参阅 # Deployment with Rclone Host on Azure Static Web Apps Host on GitLab Host on KeyCDN Host on Netlify "},{"id":55,"href":"/hugo/tools/editorplug-ins/","title":"EditorPlug-ins","section":"工具","content":" Editor Plug-ins for Hugo # https://gohugo.io/tools/editors/\nThe Hugo community uses a wide range of preferred tools and has developed plug-ins for some of the most popular text editors to help automate parts of your workflow.\nThe Hugo community uses a wide range of preferred tools and has developed plug-ins for some of the most popular text editors to help automate parts of your workflow.\nSublime Text # Hugofy. Hugofy is a plugin for Sublime Text 3 to make life easier to use Hugo static site generator. [Hugo Snippets](https://packagecontrol.io/packages/Hugo Snippets). Hugo Snippets is a useful plugin for adding automatic snippets to Sublime Text 3. Visual Studio Code # Hugofy. Hugofy is a plugin for Visual Studio Code to \u0026ldquo;make life easier\u0026rdquo; when developing with Hugo. The source code can be found here. Hugo Helper. Hugo Helper is a plugin for Visual Studio Code that has some useful commands for Hugo. The source code can be found here. Hugo Language and Syntax Support. Hugo Language and Syntax Support is a Visual Studio Code plugin for Hugo syntax highlighting and snippets. The source code can be found here. Hugo Themer. Hugo Themer is an extension to help you while developing themes. It allows you to easily navigate through your theme files. Front Matter. Once you go for a static site, you need to think about how you are going to manage your articles. Front matter is a tool that helps you maintain the metadata/front matter of your articles like: creation date, modified date, slug, tile, SEO check, and many more… Syntax Highlighting for Hugo Shortcodes. This extension add some syntax highlighting for Shortcodes, making visual identification of individual pieces easier. Emacs # emacs-easy-hugo. Emacs major mode for managing hugo blogs. Note that Hugo also supports Org-mode. ox-hugo.el. Native Org-mode exporter that exports to Blackfriday Markdown with Hugo front-matter. ox-hugo supports two common Org blogging flows — exporting multiple Org subtrees in a single file to multiple Hugo posts, and exporting a single Org file to a single Hugo post. It also leverages the Org tag and property inheritance features. See Why ox-hugo? for more. Vim # Vim Hugo Helper. A small Vim plugin to help me with writing posts with Hugo. Atom # Hugofy. A Hugo Static Website Generator package for Atom. language-hugo. Adds syntax highlighting to Hugo files. "},{"id":56,"href":"/hugo/hugopipes/resourcefromtemplate/","title":"ExecuteAsTemplate","section":"Hugo Pipes","content":" ExecuteAsTemplate # https://gohugo.io/hugo-pipes/resource-from-template/\n​\t从模板创建资源。\n语法 # resources.ExecuteAsTemplate TARGET_PATH CONTEXT RESOURCE 用法 # ​\t为了在包含 Go 模板的一个asset 文件上使用 Hugo Pipes 函数，必须使用 resources.ExecuteAsTemplate 函数。\n​\t该函数需要三个参数：创建资源的目标路径、模板上下文和资源对象。\n// assets/sass/template.scss $backgroundColor: {{ .Param \u0026#34;backgroundColor\u0026#34; }}; $textColor: {{ .Param \u0026#34;textColor\u0026#34; }}; body{ background-color:$backgroundColor; color: $textColor; } // [...] {{ $sassTemplate := resources.Get \u0026#34;sass/template.scss\u0026#34; }} {{ $style := $sassTemplate | resources.ExecuteAsTemplate \u0026#34;main.scss\u0026#34; . | resources.ToCSS }} 另请参阅 # Babel Concat Fingerprint FromString Minify "},{"id":57,"href":"/hugo/troubleshooting/faq/","title":"FAQ","section":"Troubleshooting","content":" Frequently Asked Questions # https://gohugo.io/troubleshooting/faq/\nSolutions to some common Hugo problems.\nNote: The answers/solutions presented below are short, and may not be enough to solve your problem. Visit Hugo Discourse and use the search. It that does not help, start a new topic and ask your questions.\nI can’t see my content! # Is your Markdown file in draft mode? When testing, run hugo server with the -D or --buildDrafts switch.\nIs your Markdown file part of a leaf bundle? If there is an index.md file in the same or any parent directory then other Markdown files will not be rendered as individual pages.\nCan I set configuration variables via OS environment? # Yes you can! See Configure with Environment Variables.\nHow do I schedule posts? # Set publishDate in the page Front Matter to a datetime in the future. If you want the creation and publication datetime to be the same, it’s also sufficient to only set date1. Build and publish at intervals. How to automate the \u0026ldquo;publish at intervals\u0026rdquo; part depends on your situation:\nIf you deploy from your own PC/server, you can automate with Cron or similar.\nIf your site is hosted on a service similar to\nNetlify\nyou can:\nUse a service such as ifttt to schedule the updates Set up a deploy hook which you can run with a cron service to deploy your site at intervals, such as cron-job.org (both Netlify and Cloudflare Pages support deploy hooks) Also see this Twitter thread:\n@GoHugoIO Converted https://t.co/icCzS7Ha7q from @Medium to Hugo yesterday. Once I figure out how to do scheduled posts I will be ecstatic.\n— Chris Short 🇺🇸🇺🇦 (@ChrisShort)\nFebruary 10, 2018\nCan I use the latest Hugo version on Netlify? # Yes you can! Read this.\nI get \u0026ldquo;… this feature is not available in your current Hugo version\u0026rdquo; # If you process SCSS or Sass to CSS in your Hugo project with libsass as the transpiler or if you convert images to the webp format, you need the Hugo extended version, or else you may see an error message similar to the below:\nerror: failed to transform resource: TOCSS: failed to transform \u0026#34;scss/main.scss\u0026#34; (text/x-scss): this feature is not available in your current Hugo version We release two set of binaries for technical reasons. The extended version is not what you get by default for some installation methods. On the release page, look for archives with extended in the name. To build hugo-extended, use go install --tags extended\nTo confirm, run hugo version and look for the word extended.\nSee Configure Dates for the order in which the different date variables are complemented by each other when not explicitly set. ↩︎ "},{"id":58,"href":"/hugo/hugopipes/fingerprintingandsri/","title":"Fingerprint","section":"Hugo Pipes","content":" Fingerprint # https://gohugo.io/hugo-pipes/fingerprint/\n对给定的资源进行处理，添加资源内容的哈希字符串。 语法 # resources.Fingerprint RESOURCE [ALGORITHM] fingerprint RESOURCE [ALGORITHM] 用法 # 可以使用 `resources.Fingerprint` 对任何asset文件应用Fingerprinting和 [SRI](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity)，该函数需要两个参数，分别为资源对象和一个可选的 [哈希算法](https://en.wikipedia.org/wiki/Secure_Hash_Algorithms)。 ​\t默认哈希算法为 sha256 ，其他可用算法为 sha384 ， sha512 （自 Hugo 0.55 起），以及 md5 。\n​\t经过处理的任何asset文件都将带有一个 .Data.Integrity 属性，其中包含由哈希算法名称、一个连字号（hyphen ）和 base64 编码的哈希值组成的完整性字符串。\n{{ $js := resources.Get \u0026#34;js/global.js\u0026#34; }} {{ $secureJS := $js | resources.Fingerprint \u0026#34;sha512\u0026#34; }} \u0026lt;script src=\u0026#34;{{ $secureJS.Permalink }}\u0026#34; integrity=\u0026#34;{{ $secureJS.Data.Integrity }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 另请参阅 # Babel Concat ExecuteAsTemplate FromString Minify "},{"id":59,"href":"/hugo/hugopipes/resourcefromstring/","title":"FromString","section":"Hugo Pipes","content":" FromString # https://gohugo.io/hugo-pipes/resource-from-string/\n​\t从字符串创建资源。\n语法 # resources.FromString TARGET_PATH CONTENT 用法 # ​\t可以使用 resources.FromString 直接从模板创建资源，该函数需要两个参数，即要创建资源的目标路径和给定的内容字符串。\n​\t下面的示例创建一个包含每个项目语言的本地化变量的资源文件。\n{{ $string := (printf \u0026#34;var rootURL = \u0026#39;%s\u0026#39;; var apiURL = \u0026#39;%s\u0026#39;;\u0026#34; (absURL \u0026#34;/\u0026#34;) (.Param \u0026#34;API_URL\u0026#34;)) }} {{ $targetPath := \u0026#34;js/vars.js\u0026#34; }} {{ $vars := $string | resources.FromString $targetPath }} {{ $global := resources.Get \u0026#34;js/global.js\u0026#34; | resources.Minify }} \u0026lt;script src=\u0026#34;{{ $vars.Permalink }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;{{ $global.Permalink }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 另请参阅 # Babel Concat ExecuteAsTemplate Fingerprint Minify "},{"id":60,"href":"/hugo/tools/frontends/","title":"Frontends","section":"工具","content":" Frontend Interfaces with Hugo # https://gohugo.io/tools/frontends/\nDo you prefer a graphical user interface over a text editor? Give these frontends a try.\nenwrite. Enwrite enables evernote-powered, statically generated blogs and websites. Now posting to your blog or updating your website is as easy as writing a new note in Evernote! Lipi. Lipi is a native GUI frontend written in Java to manage your Hugo websites. Netlify CMS. Netlify CMS is an open source, serverless solution for managing Git based content in static sites, and it works on any platform that can host static sites. A Hugo/Netlify CMS starter is available to get new projects running quickly. Hokus CMS. Hokus CMS is an open source, multi-platform, easy to use, desktop application for Hugo. Build from simple to complex user interfaces for Hugo websites by choosing from a dozen ready-to-use components — all for free, with no vendor lock-in. Commercial Services # DATOCMS DatoCMS is a fully customizable administrative area for your static websites. Use your favorite website generator, let your clients publish new content independently, and the host the site anywhere you like. CloudCannon. The intuitive Git-based CMS for your Hugo website. CloudCannon syncs changes from your Git repository and pushes content changes back, so your development and content teams are always in sync. Edit all of your content on the page with visual editing, build entire pages with reusable custom components and then publish confidently. 另请参阅 # Other Hugo Community Projects "},{"id":61,"href":"/hugo/hostingdeployment/hoston21yunbox/","title":"Host on 21YunBox","section":"Hosting \u0026 部署","content":" Host on 21YunBox # https://gohugo.io/hosting-and-deployment/hosting-on-21yunbox/\nHost your Hugo site with 21YunBox’s blazing fast Chinese CDN, fully-managed SSL and auto deploys from Gitee.\n21YunBox is a fully-managed cloud platform dedicated to make web deployment easy within the Chinese Great Firewall where you can host static sites, backend APIs, databases, cron jobs, and all your other apps in one place. It provides blazing fast Chinese CDN, continuous deployment, one-click HTTPS and other services like managed databases and backend web services, providing an avenue to launch web projects in China.\n21YunBox includes the following features:\nContinuous, automatic builds \u0026amp; deploys from GitHub and Gitee Automatic SSL certificates through Let’s Encrypt Instant cache invalidation with a blazing fast, Chinese CDN Unlimited custom domains Automatic Brotli compression for faster sites Native HTTP/2 support Automatic HTTP → HTTPS redirects Custom URL redirects and rewrites Prerequisites # This guide assumes you already have a Hugo project to deploy. If you need a project, use the Quick Start to get started or fork 21YunBox’s Hugo Example before continuing.\nSetup # You can set up a Hugo site on 21YunBox in two quick steps:\nCreate a new web service on 21YunBox, and give 21YunBox permission to access your GitHub or Gitee repo.\nUse the following values during creation:\nField Value Environment Static Site Build Command hugo --gc --minify (or your own build command) Publish Directory ./public (or your own output directory) That’s it! Your site will be live on your 21YunBox URL (which looks like yoursite.21yunbox.com) as soon as the build is done.\nContinuous deploys # Now that 21YunBox is connected to your repo, it will automatically build and publish your site any time you push to GitHub.\nEvery deploy automatically and instantly invalidates the CDN cache, so your users can always access the latest content on your site.\nCustom domains # Add your own domains to your site easily using 21YunBox’s custom domains guide.\nSupport # Click here to contact with 21YunBox’ experts if you need help.\n另请参阅 # Host on Render Host on GitHub Host on AWS Amplify Host on Azure Static Web Apps Host on GitLab "},{"id":62,"href":"/hugo/hostingdeployment/hostonawsamplify/","title":"Host on AWS Amplify","section":"Hosting \u0026 部署","content":" Host on AWS Amplify # https://gohugo.io/hosting-and-deployment/hosting-on-aws-amplify/\nDevelop and deploy a cloud-powered web app with AWS Amplify.\nIn this guide we’ll walk through how to deploy and host your Hugo site using the AWS Amplify Console.\nAWS Amplify is a combination of client library, CLI toolchain, and a Console for continuous deployment and hosting. The Amplify CLI and library allow developers to get up \u0026amp; running with full-stack cloud-powered applications with features like authentication, storage, serverless GraphQL or REST APIs, analytics, Lambda functions, \u0026amp; more. The Amplify Console provides continuous deployment and hosting for modern web apps (single page apps and static site generators). Continuous deployment allows developers to deploy updates to their web app on every code commit to their Git repository. Hosting includes features such as globally available CDNs, easy custom domain setup + HTTPS, feature branch deployments, and password protection.\nPre-requisites # Sign up for an AWS Account. There are no upfront charges or any term commitments to create an AWS account and signing up gives you immediate access to the AWS Free Tier. You have an account with GitHub, GitLab, or Bitbucket. You have completed the Quick Start or have a Hugo website you are ready to deploy and share with the world. Hosting # Log in to the AWS Amplify Console and choose Get Started under Deploy. Connect a branch from your GitHub, Bitbucket, GitLab, or AWS CodeCommit repository. Connecting your repository allows Amplify to deploy updates on every code commit to a branch. Accept the default build settings. The Amplify Console automatically detects your Hugo build settings and output directory. Review your changes and then choose Save and deploy. The Amplify Console will pull code from your repository, build changes to the backend and frontend, and deploy your build artifacts at https://master.unique-id.amplifyapp.com. Bonus: Screenshots of your app on different devices to find layout issues. Using a newer version of Hugo # If you need to use a different, perhaps newer, version of Hugo than the version currently supported by AWS Amplify:\nVisit the AWS Amplify Console, and click the app you would like to modify In the side navigation bar, Under App Settings, click Build settings On the Build settings page, near the bottom, there is a section called Build image settings. Click Edit Under Live package updates, click Add package version override From the selection, click Hugo and ensure the version field says latest Click Save to save the changes. 另请参阅 # Host on 21YunBox Host on Azure Static Web Apps Host on GitHub Host on GitLab Host on KeyCDN "},{"id":63,"href":"/hugo/hostingdeployment/hostonazurestaticwebapps/","title":"Host on Azure Static Web Apps","section":"Hosting \u0026 部署","content":" Host on Azure Static Web Apps # https://gohugo.io/hosting-and-deployment/hosting-on-azure/\nDeploy Hugo to Azure Static Web Apps and automate the whole process with Github Action Workflow\nAzure Static Web Apps is a service that automatically builds and deploys full stack web apps to Azure from a Git repository, using GitHub Actions or Azure DevOps.\nThe following documentation covers how to use GitHub Actions for the deployment. If you are using Azure DevOps, follow the Microsoft documentation.\nAssumptions # You have Git 2.8 or greater installed on your machine. You have a GitHub account. Signing up for GitHub is free. You have an Azure account. You can sign up for a Free Trail. You have a ready-to-publish Hugo website or have at least completed the Quick Start. Deploy Hugo to Azure Static Web Apps # Navigate to the Azure Portal Click Create a Resource Search for Static Web Apps Click Static Web Apps Click Create For Subscription, accept the subscription that is listed or select a new one from the drop-down list. In Resource group, select New. In New resource group name, enter hugo-static-app and select OK. Next, a name for your app in the Name box. Valid characters include a-z, A-Z, 0-9 and -. For Region, select an available region close to you. For SKU, select Free. Click the Sign in with GitHub button. Select the Organization under which your repo exists. Select the Hugo app you wish to deploy as the Repository . For the Branch select the branch you want to deploy (eg: main). Select Hugo under the Build Presets, which will populate the configuration files with the standard Hugo build options App Location is the path in the Git repo where Hugo’s config file is Api Location is the path where the Serverless API is (or left blank if there is no API) Artifact Location is the path where Hugo publishes to Click Review + Create to review the details and then Create to start the creation of the Azure Static Web Apps and create the GitHub Action workflow for deployment. A GitHub Action workflow will immediately start a build using Hugo and deployment to Azure. The website can be accessed via the URL shown on the Overview page of the Azure Static Web Apps resource in Azure.\nUsing A Custom Hugo Version # When you create a Static Web App, a workflow file is generated which contains the deployment settings for the site. You can configure a specific Hugo version in the workflow file by providing a value for HUGO_VERSION in the env section of the Azure/static-web-apps-deploy GitHub Action.\njobs: build_and_deploy_job: if: github.event_name == \u0026#39;push\u0026#39; || (github.event_name == \u0026#39;pull_request\u0026#39; \u0026amp;\u0026amp; github.event.action != \u0026#39;closed\u0026#39;) runs-on: ubuntu-latest name: Build and Deploy Job steps: - uses: actions/checkout@v3 with: submodules: true - name: Build And Deploy id: builddeploy uses: Azure/static-web-apps-deploy@v1 with: azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }} repo_token: ${{ secrets.GITHUB_TOKEN }} action: \u0026#34;upload\u0026#34; app_location: \u0026#34;/\u0026#34; # App source code path api_location: \u0026#34;api\u0026#34; # Api source code path - optional output_location: \u0026#34;public\u0026#34; # Built app content directory - optional env: HUGO_VERSION: 0.100.2 Use a Custom Domain # Azure Static Web Apps supports custom domains as a CNAME or APEX domain mapping. You can configure the custom domains via the Azure Portal. Refer to the official documentation for custom domains for more information.\n另请参阅 # Host on GitLab Hugo Deploy Host on GitHub Host on KeyCDN Host on Netlify "},{"id":64,"href":"/hugo/hostingdeployment/hostoncloudflarepages/","title":"Host on Cloudflare Pages","section":"Hosting \u0026 部署","content":" Host on Cloudflare Pages # https://gohugo.io/hosting-and-deployment/hosting-on-cloudflare-pages/\nCloudflare Pages can host your Hugo site with CDN, continuous deployment, 1-click HTTPS, an admin GUI, and its own environment variables.\nCloudflare Pages are super fast, always up-to-date, and deployed directly from your Git provider (currently supports only GitHub and GitLab).\nCloudflare Pages docs have a detailed tutorial on how to deploy a Hugo site.\n"},{"id":65,"href":"/hugo/hostingdeployment/hostonfirebase/","title":"Host on Firebase","section":"Hosting \u0026 部署","content":" Host on Firebase # https://gohugo.io/hosting-and-deployment/hosting-on-firebase/\nYou can use Firebase’s free tier to host your static website; this also gives you access to Firebase’s NOSQL API.\nAssumptions # You have an account with Firebase. (If you don’t, you can sign up for free using your Google account.) You have completed the Quick Start or have a completed Hugo website ready for deployment. Initial setup # Go to the Firebase console and create a new project (unless you already have a project). You will need to globally install firebase-tools (node.js):\nnpm install -g firebase-tools Log in to Firebase (setup on your local machine) using firebase login, which opens a browser where you can select your account. Use firebase logout in case you are already logged in but to the wrong account.\nfirebase login In the root of your Hugo project, initialize the Firebase project with the firebase init command:\nfirebase init From here:\nChoose Hosting in the feature question Choose the project you just set up Accept the default for your database rules file Accept the default for the publish directory, which is public Choose \u0026ldquo;No\u0026rdquo; in the question if you are deploying a single-page app Using Firebase \u0026amp; Github CI/CD # In new versions of Firebase, some other questions apply:\nSet up automatic builds and deploys with GitHub? Here you will be redirected to login in your GitHub account to get permissions. Confirm.\nFor which GitHub repository would you like to set up a GitHub workflow? (format: user/repository) Include the repository you will use in the format above (Account/Repo) Firebase script with retrive credentials, create a service account you can later manage in your github settings.\nSet up the workflow to run a build script before every deploy? Here is your opportunity to include some commands before you run the deploy.\nSet up automatic deployment to your site’s live channel when a PR is merged? You can let in the default option (main)\nAfter that Firebase has been set in your project with CI/CD. After that run:\nhugo \u0026amp;\u0026amp; firebase deploy With this you will have the app initialized manually. After that you can manage and fix your github workflow from: https://github.com/your-account/your-repo/actions\nDon’t forget to update your static pages before push!\nManual Deploy # To deploy your Hugo site, execute the firebase deploy command, and your site will be up in no time:\nhugo \u0026amp;\u0026amp; firebase deploy CI Setup (Other tools) # You can generate a deploy token using\nfirebase login:ci You can also set up your CI and add the token to a private variable like $FIREBASE_DEPLOY_TOKEN.\nThis is a private secret and it should not appear in a public repository. Make sure you understand your chosen CI and that it’s not visible to others.\nYou can then add a step in your build to do the deployment using the token:\nfirebase deploy --token $FIREBASE_DEPLOY_TOKEN Reference links # Firebase CLI Reference 另请参阅 # Host on Azure Static Web Apps Host on GitLab Host on KeyCDN Host on Netlify Host on Render "},{"id":66,"href":"/hugo/hostingdeployment/hostongithub/","title":"Host on GitHub","section":"Hosting \u0026 部署","content":" Host on GitHub # https://gohugo.io/hosting-and-deployment/hosting-on-github/\nDeploy Hugo as a GitHub Pages project or personal/organizational site and automate the whole process with Github Actions\nGitHub provides free and fast static hosting over SSL for personal, organization, or project pages directly from a GitHub repository via its GitHub Pages service and automating development workflows and build with GitHub Actions.\nPrerequisites # Create a GitHub account Install Git Create a Hugo site and test it locally with hugo server. Types of sites # There are three types of GitHub Pages sites: project, user, and organization. Project sites are connected to a specific project hosted on GitHub. User and organization sites are connected to a specific account on GitHub.com.\nSee the GitHub Pages documentation to understand the requirements for repository ownership and naming.\nProcedure # Step 1\nCreate a GitHub repository.\nStep 2\nPush your local repository to GitHub.\nStep 3\nVisit your GitHub repository. From the main menu choose Settings \u0026gt; Pages. In then center of your screen you will see this:\nStep 4\nChange the Source to GitHub Actions. The change is immediate; you do not have to press a Save button.\nStep 5\nCreate an empty file in your local repository.\n.github/workflows/hugo.yaml Step 6\nCopy and paste the YAML below into the file you created. Change the branch name and Hugo version as needed.\n.github/workflows/hugo.yaml\n# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: - main # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.111.3 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass Embedded run: sudo snap install dart-sass-embedded - name: Checkout uses: actions/checkout@v3 with: submodules: recursive fetch-depth: 0 - name: Setup Pages id: pages uses: actions/configure-pages@v3 - name: Install Node.js dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload artifact uses: actions/upload-pages-artifact@v1 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v2 Step 7\nCommit the change to your local repository with a commit message of something like \u0026ldquo;Add workflow\u0026rdquo;, and push to GitHub.\nStep 8\nFrom GitHub’s main menu, choose Actions. You will see something like this:\nStep 9\nWhen GitHub has finished building and deploying your site, the color of the status indicator will change to green.\nStep 10\nClick on the commit message as shown above. You will see this:\nUnder the deploy step, you will see a link to your live site.\nIn the future, whenever you push a change from your local repository, GitHub will rebuild your site and deploy the changes.\nAdditional resources # Learn more about GitHub Actions Caching dependencies to speed up workflows Manage a custom domain for your GitHub Pages site 另请参阅 # Host on 21YunBox Host on Azure Static Web Apps Host on GitLab Host on AWS Amplify Host on KeyCDN "},{"id":67,"href":"/hugo/hostingdeployment/hostongitlab/","title":"Host on GitLab","section":"Hosting \u0026 部署","content":" Host on GitLab # https://gohugo.io/hosting-and-deployment/hosting-on-gitlab/\nGitLab makes it easy to build, deploy, and host your Hugo website via their free GitLab Pages service, which provides native support for Hugo.\nAssumptions # Working familiarity with Git for version control Completion of the Hugo Quick Start A GitLab account A Hugo website on your local machine that you are ready to publish BaseURL # The baseURL in your site configuration must reflect the full URL of your GitLab pages repository if you are using the default GitLab Pages URL (e.g., https://\u0026lt;YourUsername\u0026gt;.gitlab.io/\u0026lt;your-hugo-site\u0026gt;/) and not a custom domain.\nConfigure GitLab CI/CD # Define your CI/CD jobs by creating a .gitlab-ci.yml file in the root of your project.\n.gitlab-ci.yml\nimage: registry.gitlab.com/pages/hugo/hugo_extended:latest variables: GIT_SUBMODULE_STRATEGY: recursive pages: script: - hugo artifacts: paths: - public rules: - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH See this list if you wish to use a particular Hugo version to build your site.\nPush your Hugo website to GitLab # Next, create a new repository on GitLab. It is not necessary to make the repository public. In addition, you might want to add /public to your .gitignore file, as there is no need to push compiled assets to GitLab or keep your output website in version control.\n# initialize new git repository git init # add /public directory to our .gitignore file echo \u0026#34;/public\u0026#34; \u0026gt;\u0026gt; .gitignore # commit and push code to master branch git add . git commit -m \u0026#34;Initial commit\u0026#34; git remote add origin https://gitlab.com/YourUsername/your-hugo-site.git git push -u origin master Wait for your page to build # That’s it! You can now follow the CI agent building your page at https://gitlab.com/\u0026lt;YourUsername\u0026gt;/\u0026lt;your-hugo-site\u0026gt;/pipelines.\nAfter the build has passed, your new website is available at https://\u0026lt;YourUsername\u0026gt;.gitlab.io/\u0026lt;your-hugo-site\u0026gt;/.\nNext steps # GitLab supports using custom CNAME’s and TLS certificates. For more details on GitLab Pages, see the GitLab Pages setup documentation.\n另请参阅 # Host on Azure Static Web Apps Host on Netlify Host on GitHub Host on KeyCDN Host on Render "},{"id":68,"href":"/hugo/hostingdeployment/hostonkeycdn/","title":"Host on KeyCDN","section":"Hosting \u0026 部署","content":" Host on KeyCDN # https://gohugo.io/hosting-and-deployment/hosting-on-keycdn/\nAccelerate your Hugo site globally with a KeyCDN integration. This tutorial shows you how to set up your static site as a GitLab page behind a KeyCDN pull zone.\nKeyCDN provides a multitude of features to help accelerate and secure your Hugo site globally including Brotli compression, Let’s Encrypt support, Origin Shield, and more.\nAssumptions # You already have a Hugo page configured You have a GitLab account You have a KeyCDN account Create a KeyCDN Pull Zone # The first step will be to log in to your KeyCDN account and create a new zone. Name this whatever you like and select the Pull Zone option. As for the origin URL, your site will be running on GitLab Pages with a URL of https://youruser.gitlab.io/reponame/. Use this as the Origin URL.\nWhile the origin location doesn’t exist yet, you will need to use your new Zone URL address (or Zone Alias) in the .gitlab-ci.yml file that will be uploaded to your GitLab project.\nEnsure that you use your Zone URL or Zone alias as the BASEURL variable in the example below. This will be the user-visible website address.\nConfigure Your .gitlab-ci.yml File # Your .gitlab-ci.yml file should look similar to the example below. Be sure to modify any variables that are specific to your setup.\nimage: alpine:latest variables: BASEURL: \u0026#34;https://cipull-7bb7.kxcdn.com/\u0026#34; HUGO_VERSION: \u0026#34;0.26\u0026#34; HUGO_CHECKSUM: \u0026#34;67e4ba5ec2a02c8164b6846e30a17cc765b0165a5b183d5e480149baf54e1a50\u0026#34; KEYCDN_ZONE_ID: \u0026#34;75544\u0026#34; before_script: - apk update - apk add curl pages: stage: deploy script: - apk add git - git submodule update --init - curl -sSL https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_${HUGO_VERSION}_Linux-64bit.tar.gz -o /tmp/hugo.tar.gz - echo \u0026#34;${HUGO_CHECKSUM} /tmp/hugo.tar.gz\u0026#34; | sha256sum -c - tar xf /tmp/hugo.tar.gz hugo -C /tmp/ \u0026amp;\u0026amp; cp /tmp/hugo /usr/bin - hugo --baseURL ${BASEURL} - curl \u0026#34;https://api.keycdn.com/zones/purge/${KEYCDN_ZONE_ID}.json\u0026#34; -u \u0026#34;${KEYCDN_API_KEY}:\u0026#34; artifacts: paths: - public only: - master Using this integration method, you will have to specify the Zone ID and your KeyCDN API key as secret variables. To do this, navigate to the top-left menu bar in GitLab and select Projects. Then, select your project and click on the Settings page. Finally, select Pipelines from the sub-menu and scroll down to the Secret Variable section.\nThe Secret Variable for your Zone ID should look similar to:\nWhile the Secret Variable for your API Key will look similar to:\nThe Zone ID and API key are used to purge your zone – it’s not strictly needed but otherwise, the CDN might deliver older versions of your assets for quite a while.\nPush Your Changes to GitLab # Now it’s time to push the newly created repository to GitLab:\ngit remote add origin git@gitlab.com:youruser/ci-example.git git push -u origin master You can watch the progress and CI job output in your Gitlab project under \u0026ldquo;Pipelines\u0026rdquo;.\nAfter verifying your CI job ran without issues, first check that your GitLab page shows up under https://youruser.gitlab.io/reponame/ (it might look broken depending on your browser settings as all links point to your KeyCDN zone – don’t worry about that) and then by heading to whatever Zone alias / Zone URL you defined.\nTo learn more about Hugo hosting options with KeyCDN, check out the complete Hugo hosting with KeyCDN integration guide.\n另请参阅 # Host on Azure Static Web Apps Host on GitLab Host on Netlify Host on Render Hugo Deploy "},{"id":69,"href":"/hugo/hostingdeployment/hostonnetlify/","title":"Host on Netlify","section":"Hosting \u0026 部署","content":" Host on Netlify # https://gohugo.io/hosting-and-deployment/hosting-on-netlify/\nNetlify can host your Hugo site with CDN, continuous deployment, 1-click HTTPS, an admin GUI, and its own CLI.\nNetlify provides continuous deployment services, global CDN, ultra-fast DNS, atomic deploys, instant cache invalidation, one-click SSL, a browser-based interface, a CLI, and many other features for managing your Hugo website.\nAssumptions # You have an account with GitHub, GitLab, or Bitbucket. You have completed the Quick Start or have a Hugo website you are ready to deploy and share with the world. You do not already have a Netlify account. Create a Netlify account # Go to app.netlify.com and select your preferred signup method. This will likely be a hosted Git provider, although you also have the option to sign up with an email address.\nThe following examples use GitHub, but other git providers will follow a similar process.\nSelecting GitHub will bring up an authorization modal for authentication. Select \u0026ldquo;Authorize application.\u0026rdquo;\nCreate a new site with continuous deployment # You’re now already a Netlify member and should be brought to your new dashboard. Select \u0026ldquo;New site from git.\u0026rdquo;\nNetlify will then start walking you through the steps necessary for continuous deployment. First, you’ll need to select your git provider again, but this time you are giving Netlify added permissions to your repositories.\nAnd then again with the GitHub authorization modal:\nSelect the repo you want to use for continuous deployment. If you have a large number of repositories, you can filter through them in real time using repo search:\nOnce selected, you’ll be brought to a screen for basic setup. Here you can select the branch you want to publish, your build command, and your publish (i.e. deploy) directory. The publish directory should mirror that of what you’ve set in your site configuration, the default of which is public. The following steps assume you are publishing from the master branch.\nConfigure Hugo version in Netlify # You can set Hugo version for your environments in netlify.toml file or set HUGO_VERSION as a build environment variable in the Netlify console.\nFor production:\nnetlify.toml\n[context.production.environment] HUGO_VERSION = \u0026#34;0.99.1\u0026#34; For testing:\nnetlify.toml\n[context.deploy-preview.environment] HUGO_VERSION = \u0026#34;0.99.1\u0026#34; The Netlify configuration file can be a little hard to understand and get right for the different environment, and you may get some inspiration and tips from this site’s netlify.toml:\n[build] publish = \u0026#34;public\u0026#34; command = \u0026#34;hugo --gc --minify\u0026#34; [context.production.environment] HUGO_VERSION = \u0026#34;0.111.3\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; HUGO_ENABLEGITINFO = \u0026#34;true\u0026#34; [context.split1] command = \u0026#34;hugo --gc --minify --enableGitInfo\u0026#34; [context.split1.environment] HUGO_VERSION = \u0026#34;0.111.3\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; [context.deploy-preview] command = \u0026#34;hugo --gc --minify --buildFuture -b $DEPLOY_PRIME_URL\u0026#34; [context.deploy-preview.environment] HUGO_VERSION = \u0026#34;0.111.3\u0026#34; [context.branch-deploy] command = \u0026#34;hugo --gc --minify -b $DEPLOY_PRIME_URL\u0026#34; [context.branch-deploy.environment] HUGO_VERSION = \u0026#34;0.111.3\u0026#34; [context.next.environment] HUGO_ENABLEGITINFO = \u0026#34;true\u0026#34; [[redirects]] from = \u0026#34;/npmjs/*\u0026#34; to = \u0026#34;/npmjs/\u0026#34; status = 200 Build and Deploy Site # In the Netlify console, selecting \u0026ldquo;Deploy site\u0026rdquo; will immediately take you to a terminal for your build:.\nOnce the build is finished—this should only take a few seconds–you should now see a \u0026ldquo;Hero Card\u0026rdquo; at the top of your screen letting you know the deployment is successful. The Hero Card is the first element that you see in most pages. It allows you to see a quick summary of the page and gives access to the most common/pertinent actions and information. You’ll see that the URL is automatically generated by Netlify. You can update the URL in \u0026ldquo;Settings.\u0026rdquo;\nVisit the live site.\nNow every time you push changes to your hosted git repository, Netlify will rebuild and redeploy your site.\nSee this blog post for more details about how Netlify handles Hugo versions.\nUse Hugo Themes with Netlify # The git clone method for installing themes is not supported by Netlify. If you were to use git clone, it would require you to recursively remove the .git subdirectory from the theme folder and would therefore prevent compatibility with future versions of the theme.\nA better approach is to install a theme as a proper git submodule. You can read the GitHub documentation for submodules or those found on Git’s website for more information, but the command is similar to that of git clone:\ncd themes git submodule add https://github.com/\u0026lt;THEMECREATOR\u0026gt;/\u0026lt;THEMENAME\u0026gt; It is recommended to only use stable versions of a theme (if it’s versioned) and always check the changelog. This can be done by checking out a specific release within the theme’s directory.\nSwitch to the theme’s directory and list all available versions:\ncd themes/\u0026lt;theme\u0026gt; git tag # exit with q You can checkout a specific version as follows:\ngit checkout tags/\u0026lt;version-name\u0026gt; You can update a theme to the latest version by executing the following command in the root directory of your project:\ngit submodule update --rebase --remote Next Steps # You now have a live website served over HTTPS, distributed through CDN, and configured for continuous deployment. Dig deeper into the Netlify documentation:\nUsing a Custom Domain Setting up HTTPS on Custom Domains Redirects and Rewrite Rules 另请参阅 # Host on GitLab Host on Azure Static Web Apps Host on KeyCDN Host on Render Hugo Deploy "},{"id":70,"href":"/hugo/hostingdeployment/hostonrender/","title":"Host on Render","section":"Hosting \u0026 部署","content":" Host on Render # https://gohugo.io/hosting-and-deployment/hosting-on-render/\nHost your Hugo site for free with Render’s global CDN, fully-managed SSL and auto deploys from GitHub.\nIntroduction # Render is a fully-managed cloud platform where you can host static sites, backend APIs, databases, cron jobs, and all your other apps in one place.\nStatic sites are completely free on Render and include the following:\nContinuous, automatic builds \u0026amp; deploys from GitHub and GitLab. Automatic SSL certificates through Let’s Encrypt. Instant cache invalidation with a lightning fast, global CDN. Unlimited collaborators. Unlimited custom domains. Automatic Brotli compression for faster sites. Native HTTP/2 support. Pull Request Previews. Automatic HTTP → HTTPS redirects. Custom URL redirects and rewrites. Assumptions # You have an account with GitHub or GitLab. You have completed the Quick Start or have a Hugo website you are ready to deploy and share with the world. You have a Render account. You can sign up at https://render.com/register. Deployment # You can set up a Hugo site on Render in two quick steps:\nCreate a new Static Site on Render, and give Render permission to access your GitHub/Gitlab repo. Use the following values during creation: Field Value Build Command hugo --gc --minify (or your own build command) Publish Directory public (or your own output directory) That’s it! Your site will be live on your Render URL (which looks like yoursite.onrender.com) as soon as the build is done.\nContinuous Deploys # Now that Render is connected to your repo, it will automatically build and publish your site any time you push to your GitHub/Gitlab.\nYou can choose to disable auto deploys under the Settings section for your site and deploy it manually from the Render dashboard.\nCDN and Cache Invalidation # Render hosts your site on a global, lightning fast CDN which ensures the fastest possible download times for all your users across the globe.\nEvery deploy automatically and instantly invalidates the CDN cache, so your users can always access the latest content on your site.\nCustom Domains # Add your own domains to your site easily using Render’s custom domains guide.\nPull Request Previews # With Pull Request (PR) previews, you can visualize changes introduced in a pull request instead of simply relying on code reviews.\nOnce enabled, every PR for your site will automatically generate a new static site based on the code in the PR. It will have its own URL, and it will be deleted automatically when the PR is closed.\nRead more about Pull Request Previews on Render.\nHugo Themes # Render automatically downloads all Git submodules defined in your Git repo on every build. This way Hugo themes added as submodules work as expected.\nSupport # Chat with Render developers at https://render.com/chat or email support@render.com if you need help.\n另请参阅 # Host on 21YunBox Host on Azure Static Web Apps Host on GitLab Host on KeyCDN Host on Netlify "},{"id":71,"href":"/hugo/hostingdeployment/hostingonazurestaticwebapps/","title":"Hosting on Azure Static Web Apps","section":"Hosting \u0026 部署","content":" Hosting on Azure Static Web Apps # https://gohugo.io/hosting-and-deployment/hosting-on-azure-static-web-apps/\nLearn how to deploy a Hugo application to Azure Static Web Apps.\nYou can create and deploy a Hugo web application to Azure Static Web Apps. The final result is a new Azure Static Web App with associated GitHub Actions that give you control over how the app is built and published. You’ll learn how to create a Hugo app, set up an Azure Static Web App and deploy the Hugo app to Azure.\nHere’s the tutorial on how to Publish a Hugo site to Azure Static Web Apps.\n另请参阅 # Host on 21YunBox Host on AWS Amplify Host on Azure Static Web Apps Host on Firebase Host on GitHub "},{"id":72,"href":"/hugo/cli/hugo/","title":"hugo","section":"命令","content":" hugo # https://gohugo.io/commands/hugo/\nhugo # ​\thugo 构建您的站点\n概要 # ​\thugo 是主要命令，用于构建您的Hugo站点。\n​\tHugo 是一个用 Go 语言编写的快速且灵活的静态站点生成器，由 spf13 和朋友们倾情打造。\n​\t完整文档请访问 https://gohugo.io/。\nhugo [flags] 选项 # -b, --baseURL string 主机名（和根路径），例如https://spf13.com/ -D, --buildDrafts 包含标记为草稿的内容 -E, --buildExpired 包含已过期的内容 -F, --buildFuture 包含将来发布日期的内容 --cacheDir string 缓存目录的文件系统路径。默认值：$TMPDIR/hugo_cache/ --cleanDestinationDir 从目标目录中删除未在静态目录中找到的文件 --clock string 设置Hugo使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为 \u0026#34;config\u0026#34;） -c, --contentDir string 内容目录的文件系统路径 --debug 调试输出 -d, --destination string 写入文件的文件系统路径 --disableKinds strings 禁用不同类型的页面（首页、RSS 等） --enableGitInfo 将 Git 修订、日期、作者和 CODEOWNERS 信息添加到页面 -e, --environment string 构建环境 --forceSyncStatic 当静态内容发生更改时，复制所有文件。 --gc 启用在构建后运行一些清理任务（删除未使用的缓存文件） -h, --help hugo 的帮助 --ignoreCache 忽略缓存目录 --ignoreVendorPaths string 忽略与给定 Glob 模式匹配的模块路径中的任何 _vendor -l, --layoutDir string 布局目录的文件系统路径 --log 启用日志 --logFile string 日志文件路径（如果设置，日志自动启用） --minify 最小化任何支持的输出格式（HTML、XML 等） --noBuildLock 不创建.hugo_build.lock文件 --noChmod 不同步文件的权限模式 --noTimes 不同步文件的修改时间 --panicOnWarning 在第一个警告日志上发生恐慌 --poll string 将其设置为轮询间隔，例如 --poll 700ms，以使用基于轮询的方法来监视文件系统更改 --printI18nWarnings 打印缺失的翻译 --printMemoryUsage 在间隔期内将内存使用情况打印到屏幕上 --printPathWarnings 打印关于重复目标路径等的警告 --printUnusedTemplates 打印未使用的模板的警告。 --quiet 安静模式构建 --renderToMemory 将渲染结果存储到内存中（仅对基准测试有用） -s, --source string 从中读取文件的文件系统路径 --templateMetrics 显示关于模板执行的指标 --templateMetricsHints 在与 --templateMetrics 结合使用时，计算一些改进提示 -t, --theme strings 要使用的主题（位于/themes/THEMENAME/） --themesDir string 主题目录的文件系统路径 --trace file 将跟踪写入文件（通常没有用处） -v, --verbose 详细输出 --verboseLog 详细日志 -w, --watch 观察文件系统变化，并根据需要重新创建 另请参阅 # hugo completion - 为指定的 shell 生成自动补全脚本 hugo config - 打印站点配置 hugo convert - 将您的内容转换为不同格式 hugo deploy - 将您的站点部署到云提供商。 hugo env - 打印 Hugo 版本和环境信息 hugo gen - 多个有用的生成器的集合。 hugo import - 从其他来源导入您的站点。 hugo list - 列出各种类型的内容 hugo mod - 各种 Hugo 模块助手。 hugo new - 为您的站点创建新内容 hugo server - 一个高性能的网络服务器 hugo version - 打印 Hugo 的版本号 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":73,"href":"/hugo/cli/hugocompletion/","title":"hugo completion","section":"命令","content":" hugo completion # https://gohugo.io/commands/hugo_completion/\nhugo 自动补全 # ​\t生成指定 shell 的 hugo 自动补全脚本。\n概要 # ​\t生成指定 shell 的 hugo 自动补全脚本。有关如何使用生成的脚本的详细信息，请参阅每个子命令的帮助。\n选项 # -h, --help help for completion 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件 (默认为 hugo.yaml|json|toml) --configDir string 配置目录 (默认 \u0026#34;config\u0026#34;) --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略任何与给定 Glob 模式匹配的模块路径的 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，自动启用日志记录） --quiet 安静模式下构建 -s, --source string 文件系统路径，从中读取相对文件 --themesDir string 主题目录的文件系统路径 -v, --verbose 冗长的输出 --verboseLog 冗长的日志记录 另请参阅 # hugo - hugo 构建您的站点 hugo completion bash - 为 bash 生成自动补全脚本 hugo completion fish - 为 fish 生成自动补全脚本 hugo completion powershell - 为 powershell 生成自动补全脚本 hugo completion zsh - 为 zsh 生成自动补全脚本 另请参阅 # hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh hugo config "},{"id":74,"href":"/hugo/cli/hugocompletionbash/","title":"hugo completion bash","section":"命令","content":" hugo completion bash # https://gohugo.io/commands/hugo_completion_bash/\nhugo completion bash # ​\t生成bash shell的自动补全脚本。\n概要 # ​\t生成bash shell的自动补全脚本。\n​\t此脚本依赖于bash-completion软件包。如果尚未安装，则可以通过操作系统的包管理器安装它。\n​\t要在当前shell会话中加载自动补全：\nsource \u0026lt;(hugo completion bash) ​\t要为每个新会话加载自动补全，请执行以下操作一次：\nLinux: # hugo completion bash \u0026gt; /etc/bash_completion.d/hugo macOS: # hugo completion bash \u0026gt; $(brew --prefix)/etc/bash_completion.d/hugo ​\t您需要启动一个新的shell才能使此设置生效。\nhugo completion bash 选项 # -h, --help help for bash --no-descriptions 禁用completion说明 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件 (默认为 hugo.yaml|json|toml) --configDir string 配置目录 (默认 \u0026#34;config\u0026#34;) --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略任何与给定 Glob 模式匹配的模块路径的 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，自动启用日志记录） --quiet 安静模式下构建 -s, --source string 文件系统路径，从中读取相对文件 --themesDir string 主题目录的文件系统路径 -v, --verbose 冗长的输出 --verboseLog 冗长的日志记录 另请参阅 # hugo completion - 为指定的shell生成自动完成脚本 另请参阅 # hugo completion zsh hugo completion hugo completion fish hugo completion powershell hugo config "},{"id":75,"href":"/hugo/cli/hugocompletionfish/","title":"hugo completion fish","section":"命令","content":" hugo completion fish # https://gohugo.io/commands/hugo_completion_fish/\nhugo completion fish # ​\t生成fish shell的自动补全脚本。\n概要 # ​\t生成fish shell的自动补全脚本。\n​\t要在当前的shell会话中加载自动补全：\nhugo completion fish | source ​\t要为每个新会话加载自动补全，请执行以下操作一次：\nhugo completion fish \u0026gt; ~/.config/fish/completions/hugo.fish ​\t您需要启动一个新的shell才能使此设置生效。\nhugo completion fish [flags] 选项 # -h, --help help for fish --no-descriptions 禁用completion说明 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件 (默认为 hugo.yaml|json|toml) --configDir string 配置目录 (默认 \u0026#34;config\u0026#34;) --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略任何与给定 Glob 模式匹配的模块路径的 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，自动启用日志记录） --quiet 安静模式下构建 -s, --source string 文件系统路径，从中读取相对文件 --themesDir string 主题目录的文件系统路径 -v, --verbose 冗长的输出 --verboseLog 冗长的日志记录 另请参阅 # hugo completion - 为指定的shell生成自动完成脚本 另请参阅 # hugo completion hugo completion bash hugo completion powershell hugo completion zsh hugo config "},{"id":76,"href":"/hugo/cli/hugocompletionpowershell/","title":"hugo completion powershell","section":"命令","content":" hugo completion powershell # hugo completion powershell # ​\t生成powershell shell的自动补全脚本。\n概要 # ​\t生成powershell shell的自动补全脚本。\n​\t要在当前的shell会话中加载自动补全：\nhugo completion powershell | Out-String | Invoke-Expression ​\t要在每个新会话中加载自动补全，请将上述命令的输出添加到您的 powershell 配置文件中。\nhugo completion powershell [flags] 选项 # -h, --help help for powershell --no-descriptions disable completion descriptions 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件 (默认为 hugo.yaml|json|toml) --configDir string 配置目录 (默认 \u0026#34;config\u0026#34;) --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略任何与给定 Glob 模式匹配的模块路径的 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，自动启用日志记录） --quiet 安静模式下构建 -s, --source string 文件系统路径，从中读取相对文件 --themesDir string 主题目录的文件系统路径 -v, --verbose 冗长的输出 --verboseLog 冗长的日志记录 另请参阅 # hugo completion - 为指定的shell生成自动完成脚本 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion zsh hugo config "},{"id":77,"href":"/hugo/cli/hugocompletionzsh/","title":"hugo completion zsh","section":"命令","content":" hugo completion zsh # https://gohugo.io/commands/hugo_completion_zsh/\nhugo completion zsh # ​\t生成zsh shell的自动补全脚本。\n概要 # ​\t生成zsh shell的自动补全脚本。\n​\t如果您的环境中没有启用 shell 自动补全，您需要启用它。您可以执行以下命令：\necho \u0026#34;autoload -U compinit; compinit\u0026#34; \u0026gt;\u0026gt; ~/.zshrc ​\t为了在当前的 shell 会话中载入自动补全：\nsource \u0026lt;(hugo completion zsh); compdef _hugo hugo ​\t要为每个新会话加载自动补全，请执行以下操作一次：\nLinux: # hugo completion zsh \u0026gt; \u0026#34;${fpath[1]}/_hugo\u0026#34; macOS: # hugo completion zsh \u0026gt; $(brew --prefix)/share/zsh/site-functions/_hugo ​\t您需要启动一个新的shell才能使此设置生效。\nhugo completion zsh [flags] 选项 # -h, --help help for zsh --no-descriptions 禁用completion说明 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件 (默认为 hugo.yaml|json|toml) --configDir string 配置目录 (默认 \u0026#34;config\u0026#34;) --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略任何与给定 Glob 模式匹配的模块路径的 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，自动启用日志记录） --quiet 安静模式下构建 -s, --source string 文件系统路径，从中读取相对文件 --themesDir string 主题目录的文件系统路径 -v, --verbose 冗长的输出 --verboseLog 冗长的日志记录 另请参阅 # hugo completion - 为指定的shell生成自动完成脚本 另请参阅 # hugo completion bash hugo completion hugo completion fish hugo completion powershell hugo config "},{"id":78,"href":"/hugo/cli/hugoconfig/","title":"hugo config","section":"命令","content":" hugo config # https://gohugo.io/commands/hugo_config/\nhugo config # ​\t打印站点配置\n概要 # ​\t打印站点配置，包括默认和自定义设置。\nhugo config [flags] 选项 # --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00 -e, --environment string build environment -h, --help help for config --ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern -s, --source string filesystem path to read files relative from --themesDir string filesystem path to themes directory --clock string 设置Hugo使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 -e, --environment string 构建环境 -h, --help 帮助配置 --ignoreVendorPaths string 忽略任何与给定Glob模式匹配的模块路径的_vendor -s, --source string 相对于读取文件的文件系统路径 --themesDir string 文件系统路径到主题目录 从父命令继承的选项 # --config string 配置文件（默认为hugo.yaml | json | toml） --configDir string 配置目录（默认值为“config”） --debug 调试输出 --log 启用日志记录 --logFile string 日志文件路径（如果设置，则自动启用日志记录） --quiet 静默模式下构建 -v, --verbose 详细输出 --verboseLog 详细日志记录 另请参阅 # hugo - hugo构建您的站点 hugo config mounts - 打印配置的文件挂载 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":79,"href":"/hugo/cli/hugoconfigmounts/","title":"hugo config mounts","section":"命令","content":" hugo config mounts # https://gohugo.io/commands/hugo_config_mounts/\nhugo config mounts # ​\t打印已配置的文件挂载\nhugo config mounts [flags] 选项 # -h, --help help for mounts 从父命令继承的选项 # --clock string 设置Hugo使用的时钟，例如--clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为hugo.yaml|json|toml） --configDir string 配置目录（默认为“config”） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略任何与给定Glob模式匹配的模块路径的_vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，则自动启用日志记录） --quiet 静默模式下构建 -s, --source string 从文件系统中读取文件的相对路径 --themesDir string 主题目录的文件系统路径 -v, --verbose 详细输出 --verboseLog 详细日志记录 另请参阅 # hugo config - 打印站点配置 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":80,"href":"/hugo/cli/hugoconvert/","title":"hugo convert","section":"命令","content":" hugo convert # https://gohugo.io/commands/hugo_convert/\nhugo convert # ​\t将您的内容转换为不同的格式\n概要 # ​\t将您的内容（例如前置元数据）转换为不同的格式。\n​\t有关更多信息，请参见转换的子命令 toJSON、toTOML 和 toYAML。\n选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 -e, --environment string 构建环境 -h, --help convert 的帮助信息 --ignoreVendorPaths string 忽略与给定 Glob 模式匹配的模块路径的任何 _vendor -o, --output string 要将文件写入的文件系统路径 -s, --source string 从中读取文件的文件系统路径相对路径 --themesDir string 主题目录的文件系统路径 --unsafe 启用不安全的操作，请先备份 从父命令继承的选项 # --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为“config”） --debug 调试输出 --log 启用日志记录 --logFile string 日志文件路径（如果设置，将自动启用日志记录） --quiet 安静模式构建 -v, --verbose 详细输出 --verboseLog 详细日志记录 另请参阅 # hugo - hugo 构建您的站点 hugo convert toJSON - 将前置元数据转换为 JSON hugo convert toTOML - 将前置元数据转换为 TOML hugo convert toYAML - 将前置元数据转换为 YAML 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":81,"href":"/hugo/cli/hugoconverttojson/","title":"hugo convert toJSON","section":"命令","content":" hugo convert toJSON # https://gohugo.io/commands/hugo_convert_tojson/\nhugo convert toJSON # ​\t将前置元数据转换为 JSON 格式。\n概要 # ​\ttoJSON 将内容目录中的所有前置元数据转换为使用 JSON 格式的前置元数据。\nhugo convert toJSON [flags] 选项 # -h, --help help for toJSON 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为 \u0026#34;config\u0026#34;） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略所有与给定 Glob 模式匹配的模块路径的 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，将自动启用日志记录） -o, --output string 写入文件的文件系统路径 --quiet 静默模式构建 -s, --source string 相对读取文件的文件系统路径 --themesDir string 主题目录的文件系统路径 --unsafe 启用不太安全的操作，请先备份 -v, --verbose 输出详细信息 --verboseLog 输出详细日志记录 另请参阅 # hugo convert - 将您的内容转换为不同的格式 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":82,"href":"/hugo/cli/hugoconverttotoml/","title":"hugo convert toTOML","section":"命令","content":" hugo convert toTOML # https://gohugo.io/commands/hugo_convert_totoml/\nhugo convert toTOML # ​\t将前置元数据转换为 TOML格式。\n概要 # ​\ttoTOML 将内容目录中的所有前置元数据转换为使用 TOML 格式的前置元数据。\nhugo convert toTOML [flags] 选项 # -h, --help help for toTOML 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为“config”） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略与给定 Glob 模式匹配的模块路径的任何 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，将自动启用日志记录） -o, --output string 写入文件的文件系统路径 --quiet 静音模式下进行构建 -s, --source string 从文件系统路径读取与文件相关的文件 --themesDir string 主题目录的文件系统路径 --unsafe 启用更少安全的操作，请先备份 -v, --verbose 详细输出 --verboseLog 详细日志记录 另请参阅 # hugo convert - Convert your content to different formats 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":83,"href":"/hugo/cli/hugoconverttoyaml/","title":"hugo convert toYAML","section":"命令","content":" hugo convert toYAML # https://gohugo.io/commands/hugo_convert_toyaml/\nhugo convert toYAML # ​\t将前置元数据转换为 YAML格式。\n概要 # ​\ttoYAML 将内容目录中的所有前置元数据转换为使用 YAML 格式的前置元数据。\nhugo convert toYAML [flags] 选项 # -h, --help help for toYAML 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为“config”） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略与给定 Glob 匹配的模块路径的 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，日志记录将自动启用） -o, --output string 用于写入文件的文件系统路径 --quiet 安静模式构建 -s, --source string 文件系统路径，从中读取文件相对路径 --themesDir string 文件系统路径，主题目录 --unsafe 启用更少安全操作，请首先备份 -v, --verbose 详细输出 --verboseLog 详细日志记录 另请参阅 # hugo convert - 将您的内容转换为不同的格式 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":84,"href":"/hugo/cli/hugodeploy/","title":"hugo deploy","section":"命令","content":" hugo deploy # https://gohugo.io/commands/hugo_deploy/\nhugo deploy # ​\t将您的站点部署到云提供商。\n概要 # ​\t将您的站点部署到云提供商。\n​\t请参阅 https://gohugo.io/hosting-and-deployment/hugo-deploy/ 以获取详细的文档。\nhugo deploy [flags] 选项 # --clock string 设置Hugo使用的时钟，例如--clock 2021-11-06T22:30:00.00+09:00 --confirm 在对目标进行更改之前要求确认 --dryRun 干况运行 -e, --environment string 构建环境 --force 强制上传所有文件 -h, --help deploy的帮助信息 --ignoreVendorPaths string 忽略匹配给定Glob模式的模块路径中的任何_vendor --invalidateCDN 使部署目标中列出的CDN缓存失效（默认值为true） --maxDeletes int 要删除的文件的最大数量，或-1禁用（默认值为256） --workers int 传输文件的工作者数。（默认值为10） -s, --source string 从其中读取文件的文件系统路径 --target string 部署目标中的目标部署在配置文件中；默认为第一个 --themesDir string 主题目录的文件系统路径 从父命令继承的选项 # --config string 配置文件（默认为hugo.yaml|json|toml） --configDir string 配置目录（默认为“config”） --debug 调试输出 --log 启用日志记录 --logFile string 日志文件路径（如果设置，将自动启用日志记录） --quiet 静默模式下构建 -v, --verbose 冗长输出 --verboseLog 冗长日志记录 另请参阅 # hugo - 构建您的站点 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":85,"href":"/hugo/hostingdeployment/hugodeploy/","title":"Hugo Deploy","section":"Hosting \u0026 部署","content":" Hugo Deploy # https://gohugo.io/hosting-and-deployment/hugo-deploy/\nYou can upload your site to GCS, S3, or Azure using the Hugo CLI.\nYou can use the \u0026ldquo;hugo deploy\u0026rdquo; command to upload your site directly to a Google Cloud Storage (GCS) bucket, an AWS S3 bucket, and/or an Azure Storage container.\nAssumptions # You have completed the Quick Start or have a Hugo website you are ready to deploy and share with the world. You have an account with the service provider (Google Cloud, AWS, or Azure) that you want to deploy to. You have authenticated. Google Cloud: Install the CLI and run gcloud auth login. AWS: Install the CLI and run aws configure. Azure: Install the CLI and run az login. NOTE: Each service supports alternatives for authentication, including using environment variables. See here for more details. Create a bucket to deploy to # Create a storage bucket to deploy your site to. If you want your site to be public, be sure to configure the bucket to be publicly readable.\nGoogle Cloud Storage (GCS) # Follow the GCS instructions for how to create a bucket.\nAWS S3 # Follow the AWS instructions for how to create a bucket.\nAzure Storage # Follow the Azure instructions for how to create a storage container.\nConfigure the deployment # In the configuration file for your site, add a [deployment] section with one or more [[deployment.targets]] section, one for each deployment target. Here’s a detailed example:\n[deployment] # By default, files are uploaded in an arbitrary order. # Files that match the regular expressions in the \u0026#34;Order\u0026#34; list # will be uploaded first, in the listed order. order = [\u0026#34;.jpg$\u0026#34;, \u0026#34;.gif$\u0026#34;] [[deployment.targets]] # An arbitrary name for this target. name = \u0026#34;mydeployment\u0026#34; # The Go Cloud Development Kit URL to deploy to. Examples: # GCS; see https://gocloud.dev/howto/blob/#gcs # URL = \u0026#34;gs://\u0026lt;Bucket Name\u0026gt;\u0026#34; # S3; see https://gocloud.dev/howto/blob/#s3 # For S3-compatible endpoints, see https://gocloud.dev/howto/blob/#s3-compatible # URL = \u0026#34;s3://\u0026lt;Bucket Name\u0026gt;?region=\u0026lt;AWS region\u0026gt;\u0026#34; # Azure Blob Storage; see https://gocloud.dev/howto/blob/#azure # URL = \u0026#34;azblob://$web\u0026#34; # You can use a \u0026#34;prefix=\u0026#34; query parameter to target a subfolder of the bucket: # URL = \u0026#34;gs://\u0026lt;Bucket Name\u0026gt;?prefix=a/subfolder/\u0026#34; # If you are using a CloudFront CDN, deploy will invalidate the cache as needed. cloudFrontDistributionID = \u0026lt;ID\u0026gt; # Optionally, you can include or exclude specific files. # See https://godoc.org/github.com/gobwas/glob#Glob for the glob pattern syntax. # If non-empty, the pattern is matched against the local path. # All paths are matched against in their filepath.ToSlash form. # If exclude is non-empty, and a local or remote file\u0026#39;s path matches it, that file is not synced. # If include is non-empty, and a local or remote file\u0026#39;s path does not match it, that file is not synced. # As a result, local files that don\u0026#39;t pass the include/exclude filters are not uploaded to remote, # and remote files that don\u0026#39;t pass the include/exclude filters are not deleted. # include = \u0026#34;**.html\u0026#34; # would only include files with \u0026#34;.html\u0026#34; suffix # exclude = \u0026#34;**.{jpg, png}\u0026#34; # would exclude files with \u0026#34;.jpg\u0026#34; or \u0026#34;.png\u0026#34; suffix # [[deployment.matchers]] configure behavior for files that match the Pattern. # See https://golang.org/pkg/regexp/syntax/ for pattern syntax. # Pattern searching is stopped on first match. # Samples: [[deployment.matchers]] # Cache static assets for 1 year. pattern = \u0026#34;^.+\\\\.(js|css|svg|ttf)$\u0026#34; cacheControl = \u0026#34;max-age=31536000, no-transform, public\u0026#34; gzip = true [[deployment.matchers]] pattern = \u0026#34;^.+\\\\.(png|jpg)$\u0026#34; cacheControl = \u0026#34;max-age=31536000, no-transform, public\u0026#34; gzip = false [[deployment.matchers]] # Set custom content type for /sitemap.xml pattern = \u0026#34;^sitemap\\\\.xml$\u0026#34; contentType = \u0026#34;application/xml\u0026#34; gzip = true [[deployment.matchers]] pattern = \u0026#34;^.+\\\\.(html|xml|json)$\u0026#34; gzip = true Deploy # To deploy to a target:\nhugo deploy [--target=\u0026lt;target name\u0026gt;, defaults to first target] Hugo will identify and apply any local changes that need to be reflected to the remote target. You can use --dryRun to see the changes without applying them, or --confirm to be prompted before making changes.\nSee hugo help deploy for more command-line options.\n另请参阅 # Host on Azure Static Web Apps Host on GitLab Host on KeyCDN Host on Netlify Host on Render "},{"id":86,"href":"/hugo/cli/hugoenv/","title":"hugo env","section":"命令","content":" hugo env # https://gohugo.io/commands/hugo_env/\nhugo env # ​\t输出Hugo版本和环境信息\n概要 # ​\t输出Hugo版本和环境信息。这在Hugo错误报告中非常有用。\n​\t如果加上-v标志，您将得到一个完整的依赖项列表。\nhugo env [flags] 选项 # -h, --help help for env 从父命令继承的选项 # --clock string 设置Hugo使用的时钟，例如--clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为hugo.yaml|json|toml） --configDir string 配置目录（默认为“config”） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略任何与给定Glob模式匹配的模块路径的_vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，自动启用日志记录） --quiet 静默模式下构建 -s, --source string 从文件系统路径读取相对文件 --themesDir string 文件系统路径到主题目录 -v, --verbose 详细输出 --verboseLog 详细记录日志 另请参阅 # hugo - 构建您的站点 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":87,"href":"/hugo/cli/hugogen/","title":"hugo gen","section":"命令","content":" hugo gen # https://gohugo.io/commands/hugo_gen/\nhugo gen # ​\t一个包含多个有用生成器的集合。\n选项 # -h, --help help for gen 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如：--clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为 \u0026#34;config\u0026#34;） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略任何与给定 Glob 模式匹配的模块路径的 _vendor 目录 --log 启用日志记录 --logFile string 日志文件路径（如果设置，则自动启用日志记录） --quiet 安静模式下构建 -s, --source string 读取文件的文件系统路径（相对路径） --themesDir string 主题目录的文件系统路径 -v, --verbose 详细输出 --verboseLog 详细日志记录 另请参阅 # hugo - hugo 构建您的站点 hugo gen chromastyles - 生成 Chroma 代码高亮器的 CSS 样式表 hugo gen doc - 为 Hugo CLI 生成 Markdown 文档。 hugo gen man - 为 Hugo CLI 生成 man 页面 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":88,"href":"/hugo/cli/hugogenchromastyles/","title":"hugo gen chromastyles","section":"命令","content":" hugo gen chromastyles # https://gohugo.io/commands/hugo_gen_chromastyles/\nhugo gen chromastyles # ​\t为 Chroma 代码高亮器生成 CSS 样式表\n概要 # ​\t为给定样式的 Chroma 代码高亮器生成 CSS 样式表。如果在配置中禁用了 markup.highlight.noClasses，则需要此样式表。\n​\t请参阅 https://xyproto.github.io/splash/docs/all.html 以预览可用的样式。\nhugo gen chromastyles [flags] 选项 # -h, --help 帮助信息 --highlightStyle string 用于突出显示行的样式（请参阅 https://github.com/alecthomas/chroma）（默认值为“bg:#ffffcc”） --linesStyle string 用于行号的样式（请参阅 https://github.com/alecthomas/chroma） --style string 高亮器样式（请参阅 https://xyproto.github.io/splash/docs/）（默认值为“friendly”） 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为“config”） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略与给定 Glob 模式匹配的模块路径中的任何 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，将自动启用日志记录） --quiet 在安静模式下构建 -s, --source string 从文件系统路径读取相对文件 --themesDir string 主题目录的文件系统路径 -v, --verbose 冗长输出 --verboseLog 冗长的日志记录 另请参阅 # hugo gen - 一个包含多个有用生成器的集合。 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":89,"href":"/hugo/cli/hugogendoc/","title":"hugo gen doc","section":"命令","content":" hugo gen doc # https://gohugo.io/commands/hugo_gen_doc/\nhugo gen doc # Generate Markdown documentation for the Hu CLI.\n​\t为 Hugo CLI 生成 Markdown 文档。\n概要 # ​\t为 Hugo CLI 生成 Markdown 文档。\n​\t这个命令主要用于为 https://gohugo.io/ 的 Hugo 命令行接口创建最新的文档。\n​\t它为每个命令创建一个带有适合在 Hugo 中渲染的前置元数据的 Markdown 文件。\nhugo gen doc [flags] 选项 # --dir string 要写入文档的目录。(默认值为 \u0026#34;/tmp/hugodoc/\u0026#34;) -h, --help help for doc 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认值为 \u0026#34;config\u0026#34;） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略与给定 Glob 模式匹配的模块路径的任何 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，日志记录将自动启用） --quiet 静默模式构建 -s, --source string 从中读取文件的文件系统路径 --themesDir string 主题目录的文件系统路径 -v, --verbose 冗长输出 --verboseLog 冗长日志 另请参阅 # hugo gen - 一个包含多个有用生成器的集合。 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":90,"href":"/hugo/cli/hugogenman/","title":"hugo gen man","section":"命令","content":" hugo gen man # https://gohugo.io/commands/hugo_gen_man/\nhugo gen man # ​\t为 Hugo CLI 生成 man 页面\n概要 # ​\t该命令可以自动生成最新版本的Hugo CLI 的man页。默认情况下，它会在当前目录下的\u0026quot;man\u0026quot;目录中创建man页文件。\nhugo gen man [flags] 选项 # --dir string 写入man页的目录 (默认值为 \u0026#34;man/\u0026#34;) -h, --help help for man 从父命令继承的选项 # --clock string 设置Hugo使用的时钟，例如--clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件 (默认为 hugo.yaml|json|toml) --configDir string 配置目录 (默认为 \u0026#34;config\u0026#34;) --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略匹配给定Glob模式的模块路径中的任何_vendor --log 启用日志记录 --logFile string 日志文件路径 (如果设置，则自动启用日志记录) --quiet 静默模式构建 -s, --source string 读取文件的文件系统路径相对于哪里 --themesDir string 主题目录的文件系统路径 -v, --verbose 详细输出 --verboseLog 详细日志记录 另请参阅 # hugo gen - 一个包含多个有用生成器的集合。 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":91,"href":"/hugo/cli/hugoimport/","title":"hugo import","section":"命令","content":" hugo import # https://gohugo.io/commands/hugo_import/\nhugo import # ​\t从其他站点生成器导入您的站点。\n概要 # ​\t从其他站点生成器（如Jekyll）导入您的站点。\n​\t导入需要一个子命令，例如 hugo import jekyll jekyll_root_path target_path 。\n选项 # -h, --help help for import 从父命令继承的选项 # --clock string 设置Hugo使用的时钟，例如：--clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为hugo.yaml | json | toml） --configDir string 配置目录（默认为“config”） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略与给定Glob模式匹配的模块路径的任何_vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置了，则自动启用日志记录） --quiet 在静默模式下构建 -s, --source string 用于读取文件的文件系统路径 --themesDir string 主题目录的文件系统路径 -v, --verbose 冗长输出 --verboseLog 冗长日志记录 另请参阅 # hugo - hugo 构建您的站点 hugo import jekyll - hugo import from Jekyll 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":92,"href":"/hugo/cli/hugoimportjekyll/","title":"hugo import jekyll","section":"命令","content":" hugo import jekyll # https://gohugo.io/commands/hugo_import_jekyll/\nhugo import jekyll # hugo import from Jekyll\n概要 # hugo import from Jekyll.\n​\t从 Jekyll 导入需要两个路径，例如： hugo import jekyll jekyll_root_path target_path.\nhugo import jekyll [flags] 选项 # --force 允许导入到非空目标目录中 -h, --help help for jekyll 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为 \u0026#34;config\u0026#34;） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略匹配给定 Glob 模式的模块路径下的任何 _vendor --log 启用日志 --logFile string 日志文件路径（如果设置，自动启用日志记录） --quiet 安静模式下构建 -s, --source string 从文件系统路径中相对读取文件 --themesDir string 主题目录的文件系统路径 -v, --verbose 显示详细输出 另请参阅 # hugo import - 从其他站点生成器导入您的站点。 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":93,"href":"/hugo/cli/hugolist/","title":"hugo list","section":"命令","content":" hugo list # https://gohugo.io/commands/hugo_list/\nhugo list # ​\t列出各种类型的内容\n概要 # ​\t列出各种类型的内容。\n​\tList 命令需要一个子命令，例如 hugo list drafts。\n选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 -e, --environment string 构建环境 -h, --help 列出帮助信息 --ignoreVendorPaths string 忽略与给定 Glob 模式匹配的模块路径中的任何 _vendor 文件夹 -s, --source string 从文件系统路径读取文件的相对路径 --themesDir string 主题目录的文件系统路径 从父命令继承的选项 # --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为“config”） --debug 调试输出 --log 启用日志记录 --logFile string 日志文件路径（如果设置了该选项，则会自动启用日志记录） --quiet 静默模式下构建 -v, --verbose 输出详细信息 --verboseLog 输出详细日志记录 另请参阅 # hugo - hugo 构建您的站点 hugo list all - 列出所有文章 hugo list drafts - 列出所有草稿 hugo list expired - 列出所有已过期的文章 hugo list future - 列出所有将来发布的文章 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":94,"href":"/hugo/cli/hugolistall/","title":"hugo list all","section":"命令","content":" hugo list all # https://gohugo.io/commands/hugo_list_all/\nhugo list all # ​\t列出所有文章\n概要 # ​\t列出您内容目录中的所有文章，包括草稿、未来和过期的页面。\nhugo list all [flags] 选项 # -h, --help help for all 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为 \u0026#34;config\u0026#34;） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略匹配给定 Glob 模式的模块路径中的任何 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，将自动启用日志记录） --quiet 静默模式下构建 -s, --source string 文件系统路径，相对于该路径读取文件 --themesDir string 主题目录的文件系统路径 -v, --verbose 冗长输出 --verboseLog 详细日志记录 另请参阅 # hugo list - 列出各种类型的内容 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":95,"href":"/hugo/cli/hugolistdrafts/","title":"hugo list drafts","section":"命令","content":" hugo list drafts # https://gohugo.io/commands/hugo_list_drafts/\nhugo list drafts # ​\t列出所有草稿\n概要 # 列出您内容目录中的所有草稿。\nhugo list drafts [flags] 选项 # -h, --help help for drafts 从父命令继承的选项 # --clock string 设置Hugo使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为hugo.yaml | json | toml） --configDir string 配置目录（默认为“config”） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略与给定通配符匹配的模块路径中的任何_vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，则会自动启用日志记录） --quiet 以安静模式构建 -s, --source string 从中读取文件的文件系统路径 --themesDir string 进入主题目录的文件系统路径 -v, --verbose 详细输出 --verboseLog 详细记录日志 另请参阅 # hugo list - 列出各种类型的内容 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":96,"href":"/hugo/cli/hugolistexpired/","title":"hugo list expired","section":"命令","content":" hugo list expired # https://gohugo.io/commands/hugo_list_expired/\nhugo list expired # ​\t列出已过期的所有文章\n概要 # ​\t列出您内容目录中所有已过期的文章。\nhugo list expired [flags] 选项 # -h, --help help for expired 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如：--clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为 \u0026#34;config\u0026#34;） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略与给定 Glob 模式匹配的模块路径的任何 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，则自动启用日志记录） --quiet 静默模式构建 -s, --source string 从文件系统路径读取相对文件 --themesDir string 主题目录的文件系统路径 -v, --verbose 冗长输出 --verboseLog 冗长日志记录 另请参阅 # hugo list - 列出各种类型的内容 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":97,"href":"/hugo/cli/hugolistfuture/","title":"hugo list future","section":"命令","content":" hugo list future # https://gohugo.io/commands/hugo_list_future/\nhugo list future # ​\t列出所有日期为将来的文章\n概要 # ​\t列出您内容目录中所有将来发布的文章。\nhugo list future [flags] 选项 # -h, --help help for future 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，比如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为 \u0026#34;config\u0026#34;） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略与给定 Glob 模式匹配的模块路径的任何 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置了，则自动启用日志记录） --quiet 静默模式构建 -s, --source string 从文件系统路径读取文件的相对路径 --themesDir string 主题目录的文件系统路径 -v, --verbose 详细输出 --verboseLog 详细日志记录 另请参阅 # hugo list - 列出各种类型的内容 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":98,"href":"/hugo/cli/hugomod/","title":"hugo mod","section":"命令","content":" hugo mod # https://gohugo.io/commands/hugo_mod/\nhugo mod # ​\t各种 Hugo 模块的辅助工具。\n概要 # ​\t提供各种辅助工具，以帮助管理项目依赖图中的模块。\n​\t大多数操作需要在您的系统上安装 Go 版本（\u0026gt;= Go 1.12）和相关的版本控制系统客户端（通常是 Git）。如果您仅在 /themes 内操作模块或通过 \u0026ldquo;hugo mod vendor\u0026rdquo; 将它们标记为供应商，则不需要安装它们。\n​\t这里的大多数操作需要在您的系统上安装了Go版本（\u0026gt;= Go 1.12）和相关的VCS客户端（通常是Git）。如果您只操作/themes中的模块，或者通过 \u0026ldquo;hugo mod vendor\u0026rdquo; 将它们打包到_vendor目录，那么不需要这些依赖。\n​\t请注意，Hugo将始终首先解析站点配置中定义的组件，这些组件由_vendor目录（如果没有提供-ignoreVendorPaths标志）、Go模块或主题目录内的文件夹提供，按照此顺序解析。\n​\t有关更多信息，请参见 https://gohugo.io/hugo-modules/。\n选项 # -b, --baseURL string 根目录的主机名（和路径），例如 https://spf13.com/ -D, --buildDrafts 包括被标记为草稿的内容 -E, --buildExpired 包括已过期的内容 -F, --buildFuture 包括未来发布日期的内容 --cacheDir string 缓存目录的文件系统路径。默认为：$TMPDIR/hugo_cache/ --cleanDestinationDir 删除目标中未在静态目录中找到的文件 --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 -c, --contentDir string 内容目录的文件系统路径 -d, --destination string 要写入文件的文件系统路径 --disableKinds strings 禁用不同类型的页面（主页、RSS 等） --enableGitInfo 将 Git 版本、日期、作者和 CODEOWNERS 信息添加到页面中 -e, --environment string 构建环境 --forceSyncStatic 当静态文件更改时复制所有文件。 --gc 启用以运行一些清理任务（删除未使用的缓存文件）。 -h, --help 查看 mod 帮助 --ignoreCache 忽略缓存目录 --ignoreVendorPaths string 忽略与给定 Glob 模式匹配的模块路径的任何 _vendor -l, --layoutDir string 布局目录的文件系统路径 --minify 最小化任何支持的输出格式（HTML、XML 等） --noBuildLock 不创建 .hugo_build.lock 文件 --noChmod 不同步文件的权限模式 --noTimes 不同步文件的修改时间 --panicOnWarning 在第一个 WARNING 日志上引发 panic --poll string 将其设置为轮询 从父命令继承的选项 # --config string 配置文件（默认为hugo.yaml|json|toml） --configDir string 配置目录（默认为 \u0026#34;config\u0026#34;） --debug 调试输出 --log 启用日志 --logFile string 日志文件路径（如果设置，自动启用日志） --quiet 安静模式构建 -v, --verbose 详细输出 --verboseLog 详细日志记录 另请参阅 # hugo - hugo 构建您的站点 hugo mod clean - 删除当前项目的Hugo模块缓存。 hugo mod get - 解析您当前的Hugo项目的依赖项。 hugo mod graph - 打印模块依赖关系图表。 hugo mod init - 将此项目初始化为Hugo模块。 hugo mod npm - 各种npm助手。 hugo mod tidy - 删除go.mod和go.sum中未使用的条目。 hugo mod vendor - 将所有模块依赖项打包到_vendor目录中。 hugo mod verify - 校验依赖关系。 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":99,"href":"/hugo/cli/hugomodclean/","title":"hugo mod clean","section":"命令","content":" hugo mod clean # https://gohugo.io/commands/hugo_mod_clean/\nhugo mod clean # ​\t删除当前项目的Hugo模块缓存。\n概要 # ​\t删除当前项目的Hugo模块缓存。\n​\t请注意，运行此命令后，所有依赖项将在下次运行\u0026quot;hugo\u0026quot;时重新下载。\n​\t还要注意，如果为\u0026quot;modules\u0026quot;文件缓存配置了正的maxAge，则也将在\u0026quot;hugo –gc\u0026quot;中清除它。\nhugo mod clean [flags] 选项 # --all 清除整个模块缓存 -h, --help 清除帮助 --pattern string 匹配要清除的模块路径的模式（如果未设置，则为全部），例如“**hugo*”\t从父命令继承的选项 # --clock string 设置Hugo使用的时钟，例如--clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为hugo.yaml|json|toml） --configDir string 配置目录（默认为“config”） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略匹配给定Glob模式的模块路径的任何_vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，自动启用日志记录） --quiet 安静模式构建 -s, --source string 从文件系统路径读取文件的相对路径 --themesDir string 主题目录的文件系统路径 -v, --verbose 冗长输出 --verboseLog 详细日志记录 另请参阅 # hugo mod - 各种Hugo模块助手. 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":100,"href":"/hugo/cli/hugomodget/","title":"hugo mod get","section":"命令","content":" hugo mod get # https://gohugo.io/commands/hugo_mod_get/\nhugo mod get # ​\t解析您当前 Hugo 项目的依赖项。\n概要 # ​\t解析您当前 Hugo 项目的依赖项。\n​\t以下是一些示例：\n​\t安装给定模块的最新版本：\nhugo mod get github.com/gohugoio/testshortcodes ​\t安装特定版本：\nhugo mod get github.com/gohugoio/testshortcodes@v0.3.0 ​\t安装所有模块依赖的最新版本：\nhugo mod get -u hugo mod get -u ./... (recursive) ​\t运行 \u0026ldquo;go help get\u0026rdquo; 以获取更多信息。所有 \u0026ldquo;go get\u0026rdquo; 可用的标志在此处也是相关的。\n​\t请注意，Hugo将始终首先解析站点配置中定义的组件，这些组件由_vendor目录（如果没有提供-ignoreVendorPaths标志）、Go模块或主题目录内的文件夹提供，按照此顺序解析。\n​\t有关详细信息，请参阅 https://gohugo.io/hugo-modules/。\nhugo mod get [flags] 选项 # -h, --help help for get 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为 \u0026#34;config\u0026#34;） --debug 调试输出 -e，--environment string 构建环境 --ignoreVendorPaths string 忽略匹配给定 Glob 模式的模块路径的任何 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，自动启用日志记录） --quiet 安静模式下构建 -s，--source string 从文件系统路径读取文件，相对路径 --themesDir string 主题目录的文件系统路径 -v，--verbose 输出详细信息 --verboseLog 输出详细日志 另请参阅 # hugo mod - 各种 Hugo 模块助手。 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":101,"href":"/hugo/cli/hugomodgraph/","title":"hugo mod graph","section":"命令","content":" hugo mod graph # https://gohugo.io/commands/hugo_mod_graph/\nhugo mod graph # ​\t打印模块依赖图。\n概要 # ​\t打印包含有关模块状态（禁用、供应商）信息的模块依赖图。请注意，对于供应商模块，将列出版本而不是来自 go.mod 的版本。\nhugo mod graph [flags] 选项 # -h, --help help for graph 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为 \u0026#34;config\u0026#34;） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略与给定 Glob 模式匹配的模块路径中的任何 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，则自动启用日志记录） --quiet 安静模式构建 -s, --source string 文件系统路径，以相对路径读取文件 --themesDir string 主题目录的文件系统路径 -v, --verbose 详细输出 --verboseLog 详细日志记录 另请参阅 # hugo mod - 各种 Hugo 模块助手。 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":102,"href":"/hugo/cli/hugomodinit/","title":"hugo mod init","section":"命令","content":" hugo mod init # https://gohugo.io/commands/hugo_mod_init/\nhugo mod init # ​\t将此项目初始化为 Hugo 模块。\n概要 # ​\t将该项目初始化为 Hugo 模块。它会尝试猜测模块路径，但您也可以通过参数来指定，例如：\nhugo mod init github.com/gohugoio/testshortcodes ​\t请注意，Hugo 模块支持多模块项目，因此您可以在 GitHub 的子文件夹中初始化 Hugo 模块，作为一个示例。\nhugo mod init [flags] 选项 # -h, --help help for init 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为“config”） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略任何 _vendor 目录，以匹配给定的 Glob 模式的模块路径 --log 启用日志记录 --logFile string 日志文件路径（如果设置，将自动启用日志记录） --quiet 在安静模式下构建 -s, --source string 从文件系统路径读取文件的相对路径 --themesDir string 主题目录的文件系统路径 -v, --verbose 输出详细信息 --verboseLog 输出详细的日志记录 另请参阅 # hugo mod - 各种 Hugo 模块助手。 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":103,"href":"/hugo/cli/hugomodnpm/","title":"hugo mod npm","section":"命令","content":" hugo mod npm # https://gohugo.io/commands/hugo_mod_npm/\nhugo mod npm # ​\t各种npm助手。\n概要 # ​\t各种npm（Node包管理器）助手。\nhugo mod npm [flags] 选项 # -h, --help help for npm 从父命令继承的选项 # --clock string 设置Hugo使用的时钟，例如 --clock 2021-11-06T22: 30: 00.00 + 09: 00 --config string 配置文件（默认为hugo.yaml| json | toml） --configDir string 配置目录（默认为“config”） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略匹配给定Glob模式的模块路径中的任何_vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，则自动启用日志记录） --quiet 静默模式构建 -s, --source string 相对于该文件系统路径读取文件的路径 --themesDir string 主题目录所在的文件系统路径 -v, --verbose 详细输出 --verboseLog 详细日志记录 另请参阅 # hugo mod - 各种 Hugo 模块助手。 hugo mod npm pack - 实验性功能：为您的项目准备并编写一个组合的package.json文件。 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":104,"href":"/hugo/cli/hugomodnpmpack/","title":"hugo mod npm pack","section":"命令","content":" hugo mod npm pack # https://gohugo.io/commands/hugo_mod_npm_pack/\nhugo mod npm pack # ​\t实验性功能：准备并写入项目的组合 package.json 文件。\n概要 # ​\t准备并写入项目的组合 package.json 文件。\n​\t第一次运行时，如果项目根目录中没有\u0026quot;package.hugo.json\u0026quot;文件，则会创建该文件。此文件将用作具有基本依赖项集合的模板文件。\n​\t该集合将与在依赖树中找到的所有\u0026quot;package.hugo.json\u0026quot;文件合并，选择最接近项目的版本。\n​\t此命令标记为 Experimental。我们认为这是一个很好的想法，因此不太可能从 Hugo 中删除，但我们需要在\u0026quot;real life\u0026quot;中进行测试以了解它的感觉，因此在未来的Hugo版本中它可能会/将更改。\nhugo mod npm pack [flags] 选项 # -h, --help help for pack 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如--clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认值为“config”） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略与给定 Glob 模式匹配的模块路径中的任何 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，则自动启用日志记录） --quiet 静默模式下构建 -s, --source string 从文件系统路径读取相对文件 --themesDir string 主题目录的文件系统路径 -v, --verbose 详细输出 --verboseLog 详细日志记录 另请参阅 # hugo mod npm - 各种 npm 助手。 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":105,"href":"/hugo/cli/hugomodtidy/","title":"hugo mod tidy","section":"命令","content":" hugo mod tidy # https://gohugo.io/commands/hugo_mod_tidy/\nhugo mod tidy # ​\t删除 go.mod 和 go.sum 中未使用的条目。\nhugo mod tidy [flags] 选项 # -h, --help help for tidy 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为 \u0026#34;config\u0026#34;） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略与给定 Glob 模式匹配的模块路径的任何 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，则自动启用日志记录） --quiet 静默模式下进行构建 -s, --source string 读取相对文件的文件系统路径 --themesDir string 主题目录的文件系统路径 -v, --verbose 详细输出 --verboseLog 详细日志记录 另请参阅 # hugo mod - 各种 Hugo 模块助手。 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":106,"href":"/hugo/cli/hugomodvendor/","title":"hugo mod vendor","section":"命令","content":" hugo mod vendor # https://gohugo.io/commands/hugo_mod_vendor/\nhugo mod vendor # ​\t将所有模块依赖项打包到 _vendor 目录中。\n概要 # ​\t将所有模块依赖项打包到 _vendor 目录中。\n​\t如果一个模块被打包了，Hugo 将在 _vendor 目录中查找它的依赖项。\nhugo mod vendor [flags] 选项 # -h, --help help for vendor 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为 \u0026#34;config\u0026#34;） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略与给定 Glob 模式匹配的模块路径的任何 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，则自动启用日志记录） --quiet 静默模式下进行构建 -s, --source string 读取相对文件的文件系统路径 --themesDir string 主题目录的文件系统路径 -v, --verbose 详细输出 --verboseLog 详细日志记录 另请参阅 # hugo mod - 各种 Hugo 模块助手。 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":107,"href":"/hugo/cli/hugomodverify/","title":"hugo mod verify","section":"命令","content":" hugo mod verify # https://gohugo.io/commands/hugo_mod_verify/\nhugo mod verify # ​\t验证依赖项。\n概要 # ​\tverify 检查当前模块的依赖项是否已被下载到本地源缓存中，在下载后是否已被修改。\nhugo mod verify [flags] 选项 # --clean 如果验证失败则删除依赖项的模块缓存 -h, --help help for verify 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为 \u0026#34;config\u0026#34;） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略与给定 Glob 模式匹配的模块路径的任何 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，则自动启用日志记录） --quiet 静默模式下进行构建 -s, --source string 读取相对文件的文件系统路径 --themesDir string 主题目录的文件系统路径 -v, --verbose 详细输出 --verboseLog 详细日志记录 另请参阅 # hugo mod - 各种 Hugo 模块助手。 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":108,"href":"/hugo/cli/hugonew/","title":"hugo new","section":"命令","content":" hugo new # https://gohugo.io/commands/hugo_new/\nhugo new # ​\t为您的站点创建新内容\n概要 # ​\t创建一个新的内容文件并自动设置日期和标题。它将根据提供的路径猜测要创建哪种类型的文件。\n​\t您还可以使用-k KIND指定种类。\n​\t如果您的主题或站点中提供了原型模板，它们将被使用。\n​\t请确保在站点的根目录中运行此命令。\nhugo new [path] [flags] 选项 # -b, --baseURL string 站点根目录的主机名（和路径），例如 https://spf13.com/ -D, --buildDrafts 包括标记为草稿的内容 -E, --buildExpired 包括过期内容 -F, --buildFuture 包括发布日期在未来的内容 --cacheDir string 缓存目录的文件系统路径。默认值：$TMPDIR/hugo_cache/。 --cleanDestinationDir 删除目标文件夹中未在静态目录中找到的文件 --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 -c, --contentDir string 内容文件夹的文件系统路径 -d, --destination string 写入文件的文件系统路径 --disableKinds strings 禁用不同种类的页面（主页、RSS 等） --editor string 使用此编辑器编辑新内容（如果提供） --enableGitInfo 添加 Git 版本、日期、作者和 CODEOWNERS 信息到页面中 -e, --environment string 构建环境 -f, --force 如果文件已经存在，则覆盖文件 --forceSyncStatic 当静态文件发生更改时复制所有文件。 --gc 构建后启用以运行一些清理任务（删除未使用的缓存文件） -h, --help hugo new 的帮助信息 --ignoreCache 忽略缓存目录 --ignoreVendorPaths string 忽略匹配给定 Glob 模式的模块路径下的 _vendor。 -k, --kind string 要创建的内容类型 -l, --layoutDir string 布局文件夹的文件系统路径 --minify 缩小任何受支持的输出格式（HTML、XML 等） --noBuildLock 不创建 .hugo_build.lock 文件 --noChmod 不同步文件的权限模式 --noTimes 不同步文件的修改时间 --panicOnWarning 在第一个 WARNING 日志上发生崩溃 --poll string 将其设置为轮询间隔，例如 --poll 700ms，使其使用基于轮询的方法来监视文件系统更改 --printI18nWarnings 打印缺少的翻译 --printMemoryUsage 定期在屏幕上打印内存使用情况 --printPathWarnings 打印有关重复目标路径的警告等 --printUnusedTemplates 打印未使用模板的警告。 -s, --source string 从中读取文件的文件系统路径 --templateMetrics 显示有关模板执行的指标 --templateMetricsHints 与 --templateMetrics 结合使用时，计算某些改进提示 -t, --theme strings 要使用的主题（位于 /themes/THEMENAME/ 中） --themesDir string 主题文件夹的文件系统路径 --trace file 将跟踪写入文件（通常不会有用） 从父命令继承的选项 # --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为 \u0026#34;config\u0026#34;） --debug 调试输出 --log 启用日志记录 --logFile string 日志文件路径（如果设置，自动启用日志记录） --quiet 安静模式下构建 -v, --verbose 冗长的输出 --verboseLog 冗长的日志记录 另请参阅 # hugo - hugo 构建您的站点 hugo new site - 创建一个新的站点（框架 （skeleton）） hugo new theme - 创建一个新的主题 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":109,"href":"/hugo/cli/hugonewsite/","title":"hugo new site","section":"命令","content":" hugo new site # https://gohugo.io/commands/hugo_new_site/\nhugo new site # ​\t创建新站点（框架）\n概要 # ​\t在指定的目录中创建新站点。新站点将具有正确的结构，但尚未包含任何内容或主题。使用 hugo new [contentPath] 创建新的内容。\nhugo new site [path] [flags] 选项 # --clock string 设置 Hugo 使用的时钟，例如：--clock 2021-11-06T22:30:00.00+09:00 -e, --environment string 构建环境 --force 在非空目录中初始化 -f, --format string 配置文件格式（默认为 \u0026#34;toml\u0026#34;） -h, --help site 的帮助信息 --ignoreVendorPaths string 忽略匹配给定 Glob 模式的模块路径中的任何 _vendor -s, --source string 从文件系统路径中读取相对文件的路径 --themesDir string 主题目录的文件系统路径 从父命令继承的选项 # --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为 \u0026#34;config\u0026#34;） --debug 调试输出 --log 启用日志记录 --logFile string 日志文件路径（如果设置，则自动启用日志记录） --quiet 静默模式下构建 -v, --verbose 冗长输出 --verboseLog 冗长的日志记录 另请参阅 # hugo new - 为您的站点创建新内容 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":110,"href":"/hugo/cli/hugonewtheme/","title":"hugo new theme","section":"命令","content":" hugo new theme # https://gohugo.io/commands/hugo_new_theme/\nhugo new theme # ​\t创建一个新的主题\n概要 # ​\t在./themes中创建一个名为[name]的新主题（框架）。新主题是一个框架，请在相关文件中添加内容。在许可证的版权行中添加您的名字，并根据需要调整theme.toml文件。\nhugo new theme [name] [flags] 选项 # --clock string 设置Hugo使用的时钟，例如：--clock 2021-11-06T22:30:00.00+09:00 -e, --environment string 构建环境 -h, --help 帮助主题 --ignoreVendorPaths string 忽略与给定Glob模式匹配的模块路径中的任何_vendor -s, --source string 从文件系统路径读取文件的路径 --themesDir string 主题目录的文件系统路径 从父命令继承的选项 # --config string 配置文件 (默认为hugo.yaml|json|toml) --configDir string 配置目录 (默认为“config”) --debug 调试输出 --log 启用日志记录 --logFile string 日志文件路径（如果设置，自动启用日志记录） --quiet 静默模式构建 -v, --verbose 详细输出 --verboseLog 详细日志记录 另请参阅 # hugo new - 为您的站点创建新内容 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":111,"href":"/hugo/cli/hugoserver/","title":"hugo server","section":"命令","content":" hugo server # https://gohugo.io/commands/hugo_server/\nhugo server # ​\t一个高性能的 Web 服务器\n概要 # ​\tHugo 提供了自己的 Web 服务器，可以构建和提供站点。虽然 hugo server 性能很高，但它是一个选项有限的 Web 服务器。许多人在生产中运行它，但标准行为是在开发中使用它，（在生成中）使用更全面的服务器，例如 Nginx 或 Caddy。\n​\t\u0026lsquo;hugo server\u0026rsquo; 将避免将渲染和提供的内容写入磁盘，而是将其存储在内存中。\n​\t默认情况下，hugo 也会监视您所做的任何更改并自动重新构建站点。然后它将实时重新加载任何打开的浏览器页面并将最新内容推送到它们。由于大多数 Hugo 站点只需要几秒钟就可以构建完毕，因此您几乎可以立即保存和查看更改。\nhugo server [flags] 选项 # --appendPort 将端口附加到 baseURL 上（默认为 true） -b, --baseURL string 主机名（和路径）到根目录，例如 https://spf13.com/ --bind string 服务器将绑定的接口（默认为 \u0026#34;127.0.0.1\u0026#34;） -D, --buildDrafts 包括标记为草稿的内容 -E, --buildExpired 包括过期的内容 -F, --buildFuture 包括发布日期在未来的内容 --cacheDir string 缓存目录的文件系统路径。默认值：$TMPDIR/hugo_cache/ --cleanDestinationDir 删除在静态目录中找不到的目标文件 --clock string 设置 Hugo 使用的时钟，例如 --clock 2021-11-06T22:30:00.00+09:00 -c, --contentDir string 内容目录的文件系统路径 -d, --destination string 写入文件的文件系统路径 --disableBrowserError 不要在浏览器中显示构建错误 --disableFastRender 启用完全重渲染以响应更改 --disableKinds strings 禁用不同类型的页面（主页、RSS 等） --disableLiveReload 在重建时不启用实时浏览器重新加载 --enableGitInfo 向页面添加 Git 修订版、日期、作者和 CODEOWNERS 信息 -e, --environment string 构建环境 --forceSyncStatic 当静态文件发生更改时复制所有文件。 --gc 启用后可在构建后运行一些清理任务（删除未使用的缓存文件） -h, --help server 的帮助信息 --ignoreCache 忽略缓存目录 --ignoreVendorPaths string 忽略与给定 Glob 模式匹配的模块路径的 _vendor -l, --layoutDir string 布局目录的文件系统路径 --liveReloadPort int 实时重新加载端口（例如 HTTPS 代理情况下的 443）（默认为 -1） --meminterval string 每隔一段时间轮询内存使用情况（需要 --memstats），有效的时间单位为 \u0026#34;ns\u0026#34;、\u0026#34;us\u0026#34;（或 \u0026#34;µs\u0026#34;）、\u0026#34;ms\u0026#34;、\u0026#34;s\u0026#34;、\u0026#34;m\u0026#34;、\u0026#34;h\u0026#34;。（默认为 \u0026#34;100ms\u0026#34;） --memstats string 将内存使用情况记录到这个文件中 --minify 缩小任何受支持的输出格式（HTML、XML 等） --navigateToChanged 在实时浏览器重新加载时导航到更改的内容文件 --noBuildLock 不创建 .hugo_build.lock 文件 --noChmod 不同步文件的权限模式 --noHTTPCache 防止 HTTP 缓存 --noTimes 不同步文件的修改时间 --panicOnWarning 在第一个 WARNING 日志时 panic --poll string 将此设置为轮询间隔，例如 --poll 700ms，以使用基于轮询的方法来监视文件系统更改 -p, --port int 服务器将监听的端口（默认为 1313） --printI18nWarnings 打印缺少的翻译 --printMemoryUsage 在一定间隔内将内存使用情况打印到屏幕上 --printPathWarnings 打印有关重复目标路径等的警告 --printUnusedTemplates 打印有关未使用模板的警告。 --renderStaticToDisk 从磁盘提供静态文件，从内存提供动态文件 --renderToDisk 从磁盘提供所有文件（默认情况下从内存提供） -s, --source string 相对于读取文件的文件系统路径 --templateMetrics 显示有关模板执行的指标 --templateMetricsHints 与 --templateMetrics 结合使用时计算一些改进提示 -t, --theme strings 要使用的主题（位于 /themes/THEMENAME/ 中） --themesDir string 主题目录的文件系统路径 --trace file 将跟踪写入文件（通常不太有用） -w, --watch 监视文件系统以进行更改，并根据需要重新创建（默认情况下为 true） 从父命令继承的选项 # --config string 配置文件（默认为 hugo.yaml|json|toml） --configDir string 配置目录（默认为 \u0026#34;config\u0026#34;） --debug 调试输出 --log 启用日志记录 --logFile string 日志文件路径（如果设置，自动启用日志记录） --quiet 静默模式下构建 -v, --verbose 冗长输出 --verboseLog 冗长日志记录 另请参阅 # hugo - hugo 构建您的站点 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":112,"href":"/hugo/cli/hugoversion/","title":"hugo version","section":"命令","content":" hugo version # https://gohugo.io/commands/hugo_version/\nhugo version # ​\t打印 Hugo 的版本号。\n概要 # ​\t所有软件都有版本号。这是 Hugo 的版本号。\nhugo version [flags] 选项 # -h, --help help for version 从父命令继承的选项 # --clock string 设置 Hugo 使用的时钟，例如：--clock 2021-11-06T22:30:00.00+09:00 --config string 配置文件（默认为hugo.yaml|json|toml） --configDir string 配置目录（默认为“config”） --debug 调试输出 -e, --environment string 构建环境 --ignoreVendorPaths string 忽略匹配给定 Glob 模式的模块路径中的任何 _vendor --log 启用日志记录 --logFile string 日志文件路径（如果设置，则自动启用日志记录） --quiet 静默模式下构建 -s, --source string 从文件系统读取文件的相对路径 --themesDir string 主题目录的文件系统路径 -v, --verbose 冗长输出 --verboseLog 冗长日志记录 另请参阅 # hugo - hugo 构建您的站点 另请参阅 # hugo completion hugo completion bash hugo completion fish hugo completion powershell hugo completion zsh "},{"id":113,"href":"/hugo/hugopipes/javascriptbuilding/","title":"js.Build","section":"Hugo Pipes","content":" js.Build # https://gohugo.io/hugo-pipes/js/\n​\t使用 ESBuild 处理一个 JavaScript 文件。\n语法 # js.Build RESOURCE [OPTIONS] 用法 # ​\t任何 JavaScript 资源文件都可以使用 js.Build 进行转换和 \u0026ldquo;tree shaken\u0026rdquo;，其参数可以是文件路径的字符串，也可以是下面列出的选项字典。\n选项 # targetPath [string]\n如果未设置，则使用源路径作为基本目标路径。请注意，如果目标 MIME 类型不同，目标路径的扩展名可能会更改，例如，当源是 TypeScript 时。\nparams [map or slice]\n可以在 JS 文件中作为 JSON 导入的参数，例如：\n{{ $js := resources.Get \u0026#34;js/main.js\u0026#34; | js.Build (dict \u0026#34;params\u0026#34; (dict \u0026#34;api\u0026#34; \u0026#34;https://example.org/api\u0026#34;)) }} ​\t然后在您的 JS 文件中：\nimport * as params from \u0026#39;@params\u0026#39;; ​\t请注意，这适用于小型数据集，例如配置设置。对于较大的数据，请将文件放置/挂载到 /assets 中并直接导入它们。\nminify [bool]\n让 js.Build 处理最小化。\ninject [slice]\n此选项允许您自动将另一个文件中的导入替换为全局变量。路径名必须相对于 assets 。 参考 https://esbuild.github.io/api/#inject\nshims [map]\n此选项允许将一个组件替换为另一个组件。常见的用例是在生产环境中从 CDN（带有shims）加载依赖项（如 React），但在开发期间使用完全捆绑的 node_modules 依赖项：\n{{ $shims := dict \u0026#34;react\u0026#34; \u0026#34;js/shims/react.js\u0026#34; \u0026#34;react-dom\u0026#34; \u0026#34;js/shims/react-dom.js\u0026#34; }} {{ $js = $js | js.Build dict \u0026#34;shims\u0026#34; $shims }} ​\t这些 shim 文件可能是这样的：\n// js/shims/react.js module.exports = window.React; // js/shims/react-dom.js module.exports = window.ReactDOM; ​\t使用上述方法，以下导入应该在两种情况下都能正常工作：\nimport * as React from \u0026#39;react\u0026#39; import * as ReactDOM from \u0026#39;react-dom\u0026#39;; target [string]\n语言目标。可选值为： es5 ， es2015 ， es2016 ， es2017 ， es2018 ， es2019 ， es2020 或 esnext 。 默认为 esnext 。\nexternals [slice]\n外部依赖项。使用此选项来修剪您知道永远不会执行的依赖项。 参考https://esbuild.github.io/api/#external\ndefines [map]\n允许定义（在构建时执行）一组字符串替换。应该是一个 map，其中每个键都将被其值替换。\n{{ $defines := dict \u0026#34;process.env.NODE_ENV\u0026#34; `\u0026#34;development\u0026#34;` }} format [string]\n输出格式。可选值为： iife ， cjs ， esm 。默认为 iife ，一个适合作为标签（tag）包含的自执行函数。\nsourceMap [string]\n是否从 esbuild 生成 inline 或 external 源映射。外部源映射将写入目标输出文件名 + \u0026ldquo;.map\u0026rdquo;。输入源映射可以从 js.Build 和节点模块中读取并合并到输出源映射中。默认情况下，不创建源映射。\n从 /assets 导入 JS 代码 # ​\tjs.Build 完全支持 Hugo Modules 中的虚拟并联文件系统。您可以在这个 测试项目 中看到一些简单的示例，但简而言之，您可以这样做：\nimport { hello } from \u0026#39;my/module\u0026#39;; ​\t它将解析为分层文件系统中assets/my/module下最顶层的 index.{js,ts,tsx,jsx} 文件。\nimport { hello3 } from \u0026#39;my/module/hello3\u0026#39;; ​\t将解析为 assets/my/module 中的 hello3.{js,ts,tsx,jsx} 。\n​\t任何以 . 开头的导入都将相对于当前文件进行解析：\nimport { hello4 } from \u0026#39;./lib\u0026#39;; ​\t对于其他文件（例如 JSON，CSS），您需要使用包括任何扩展名在内的相对路径，例如：\nimport * as data from \u0026#39;my/module/data.json\u0026#39;; ​\t在位于 /assets 之外或不能解析为 /assets 内组件的文件中的任何导入都将由 ESBuild 解析，并将 项目目录 作为解析目录（用作查找 node_modules 等的起始点）。另请参见hugo mod npm pack。如果在项目中导入了任何 npm 依赖项，则需要在运行 hugo 之前确保运行 npm install。\n​\t此外，请注意新的 params 选项，它可以从模板传递到您的 JS 文件中，例如：\n{{ $js := resources.Get \u0026#34;js/main.js\u0026#34; | js.Build (dict \u0026#34;params\u0026#34; (dict \u0026#34;api\u0026#34; \u0026#34;https://example.org/api\u0026#34;)) }} ​\t然后在您的 JS 文件中：\nimport * as params from \u0026#39;@params\u0026#39;; ​\tHugo 默认会生成一个 assets/jsconfig.json 文件来映射导入。这对于代码编辑器中的导航/智能感知帮助很有用，但是如果您不需要/不想要它，您可以 关闭它。\n将依赖项包含在 package.json / node_modules 中 # ​\t在位于 /assets 之外或不能解析为 /assets 内组件的文件中的任何导入都将由 ESBuild 解析，并将 项目目录 作为解析目录（用作查找 node_modules 等的起始点）。另请参见hugo mod npm pack。如果在项目中导入了任何 npm 依赖项，则需要在运行 hugo 之前确保运行 npm install。\n​\t解析 npm 包（即位于 node_modules 文件夹中的包）的起始目录始终是主项目文件夹。\n**注意：**如果您正在开发应该被导入并且依赖于 package.json 内的依赖项的主题/组件，我们建议了解 hugo mod npm pack，这是一种将项目中所有 npm 依赖项合并的工具。\n示例 # {{ $built := resources.Get \u0026#34;js/index.js\u0026#34; | js.Build \u0026#34;main.js\u0026#34; }} 或者带有选项：\n{{ $externals := slice \u0026#34;react\u0026#34; \u0026#34;react-dom\u0026#34; }} {{ $defines := dict \u0026#34;process.env.NODE_ENV\u0026#34; `\u0026#34;development\u0026#34;` }} {{ $opts := dict \u0026#34;targetPath\u0026#34; \u0026#34;main.js\u0026#34; \u0026#34;externals\u0026#34; $externals \u0026#34;defines\u0026#34; $defines }} {{ $built := resources.Get \u0026#34;scripts/main.js\u0026#34; | js.Build $opts }} \u0026lt;script src=\u0026#34;{{ $built.RelPermalink }}\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; 另请参阅 # Babel ToCSS highlight Concat ExecuteAsTemplate "},{"id":114,"href":"/hugo/tools/migrations/","title":"Migrations","section":"工具","content":" Migrate to Hugo # https://gohugo.io/tools/migrations/\nA list of community-developed tools for migrating from your existing static site generator or content management system to Hugo.\nThis section highlights some projects around Hugo that are independently developed. These tools try to extend the functionality of our static site generator or help you to get started.\nDo you know or maintain a similar project around Hugo? Feel free to open a pull request on GitHub if you think it should be added.\nTake a look at this list of migration tools if you currently use other blogging tools like Jekyll or WordPress but intend to switch to Hugo instead. They’ll take care to export your content into Hugo-friendly formats.\nJekyll # Alternatively, you can use the new Jekyll import command.\nJekyllToHugo - A Small script for converting Jekyll blog posts to a Hugo site. ConvertToHugo - Convert your blog from Jekyll to Hugo. Ghost # ghostToHugo - Convert Ghost blog posts and export them to Hugo. Octopress # octohug - Octopress to Hugo migrator. DokuWiki # dokuwiki-to-hugo - Migrates your DokuWiki source pages from DokuWiki syntax to Hugo Markdown syntax. Includes extra’s like the TODO plugin. Written with extensibility in mind using python 3. Also generates a TOML header for each page. Designed to copypaste the wiki directory into your /content directory. WordPress # wordpress-to-hugo-exporter - A one-click WordPress plugin that converts all posts, pages, taxonomies, metadata, and settings to Markdown and YAML which can be dropped into Hugo. (Note: If you have trouble using this plugin, you can export your site for Jekyll and use Hugo’s built in Jekyll converter listed above.) blog2md - Works with exported xml file of your free YOUR-TLD.wordpress.com website. It also saves approved comments to YOUR-POST-NAME-comments.md file along with posts. wordhugopress - A small utility written in Java, exports the entire WordPress site from the database and resource (e.g. images) files stored locally or remotely. Therefore, migration from the backup files is possible. Supports merging of the multiple WordPress sites into a single Hugo one. Medium # medium2md - A simple Medium to Hugo exporter able to import stories in one command, including Front Matter. medium-to-hugo - CLI tool written in Go to export medium posts into a Hugo compatible Markdown format. Tags and images are included. All images will be downloaded locally and linked appropriately. Tumblr # tumblr-importr - An importer that uses the Tumblr API to create a Hugo static site. tumblr2hugomarkdown - Export all your Tumblr content to Hugo Markdown files with preserved original formatting. Tumblr to Hugo - A migration tool that converts each of your Tumblr posts to a content file with a proper title and path. Furthermore, \u0026ldquo;Tumblr to Hugo\u0026rdquo; creates a CSV file with the original URL and the new path on Hugo, to help you setup the redirections. Drupal # drupal2hugo - Convert a Drupal site to Hugo. Joomla # hugojoomla - This utility written in Java takes a Joomla database and converts all the content into Markdown files. It changes any URLs that are in Joomla’s internal format and converts them to a suitable form. Blogger # blogimport - A tool to import from Blogger posts to Hugo. blogger-to-hugo - Another tool to import Blogger posts to Hugo. It also downloads embedded images so they will be stored locally. blog2md - Works with exported xml file of your YOUR-TLD.blogspot.com website. It also saves comments to YOUR-POST-NAME-comments.md file along with posts. BloggerToHugo - Yet another tool to import Blogger posts to Hugo. For Windows platform only, and .NET Framework 4.5 is required. See README.md before using this tool. Contentful # contentful-hugo - A tool to create content-files for Hugo from content on Contentful. BlogML # BlogML2Hugo - A tool that helps you convert BlogML xml file to Hugo Markdown files. Users need to take care of links to attachments and images by themselves. This helps the blogs that export BlogML files (e.g. BlogEngine.NET) transform to hugo sites easily. "},{"id":115,"href":"/hugo/tools/otherprojects/","title":"OtherProjects","section":"工具","content":" Other Hugo Community Projects # https://gohugo.io/tools/other/\nSome interesting projects developed by the Hugo community that don’t quite fit into our other developer tool categories.\nAnd for all the other small things around Hugo:\nhugo-gallery lets you create an image gallery for Hugo sites. flickr-hugo-embed prints shortcodes to embed a set of images from an album on Flickr into Hugo. hugo-openapispec-shortcode A shortcode that allows you to include Open API Spec (formerly known as Swagger Spec) in a page. HugoPhotoSwipe makes it easy to create image galleries using PhotoSwipe. Hugo SFTP Upload Syncs the local build of your Hugo website with your remote webserver via SFTP. Emacs Easy Hugo Emacs package for writing blog posts in markdown or org-mode and building your site with Hugo. JAMStack Themes. JAMStack themes is a collection of site themes filterable by static site generator and supported CMS to help build CMS-connected sites using Hugo (linking to Hugo-specific themes). plausible-hugo. Easy Hugo integration for Plausible Analytics, a simple, open-source, lightweight and privacy-friendly web analytics alternative to Google Analytics. 另请参阅 # Frontend Interfaces with Hugo "},{"id":116,"href":"/hugo/hugopipes/postcss/","title":"PostCSS","section":"Hugo Pipes","content":" PostCSS # https://gohugo.io/hugo-pipes/postcss/\n​\t使用任何可用的插件，使用PostCSS处理CSS文件。\n语法 # resources.PostCSS RESOURCE [OPTIONS] postCSS RESOURCE [OPTIONS] 设置 # ​\t按照以下步骤使用任何可用的PostCSS插件来转换CSS。\nStep 1\n安装 Node.js.\nStep 2\n在项目的根目录中安装所需的Node.js包。例如，添加vendor 前缀到CSS规则：\nnpm install postcss postcss-cli autoprefixer Step 3\n在项目的根目录中创建PostCSS配置文件。您必须将此文件命名为 postcss.config.js 或其他supported file names之一。例如：\npostcss.config.js\nmodule.exports = { plugins: [ require(\u0026#39;autoprefixer\u0026#39;) ] }; ​\t如果您是Windows用户，且项目路径包含空格，则必须将PostCSS配置放置在package.json文件中。参见此示例和问题#7333。\nStep 4\n将CSS文件放置在 assets 目录中。\nStep 5\n将CSS文件作为资源捕获，并通过 resources.PostCSS （别名 postCSS ）进行管道处理：\nlayouts/partials/css.html\n{{ with resources.Get \u0026#34;css/main.css\u0026#34; | postCSS }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt; {{ end }} ​\t如果在 assets 目录中使用Sass文件：\nlayouts/partials/css.html\n{{ with resources.Get \u0026#34;sass/main.scss\u0026#34; | toCSS | postCSS }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt; {{ end }} 选项 # `resources.PostCSS` 方法接受一个可选的选项映射。 config\n( string ) 包含PostCSS配置文件的目录。默认为项目目录的根目录。\nnoMap\n( bool ) 默认为 false 。如果为 true ，则禁用内联源地图（sourcemaps）。\ninlineImports\n( bool ) 默认为 false 。启用@import语句的内联。它会递归执行，但只会导入一次文件。URL导入（例如 @import url('https://fonts.googleapis.com/css?family=Open+Sans\u0026amp;display=swap'); ）和带媒体查询的导入将被忽略。请注意，此导入例程不关心CSS规范，因此您可以在文件中的任何地方使用@import。Hugo将查找相对于模块挂载的导入并遵守主题覆盖。\nskipInlineImportsNotFound New in v0.99.0\n( bool ) 默认为 false 。在Hugo 0.99.0之前，当启用 inlineImports 并且我们无法解析导入时，我们会将其记录为警告。现在我们将构建失败。如果您的CSS中有常规CSS导入要保留，则可以使用带URL的导入或媒体查询（Hugo不会尝试解决这些导入），或将 skipInlineImportsNotFound 设置为true。\nlayouts/partials/css.html\n{{ $opts := dict \u0026#34;config\u0026#34; \u0026#34;config-directory\u0026#34; \u0026#34;noMap\u0026#34; true }} {{ with resources.Get \u0026#34;css/main.css\u0026#34; | postCSS $opts }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt; {{ end }} 无配置文件 # ​\t为了避免使用PostCSS配置文件，可以使用选项映射指定最小的配置。\nuse\n(string) 用于指定要使用的 PostCSS 插件的以空格分隔的列表。\nparser\n(string) 自定义 PostCSS 解析器。\nstringifier\n(string) 自定义 PostCSS 字符串化器。\nsyntax\n(string) 自定义 PostCSS 语法。\nlayouts/partials/css.html\n{{ $opts := dict \u0026#34;use\u0026#34; \u0026#34;autoprefixer postcss-color-alpha\u0026#34; }} {{ with resources.Get \u0026#34;css/main.css\u0026#34; | postCSS $opts }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt; {{ end }} 检查 Hugo 环境 # ​\t当前的 Hugo 环境名称（通过 --environment 在配置或操作系统环境中设置）在 Node 上下文中可用，这使得可以使用如下结构：\npostcss.config.js\nmodule.exports = { plugins: [ require(\u0026#39;autoprefixer\u0026#39;), ...process.env.HUGO_ENVIRONMENT === \u0026#39;production\u0026#39; ? [purgecss] : [] ] } 另请参阅 # Babel Host on 21YunBox ToCSS highlight hugo "},{"id":117,"href":"/hugo/hugopipes/postprocess/","title":"PostProcess","section":"Hugo Pipes","content":" PostProcess # https://gohugo.io/hugo-pipes/postprocess/\nAllows delaying of resource transformations to after the build.\n语法 # resources.PostProcess RESOURCE 用法 # Marking a resource with resources.PostProcess delays any transformations to after the build, typically because one or more of the steps in the transformation chain depends on the result of the build (e.g. files in public).\nA prime use case for this is CSS purging with PostCSS.\nThere are currently two limitations to this:\nThis only works in *.html templates (i.e. templates that produces HTML files).\nYou cannot manipulate the values returned from the resource’s methods. E.g. the upper in this example will not work as expected:\n{{ $css := resources.Get \u0026#34;css/main.css\u0026#34; }} {{ $css = $css | resources.PostCSS | minify | fingerprint | resources.PostProcess }} {{ $css.RelPermalink | upper }} CSS purging with PostCSS # There are several ways to set up CSS purging with PostCSS in Hugo. If you have a simple project, you should consider going the simpler route and drop the use of resources.PostProcess and just extract keywords from the templates. See the Tailwind documentation for some examples.\nThe below configuration will write a hugo_stats.json file to the project root as part of the build. If you’re only using this for the production build, you should consider placing it below config/production.\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml build: writeStats: true ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [build] writeStats = true ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;build\u0026quot;: { \u0026quot;writeStats\u0026quot;: true } } ``` postcss.config.js\nconst purgecss = require(\u0026#39;@fullhuman/postcss-purgecss\u0026#39;)({ content: [ \u0026#39;./hugo_stats.json\u0026#39; ], defaultExtractor: (content) =\u0026gt; { let els = JSON.parse(content).htmlElements; return els.tags.concat(els.classes, els.ids); } }); module.exports = { plugins: [ ...(process.env.HUGO_ENVIRONMENT === \u0026#39;production\u0026#39; ? [ purgecss ] : []) ] }; Note that in the example above, the \u0026ldquo;CSS purge step\u0026rdquo; will only be applied to the production build. This means that you need to do something like this in your head template to build and include your CSS:\n{{ $css := resources.Get \u0026#34;css/main.css\u0026#34; }} {{ $css = $css | resources.PostCSS }} {{ if hugo.IsProduction }} {{ $css = $css | minify | fingerprint | resources.PostProcess }} {{ end }} \u0026lt;link href=\u0026#34;{{ $css.RelPermalink }}\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; Hugo Environment variables available in PostCSS # These are the environment variables Hugo passes down to PostCSS (and Babel), which allows you do do process.env.HUGO_ENVIRONMENT === 'production' ? [autoprefixer] : [] and similar:\nPWD\nThe absolute path to the project working directory. HUGO_ENVIRONMENT (and the alias HUGO_ENV)\nThe value e.g. set with hugo -e production (defaults to production for hugo and development for hugo server).\nHUGO_PUBLISHDIR\n{{ new-in \u0026ldquo;0.109.0\u0026rdquo; }} The absolute path to the publish directory (the public directory). Note that the value will always point to a directory on disk even when running hugo server in memory mode. If you write to this folder from PostCSS when running the server, you could run the server with one of these flags:\nhugo server --renderToDisk hugo server --renderStaticToDisk Also, Hugo will add environment variables for all files mounted below assets/_jsconfig. A default mount will be set up with files in the project root matching this regexp: (babel|postcss|tailwind)\\.config\\.js.\nThese will get environment variables named on the form HUGO_FILE_:filename: where :filename: is all upper case with periods replaced with underscore. This allows you to do this and similar:\nlet tailwindConfig = process.env.HUGO_FILE_TAILWIND_CONFIG_JS || \u0026#39;./tailwind.config.js\u0026#39;; 另请参阅 # Babel Concat ExecuteAsTemplate Fingerprint FromString "},{"id":118,"href":"/hugo/tools/search/","title":"Search","section":"工具","content":" Search for your Hugo Website # https://gohugo.io/tools/search/\nSee some of the open-source and commercial search options for your newly created Hugo website.\nA static website with a dynamic search function? Yes, Hugo provides an alternative to embeddable scripts from Google or other search engines for static websites. Hugo allows you to provide your visitors with a custom search function by indexing your content files directly.\nGitHub Gist for Hugo Workflow. This gist contains a simple workflow to create a search index for your static website. It uses a simple Grunt script to index all your content files and lunr.js to serve the search results. hugo-lunr. A simple way to add site search to your static Hugo site using lunr.js. Hugo-lunr will create an index file of any HTML and Markdown documents in your Hugo project. hugo-lunr-zh. A bit like Hugo-lunr, but Hugo-lunr-zh can help you separate the Chinese keywords. GitHub Gist for Fuse.js integration. This gist demonstrates how to leverage Hugo’s existing build time processing to generate a searchable JSON index used by Fuse.js on the client-side. Although this gist uses Fuse.js for fuzzy matching, any client-side search tool capable of reading JSON indexes will work. Does not require npm, grunt or other build-time tools except Hugo! hugo-search-index. A library containing Gulp tasks and a prebuilt browser script that implements search. Gulp generates a search index from project markdown files. hugofastsearch. A usability and speed update to \u0026ldquo;GitHub Gist for Fuse.js integration\u0026rdquo; — global, keyboard-optimized search. JS \u0026amp; Fuse.js tutorial A simple client-side search solution, using FuseJS (does not require jQuery). Pagefind. A fully static search library that aims to perform well on large sites, while using as little of your users’ bandwidth as possible. Hugo Lyra. Hugo-Lyra is a JavaScript module to integrate Lyra into a Hugo website. It contains the server-side part to generate the index and the client-side library (optional) to bootstrap the search engine easily. Commercial Search Services # Algolia’s Search API makes it easy to deliver a great search experience in your apps and websites. Algolia Search provides hosted full-text, numerical, faceted, and geolocalized search. Bonsai is a fully-managed hosted Elasticsearch service that is fast, reliable, and simple to set up. Easily ingest your docs from Hugo into Elasticsearch following this guide from the docs. ExpertRec is a hosted search-as-a-service solution that is fast and scalable. Set-up and integration is extremely easy and takes only a few minutes. The search settings can be modified without coding using a dashboard. "},{"id":119,"href":"/hugo/tools/starterkits/","title":"StarterKits","section":"工具","content":" Starter Kits # https://gohugo.io/tools/starter-kits/\nA list of community-developed projects designed to help you get up and running with Hugo.\nKnow of a Hugo-related starter kit that isn’t mentioned here? Please add it to the list.\nThe following starter kits are developed by active members of the Hugo community. If you find yourself having issues with any of the projects, it’s best to file an issue directly with the project’s maintainer(s).\nWowchemy. Wowchemy is the 5,500+ star open source Hugo starter kit and website builder trusted by 750,000+ sites since 2016. Create any kind of site with 50+ templates, widgets, and extensions. Translated into 35+ languages and backed by a large, active community of 150+ contributors. Hugo Wrapper. Hugo Wrapper is a POSIX-style shell script which acts as a wrapper to download and run Hugo binary for your platform. It can be executed in variety of Operating Systems and Command Shells. GOHUGO AMP. GoHugo AMP is a starter theme that aims to make it easy to adopt Google’s AMP Project. The starter kit comes with 40+ shortcodes and partials plus automatic structured data. The project also includes a separate site with extensive documentation. Hyas. Hyas is a Hugo starter helping you build modern websites that are secure, fast, and SEO-ready — by default. It is Netlify-ready (functions, redirects, headers) and comes with documentation to easily make it your own. "},{"id":120,"href":"/hugo/hugopipes/transpilesasstoscss/","title":"ToCSS","section":"Hugo Pipes","content":" ToCSS # https://gohugo.io/hugo-pipes/transform-to-css/\n​\t将 Sass 转译为 CSS。\n语法 # resources.ToCSS RESOURCE [OPTIONS] toCSS RESOURCE [OPTIONS] 用法 # ​\t可以使用 resources.ToCSS 将任何 Sass 或 SCSS 文件转换为 CSS 文件，其中需要两个参数：资源对象和下面列出的一个选项映射。\n{{ $sass := resources.Get \u0026#34;sass/main.scss\u0026#34; }} {{ $style := $sass | resources.ToCSS }} 选项 # transpiler [string]\n使用的 transpiler ，有效值为 libsass （默认）和 dartsass 。如果您想使用 Hugo 与 Dart Sass，请从 Embedded Dart Sass 下载发布二进制文件，并确保它在您的 PC 的 $PATH （或 Windows 上的 %PATH% ）中。\ntargetPath [string]\n如果未设置，则转换后的资源的目标路径将是asset文件原始路径，其扩展名将替换为 .css 。\nvars [map]\n键/值对的映射，将在 hugo:vars 命名空间中可用，例如：使用 @use \u0026quot;hugo:vars\u0026quot; as v; 或（全局）使用 @import \u0026quot;hugo:vars\u0026quot;; 。自 v0.109.0 起新增\noutputStyle [string]\n默认值为 nested （LibSass）和 expanded （Dart Sass）。LibSass 的其他可用输出样式为 expanded 、 compact 和 compressed 。Dart Sass 仅支持 expanded 和 compressed 。\nprecision [int]\n浮点数精度。注意：Dart Sass 不支持此选项。\nenableSourceMap [bool]\n启用时，将生成源映射。\nsourceMapIncludeSources [bool]\n启用时，源将嵌入到生成的源映射中。（仅在 Dart Sass 中）。自 v0.108.0 起新增\nincludePaths [string slice]\n额外的 SCSS/Sass 包含路径。路径必须相对于项目目录。\n{{ $options := (dict \u0026#34;targetPath\u0026#34; \u0026#34;style.css\u0026#34; \u0026#34;outputStyle\u0026#34; \u0026#34;compressed\u0026#34; \u0026#34;enableSourceMap\u0026#34; (not hugo.IsProduction) \u0026#34;includePaths\u0026#34; (slice \u0026#34;node_modules/myscss\u0026#34;)) }} {{ $style := resources.Get \u0026#34;sass/main.scss\u0026#34; | resources.ToCSS $options }} ​\t将 outputStyle 设置为 compressed 将比更通用的 resources.Minify 更好地处理 Sass/SCSS 文件的压缩。\n另请参阅 # Babel js.Build Concat ExecuteAsTemplate Fingerprint "},{"id":121,"href":"/hugo/variables/menuvariables/","title":"菜单变量","section":"变量","content":" Menu Variables - 菜单变量 # https://gohugo.io/variables/menus/\n​\t在您的菜单模板中使用这些变量和方法。\n变量 # ​\t在定义菜单项之后，可以在菜单模板中使用以下变量访问其属性。\n.Children # ​\t(menu)当前菜单项下（如果有）的子菜单项的集合。\n.Identifier # (string) 菜单项的 identifier 属性。如果您自动定义菜单项，则为页面的 .Section。\n.KeyName # (string) 菜单项的 identifier 属性，否则为 name 属性。\n.Menu # ​\t(string) 包含菜单项的菜单的标识符。\n.Name # ​\t(string) 菜单项的 name 属性。\n如果您自动定义菜单项，则为页面的 .LinkTitle，否则为 .Title。\n如果您在前置元数据或站点配置中定义菜单，则先尝试使用页面的 .LinkTitle，然后使用.Title。\n.Page # ​\t(page) 与菜单项相关联的页面的引用。\n.Params # ​\t(map) 菜单项的 params 属性。\n.Parent # ​\t(string) 菜单项的 parent 属性。\n.Post # (template.HTML) 菜单项的 post 属性。\n.Pre # ​\t(template.HTML) 菜单项的 pre 属性。\n.Title # ​\t(string) 菜单项的 title 属性。\n如果您自动定义菜单项，则为页面的 .LinkTitle，否则为 .Title。\n如果您在前置元数据或站点配置中定义菜单，则先尝试使用页面的 .LinkTitle，然后使用 .Title。\n.URL # ​\t(string) 与菜单项相关联的页面的 .RelPermalink。对于指向外部资源的菜单项，使用菜单项的 url 属性。\n.Weight # ​\t(int) 菜单项的 weight 属性。\n如果您自动定义菜单项，则为页面的 .Weight。\n如果您在前置元数据或站点配置中定义菜单，则先尝试使用页面的 .Weight。\n方法 # .HasChildren # ​\t(bool) 如果 .Children 非 nil，则返回 true。\n.IsEqual # ​\t(bool) 如果比较的菜单项表示相同的菜单项，则返回 true。\n.IsSameResource # ​\t(bool) 如果比较的菜单条目指向同一资源，则返回true。\n.Page.HasMenuCurrent # ​\t(bool) 使用此方法确定活动菜单项的祖先。请参阅详细信息。\n.Page.IsMenuCurrent # ​\t(bool) 使用此方法确定活动菜单项。请参阅详细信息。\n另请参阅 # .HasMenuCurrent .IsMenuCurrent .Scratch .Store 文件变量 "},{"id":122,"href":"/hugo/gettingstarted/externallearningresources/","title":"外部学习资源","section":"开始入门","content":" External Learning Resources - 外部学习资源 # https://gohugo.io/getting-started/external-learning-resources/\n​\t关于 Hugo 的教程和书籍列表。\n书籍 # Hugo 实战 # 《Hugo 实战》是一本使用 Hugo 创建静态站点的逐步指南。您将使用一个完整的示例站点和源代码示例来学习如何构建和托管一个低维护、高性能的站点，它将为您的用户提供令人惊叹的体验，并且不需要依赖于第三方服务器。\nHugo 实战主页\n使用 Hugo 构建站点 # 《使用 Hugo 构建站点：使用 Markdown 进行快速 Web 开发》(2020) 作者 Brian P. Hogan。\n初学者教程 # CloudCannon 的 Hugo 教程 # 逐步书面教程，教您创建 Hugo 站点的基础知识。\n视频教程 # Mike Dane 在 YouTube 上通过专门的教程详细讲解了 Hugo 的各种功能。 Mike Neumegen 的构建第一个 Hugo 站点入门介绍。 另请参阅 # 基本用法 快速入门 使用 Hugo 模块 "},{"id":123,"href":"/hugo/variables/filevariables/","title":"文件变量","section":"变量","content":" File Variables - 文件变量 # https://gohugo.io/variables/files/\nUse File variables to access file-related values for each page that is backed by a file.\n使用文件变量来访问由文件支持的每个页面的与文件相关的值。\n​\t使用文件变量来访问每个由文件支持的页面的与文件相关的值。\n变量 # ​\t.File.Path、.File.Dir 和 .File.Filename 中的路径分隔符（斜杠或反斜杠）取决于操作系统。\n.File.Path # ​\t(string) 文件路径，相对于 content 目录。\n.File.Dir # ​\t(string) 不包括文件名的文件路径，相对于 content 目录。\n.File.LogicalName # ​\t(string) 文件名。\n.File.BaseFileName # ​\t(string) 不包括扩展名的文件名。\n.File.TranslationBaseName # ​\t(string) 不包括扩展名和语言标识符的文件名。\n.File.Ext # ​\t(string) 文件扩展名。\n.File.Lang # ​\t(string) 与给定文件相关联的语言。\n.File.ContentBaseName # ​\t(string) 如果页面是一个分支或叶子 bundle，则为包含该页面的目录名称，否则为 .TranslationBaseName。\n.File.Filename # ​\t(string) 绝对文件路径。\n.File.UniqueID # ​\t(string) .File.Path 的 MD5 哈希值。\n示例 # content/ ├── news/ │ ├── b/ │ │ ├── index.de.md \u0026lt;-- leaf bundle │ │ └── index.en.md \u0026lt;-- leaf bundle │ ├── a.de.md \u0026lt;-- regular content │ ├── a.en.md \u0026lt;-- regular content │ ├── _index.de.md \u0026lt;-- branch bundle │ └── _index.en.md \u0026lt;-- branch bundle ├── _index.de.md └── _index.en.md ​\t使用上述内容结构，英文页面的 .File 对象包含以下属性：\nregular content leaf bundle branch bundle Path news/a.en.md news/b/index.en.md news/_index.en.md Dir news/ news/b/ news/ LogicalName a.en.md index.en.md _index.en.md BaseFileName a.en index.en _index.en TranslationBaseName a index _index Ext md md md Lang en en en ContentBase a b news Filename /home/user/… /home/user/… /home/user/… UniqueID 15be14b… 186868f… 7d9159d… 防御性编程 # ​\t站点上的某些页面可能没有文件支持。例如：\n顶级章节页面 分类法页面 条目页面 ​\t如果您尝试访问 .File 属性而没有支持文件，Hugo 将抛出一个警告。例如：\nWARN .File.ContentBaseName on zero object. Wrap it in if or with... ​\t为了防御性编程：\n{{ with .File }} {{ .ContentBaseName }} {{ end }} 另请参阅 # Babel Hugo 模板简介 本地文件模板 菜单变量 高亮 "},{"id":124,"href":"/hugo/hugopipes/assetminification/","title":"压缩","section":"Hugo Pipes","content":" Minify - 压缩 # https://gohugo.io/hugo-pipes/minification/\n​\t压缩给定的资源。\n语法 # resources.Minify RESOURCE minify RESOURCE 用法 # ​\t任何 CSS、JS、JSON、HTML、SVG 或 XML 资源都可以使用 resources.Minify 进行压缩，该函数需要资源对象作为参数。\n{{ $css := resources.Get \u0026#34;css/main.css\u0026#34; }} {{ $style := $css | resources.Minify }} ​\t请注意，您也可以通过运行 hugo --minify 压缩最终的 HTML 输出到 /public 。\n另请参阅 # Babel Concat ExecuteAsTemplate Fingerprint FromString "},{"id":125,"href":"/hugo/contentmanagement/pageresources/","title":"页面资源","section":"内容管理","content":" Page Resources - 页面资源 # https://gohugo.io/content-management/page-resources/\n​\t页面资源（如图片、其他页面、文档等）具有相对于页面的 URL 和它们自己的元数据。\n​\t页面资源只能从page bundles中访问，这些目录在其根目录中具有index.md或_index.md文件。页面资源仅可用于与其捆绑的页面。\n​\t在此示例中，first-post是具有10个页面资源（包括音频，数据，文档，图像和视频）访问权限的page bundle。尽管second-post也是一个page bundle，但它没有页面资源，并且无法直接访问与first-post关联的页面资源。\ncontent └── post ├── first-post │ ├── images │ │ ├── a.jpg │ │ ├── b.jpg │ │ └── c.jpg │ ├── index.md (root of page bundle) │ ├── latest.html │ ├── manual.json │ ├── notice.md │ ├── office.mp3 │ ├── pocket.mp4 │ ├── rating.pdf │ └── safety.txt └── second-post └── index.md (root of page bundle) 属性 # ResourceType\n​\t该资源媒体类型的主类型。例如，MIME类型为image/jpeg的文件的ResourceType为image。页面的ResourceType值为page。\nName\n默认值为文件名（相对于所属页面）。可以在前置元数据中设置。\nTitle\n默认值与 .Name 相同。可以在前置元数据中设置。\nPermalink\n该资源的绝对URL。类型为page的资源将没有值。\nRelPermalink\n该资源的相对URL。类型为page的资源将没有值。\nContent\n该资源本身的内容。对于大多数资源，这将返回一个字符串，其中包含文件的内容。使用它来创建内联资源。\n{{ with .Resources.GetMatch \u0026#34;script.js\u0026#34; }} \u0026lt;script\u0026gt;{{ .Content | safeJS }}\u0026lt;/script\u0026gt; {{ end }} {{ with .Resources.GetMatch \u0026#34;style.css\u0026#34; }} \u0026lt;style\u0026gt;{{ .Content | safeCSS }}\u0026lt;/style\u0026gt; {{ end }} {{ with .Resources.GetMatch \u0026#34;img.png\u0026#34; }} \u0026lt;img src=\u0026#34;data:{{ .MediaType }};base64,{{ .Content | base64Encode }}\u0026#34;\u0026gt; {{ end }} MediaType\n该资源的MIME类型，例如image/jpeg。\nMediaType.MainType\n该资源MIME类型的主类型。例如，MIME类型为application/pdf的文件的主类型为application。\nMediaType.SubType\n该资源MIME类型的子类型。例如，MIME类型为application/pdf的文件的子类型为pdf。请注意，这与文件扩展名不同 —— PowerPoint文件的子类型为vnd.mspowerpoint。\nMediaType.Suffixes\n该资源MIME类型的可能后缀切片。\n方法 # ByType\n返回给定类型的页面资源。\n{{ .Resources.ByType \u0026#34;image\u0026#34; }} Match\n返回所有Name与给定通配符模式（examples）匹配的页面资源（作为切片）。匹配不区分大小写。\n{{ .Resources.Match \u0026#34;images/*\u0026#34; }} GetMatch\n与Match相同，但将返回第一个匹配项。\n模式匹配 # // 使用 Match/GetMatch 来寻找这个 images/sunset.jpg ? .Resources.Match \u0026#34;images/sun*\u0026#34; ✅ .Resources.Match \u0026#34;**/sunset.jpg\u0026#34; ✅ .Resources.Match \u0026#34;images/*.jpg\u0026#34; ✅ .Resources.Match \u0026#34;**.jpg\u0026#34; ✅ .Resources.Match \u0026#34;*\u0026#34; 🚫 .Resources.Match \u0026#34;sunset.jpg\u0026#34; 🚫 .Resources.Match \u0026#34;*sunset.jpg\u0026#34; 🚫 页面资源元数据 # ​\t页面资源的元数据由相应页面的前置元数据中的resources数组/表（array/table）参数进行管理。您可以使用通配符进行批量分配值。\n​\t类型为page的资源从其自己的前置元数据中获取Title等。\nname\n设置Name中返回的值\n​\tMatch，Get和GetMatch方法使用Name来匹配资源。\ntitle\n设置Title中返回的值。\nparams\n一个自定义键/值的映射。\n资源元数据示例 # === \u0026ldquo;yaml\u0026rdquo;\n``` yaml date: \u0026quot;2018-01-25\u0026quot; resources: - name: header src: images/sunset.jpg - params: icon: photo src: documents/photo_specs.pdf title: Photo Specifications - src: documents/guide.pdf title: Instruction Guide - src: documents/checklist.pdf title: Document Checklist - src: documents/payment.docx title: Proof of Payment - name: pdf-file-:counter params: icon: pdf src: '**.pdf' - params: icon: word src: '**.docx' title: Application ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml date = '2018-01-25' title = 'Application' [[resources]] name = 'header' src = 'images/sunset.jpg' [[resources]] src = 'documents/photo_specs.pdf' title = 'Photo Specifications' [resources.params] icon = 'photo' [[resources]] src = 'documents/guide.pdf' title = 'Instruction Guide' [[resources]] src = 'documents/checklist.pdf' title = 'Document Checklist' [[resources]] src = 'documents/payment.docx' title = 'Proof of Payment' [[resources]] name = 'pdf-file-:counter' src = '**.pdf' [resources.params] icon = 'pdf' [[resources]] src = '**.docx' [resources.params] icon = 'word' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;date\u0026quot;: \u0026quot;2018-01-25\u0026quot;, \u0026quot;resources\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;header\u0026quot;, \u0026quot;src\u0026quot;: \u0026quot;images/sunset.jpg\u0026quot; }, { \u0026quot;params\u0026quot;: { \u0026quot;icon\u0026quot;: \u0026quot;photo\u0026quot; }, \u0026quot;src\u0026quot;: \u0026quot;documents/photo_specs.pdf\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Photo Specifications\u0026quot; }, { \u0026quot;src\u0026quot;: \u0026quot;documents/guide.pdf\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Instruction Guide\u0026quot; }, { \u0026quot;src\u0026quot;: \u0026quot;documents/checklist.pdf\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Document Checklist\u0026quot; }, { \u0026quot;src\u0026quot;: \u0026quot;documents/payment.docx\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Proof of Payment\u0026quot; }, { \u0026quot;name\u0026quot;: \u0026quot;pdf-file-:counter\u0026quot;, \u0026quot;params\u0026quot;: { \u0026quot;icon\u0026quot;: \u0026quot;pdf\u0026quot; }, \u0026quot;src\u0026quot;: \u0026quot;**.pdf\u0026quot; }, { \u0026quot;params\u0026quot;: { \u0026quot;icon\u0026quot;: \u0026quot;word\u0026quot; }, \u0026quot;src\u0026quot;: \u0026quot;**.docx\u0026quot; } ], \u0026quot;title\u0026quot;: \u0026quot;Application\u0026quot; } ``` 从上面的示例中：\nsunset.jpg将获得一个新的Name，并且现在可以使用.GetMatch \u0026quot;header\u0026quot;找到它。 documents/photo_specs.pdf将获得photo图标。 documents/checklist.pdf，documents/guide.pdf和documents/payment.docx将得到Title，如Title中所设置。 包中除documents/photo_specs.pdf外的每个PDF都将获得pdf图标。 所有PDF文件都将获得新的Name。name参数包含一个特殊占位符:counter，因此名称将是pdf-file-1、pdf-file-2、pdf-file-3。 包中的每个docx都将获得word图标。 ​\t顺序很重要 —— 只有title，name和params-keys的第一个设置值将被使用。连续的参数仅设置未设置的参数。在上面的示例中，.Params.icon首先在src = \u0026quot;documents/photo_specs.pdf\u0026quot;中设置为\u0026quot;photo\u0026quot;。因此，后来设置的src = \u0026quot;**.pdf\u0026quot;规则不会将其覆盖为\u0026quot;pdf\u0026quot;。\nname 和 title 中的 :counter 占位符 # ​\t:counter是在资源的name和title参数中识别的特殊占位符。\n​\t该计数器从第一次在name或title中使用时开始计数。\n​\t例如，如果一个包中有资源photo_specs.pdf，other_specs.pdf，guide.pdf和checklist.pdf，并且前置元数据已将resources指定为：\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml resources: - src: '*specs.pdf' title: 'Specification #:counter' - name: pdf-file-:counter src: '**.pdf' ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [[resources]] src = '*specs.pdf' title = 'Specification #:counter' [[resources]] name = 'pdf-file-:counter' src = '**.pdf' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;resources\u0026quot;: [ { \u0026quot;src\u0026quot;: \u0026quot;*specs.pdf\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Specification #:counter\u0026quot; }, { \u0026quot;name\u0026quot;: \u0026quot;pdf-file-:counter\u0026quot;, \u0026quot;src\u0026quot;: \u0026quot;**.pdf\u0026quot; } ] } ``` 则Name和Title将按如下分配给资源文件：\nResource file Name Title checklist.pdf \u0026quot;pdf-file-1.pdf \u0026quot;checklist.pdf\u0026quot; guide.pdf \u0026quot;pdf-file-2.pdf \u0026quot;guide.pdf\u0026quot; other_specs.pdf \u0026quot;pdf-file-3.pdf \u0026quot;Specification #1\u0026quot; photo_specs.pdf \u0026quot;pdf-file-4.pdf \u0026quot;Specification #2\u0026quot; 另请参阅 # 内容组织 .Scratch .Store 构建选项 评论 "},{"id":126,"href":"/hugo/templ/homepagetemplate/","title":"主页模板","section":"模板","content":" Homepage Template - 主页模板 # https://gohugo.io/templates/homepage/\n​\t站点的主页通常与其他页面格式不同。因此，Hugo 使您能够轻松地将新站点的主页定义为独特的模板。\n​\t主页是一个Page，因此可使用所有页面变量和站点变量。\n​\t主页模板是构建站点所必需的唯一模板，因此在启动新站点和模板时非常有用。如果您正在开发单页面站点，则它也是唯一必需的模板。\n主页模板查找顺序 # ​\t请参见模板查找。\n向主页添加内容和前置元数据 # ​\t主页与 Hugo 中的其他列表页面类似，可以从 _index.md 文件接受内容和 前置元数据。该文件应该位于您的 content 文件夹的根目录下（即 content/_index.md）。然后，您可以像处理其他任何内容文件一样向主页添加正文和元数据（metadata ）。\n​\t有关如何使用 _index.md 向列表页面添加内容和前置元数据的更多信息，请参见下面的主页模板或内容组织。\n示例主页模板 # ​\t以下是一个主页模板示例，它使用 partial、基础模板和位于 content/_index.md 中的内容文件来填充 {{ .Title }} 和 {{ .Content }} 页面变量。\nlayouts/index.html\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;main aria-role=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;header class=\u0026#34;homepage-header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ with .Params.subtitle }} \u0026lt;span class=\u0026#34;subtitle\u0026#34;\u0026gt;{{ . }}\u0026lt;/span\u0026gt; {{ end }} \u0026lt;/header\u0026gt; \u0026lt;div class=\u0026#34;homepage-content\u0026#34;\u0026gt; \u0026lt;!-- Note that the content for index.html, as a sort of list page, will pull from content/_index.md --\u0026gt; {{ .Content }} \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; {{ range first 10 .Site.RegularPages }} {{ .Render \u0026#34;summary\u0026#34; }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; {{ end }} "},{"id":127,"href":"/hugo/functions/_param/","title":".Param","section":"函数","content":"将以下英文翻译为中文：\n.Param # https://gohugo.io/functions/param/\n​\t返回一个页面参数，如果存在站点参数则返回站点参数。\n语法 # .Param KEY ​\t.Param 方法在 .Page 对象中查找给定的 KEY，并返回对应的值。如果无法在页面参数中找到 KEY，则在站点参数中查找 KEY。如果两个位置都找不到 KEY，则 .Param 方法返回 nil。\n​\t站点和主题开发人员通常在站点级别设置参数，允许内容作者在页面级别上覆盖这些参数。\n​\t例如，要在每个页面上显示目录，但允许作者在需要时隐藏目录：\nConfiguration\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml params: display_toc: true ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [params] display_toc = true ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;params\u0026quot;: { \u0026quot;display_toc\u0026quot;: true } } ``` Content\ncontent/example.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- date: \u0026quot;2023-01-01\u0026quot; display_toc: false draft: false title: Example --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ date = 2023-01-01 display_toc = false draft = false title = 'Example' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;date\u0026quot;: \u0026quot;2023-01-01\u0026quot;, \u0026quot;display_toc\u0026quot;: false, \u0026quot;draft\u0026quot;: false, \u0026quot;title\u0026quot;: \u0026quot;Example\u0026quot; } ``` Template\nlayouts/_default/single.html\n{{ if .Param \u0026#34;display_toc\u0026#34; }} {{ .TableOfContents }} {{ end }} ​\t.Param方法返回与给定KEY关联的值，无论该值是否为真值或假值。如果需要忽略假值，请改用此构造：\nlayouts/_default/single.html\n{{ or .Params.foo site.Params.foo }} 另请参阅 # Archetypes Build Options Front Matter Taxonomies Taxonomy Templates "},{"id":128,"href":"/hugo/variables/gitvariables/","title":"Git 信息变量","section":"变量","content":" Git Info Variables - Git 信息变量 # https://gohugo.io/variables/git/\n​\t获取每个内容文件的最后一次 Git 修订信息。\n​\tHugo 的 Git 集成应该是相当高效的，但可能会增加构建时间。这取决于您的 Git 历史记录大小。\n.GitInfo 先决条件 # Hugo 站点必须位于启用 Git 的目录中。 Git 可执行文件必须已安装并在系统 PATH 中。 必须在 Hugo 项目中启用 .GitInfo 功能，方法是在命令行上传递 --enableGitInfo 标志或在 站点配置文件 中将 enableGitInfo 设置为 true。 .GitInfo 对象 # ​\tGitInfo 对象包含以下字段：\n.AbbreviatedHash # ​\t缩写的提交哈希（例如 866cbcc）\n.AuthorName # ​\t作者名称，遵循 .mailmap\n.AuthorEmail # ​\t作者电子邮件地址，遵循 .mailmap\n.AuthorDate # ​\t作者日期。\n.Hash # ​\t提交哈希（例如 866cbccdab588b9908887ffd3b4f2667e94090c3）\n.Subject # ​\t提交消息主题（例如， tpl: Add custom index function）\n.Lastmod # ​\t如果启用了 .GitInfo 功能，则 .Lastmod（在 Page 上）从 Git 中获取，即 .GitInfo.AuthorDate。可以通过添加自己的 日期的前置元数据配置 更改此行为。\n另请参阅 # 在 Azure 静态 Web 应用上托管 在 GitHub 上托管 在 GitLab 上托管 "},{"id":129,"href":"/hugo/contentmanagement/imageprocessing/","title":"图像处理","section":"内容管理","content":" Image Processing - 图像处理 # https://gohugo.io/content-management/image-processing/\n​\t调整大小、裁剪、旋转、滤镜和转换图像。\n图像资源 # ​\t要处理图像，必须将其作为页面资源或全局资源访问。\n页面资源 # ​\t页面资源是page bundle中的文件。page bundle是一个在其根目录下具有index.md或_index.md文件的目录。\ncontent/ └── posts/ └── post-1/ \u0026lt;-- page bundle ├── index.md └── sunset.jpg \u0026lt;-- page resource 全局资源 # ​\t全局资源是一个文件：\n在assets目录中，或 在任何已挂载到assets目录的目录中，或 位于通过http或https可访问的远程服务器上 assets/ └── images/ └── sunset.jpg \u0026lt;-- global resource ​\t要访问本地图像作为全局资源：\n{{ $image := resources.Get \u0026#34;images/sunset.jpg\u0026#34; }} ​\t要将远程图像作为全局资源访问：\n{{ $image := resources.GetRemote \u0026#34;https://gohugo.io/img/hugo-logo.png\u0026#34; }} 图像渲染 # ​\t一旦您已经将图像作为页面资源或全局资源之一访问，可以使用Permalink、RelPermalink、Width和Height属性在模板中呈现它。\n示例1：如果未找到资源，则会引发错误。\n{{ $image := .Resources.GetMatch \u0026#34;sunset.jpg\u0026#34; }} \u0026lt;img src=\u0026#34;{{ $image.RelPermalink }}\u0026#34; width=\u0026#34;{{ $image.Width }}\u0026#34; height=\u0026#34;{{ $image.Height }}\u0026#34;\u0026gt; 示例2：如果未找到资源，则跳过图像渲染。\n{{ $image := .Resources.GetMatch \u0026#34;sunset.jpg\u0026#34; }} {{ with $image }} \u0026lt;img src=\u0026#34;{{ .RelPermalink }}\u0026#34; width=\u0026#34;{{ .Width }}\u0026#34; height=\u0026#34;{{ .Height }}\u0026#34;\u0026gt; {{ end }} 示例3：如果未找到资源，则跳过图像渲染的更简洁的方法。\n{{ with .Resources.GetMatch \u0026#34;sunset.jpg\u0026#34; }} \u0026lt;img src=\u0026#34;{{ .RelPermalink }}\u0026#34; width=\u0026#34;{{ .Width }}\u0026#34; height=\u0026#34;{{ .Height }}\u0026#34;\u0026gt; {{ end }} 图像处理方法 # ​\timage资源实现了Resize、Fit、Fill、Crop、Filter、Colors和Exif方法。\nMetadata (Exif, IPTC, XMP, etc.) is not preserved during image transformation. Use the [Exif] method with the original image to extract Exif metadata from JPEG or TIFF images.\n​\t在图像转换期间，元数据（Exif，IPTC，XMP等）不会被保留。请使用[Exif]方法和原始图像从JPEG或TIFF图像中提取Exif元数据。\nResize # ​\t将图像调整为指定的宽度和/或高度。\n​\t如果同时指定宽度和高度，则结果图像将不成比例缩放，除非原始图像具有相同的宽高比。\n{{/* Resize to a width of 600px and preserve aspect ratio */}} {{ $image := $image.Resize \u0026#34;600x\u0026#34; }} {{/* Resize to a height of 400px and preserve aspect ratio */}} {{ $image := $image.Resize \u0026#34;x400\u0026#34; }} {{/* Resize to a width of 600px and a height of 400px */}} {{ $image := $image.Resize \u0026#34;600x400\u0026#34; }} Fit # ​\t按比例缩小图像以适应给定的尺寸。您必须同时提供宽度和高度。\n{{ $image := $image.Fit \u0026#34;600x400\u0026#34; }} Fill # ​\t裁剪并调整图像以匹配给定的尺寸。您必须同时提供宽度和高度。使用 anchor 选项可以更改裁剪框锚点。\n{{ $image := $image.Fill \u0026#34;600x400\u0026#34; }} Crop # ​\t裁剪图像以匹配给定的尺寸而不调整大小。您必须同时提供宽度和高度。使用 anchor 选项可以更改裁剪框锚点。\n{{ $image := $image.Crop \u0026#34;600x400\u0026#34; }} Filter # ​\t对图像应用一个或多个滤镜。\n{{ $image := $image.Filter (images.GaussianBlur 6) (images.Pixelate 8) }} ​\t使用管道以更函数式的风格编写此内容。 Hugo按照给定的顺序应用过滤器。\n{{ $image := $image | images.Filter (images.GaussianBlur 6) (images.Pixelate 8) }} ​\t有时候创建一个过滤器链并重复使用它是很有用的。\n{{ $filters := slice (images.GaussianBlur 6) (images.Pixelate 8) }} {{ $image1 := $image1.Filter $filters }} {{ $image2 := $image2.Filter $filters }} Colors # New in v0.104.0\n​\t.Colors 方法使用简单的直方图方法返回图像中的主要颜色的十六进制字符串切片。\n{{ $colors := $image.Colors }} ​\t此方法速度很快，但如果您还缩小图像，从缩小的图像提取颜色可提高性能。\nExif # ​\t提供一个包含图像元数据的 Exif 对象。\n​\t您可以访问 JPEG 和 TIFF 图像中的 Exif 数据。为避免处理没有 Exif 数据的图像时出现错误，请将访问包装在 with 语句中。\n{{ with $image.Exif }} Date: {{ .Date }} Lat/Long: {{ .Lat }}/{{ .Long }} Tags: {{ range $k, $v := .Tags }} TAG: {{ $k }}: {{ $v }} {{ end }} {{ end }} ​\t您还可以使用lang.FormatNumber函数单独访问Exif字段，根据需要格式化字段。\n{{ with $image.Exif }} \u0026lt;ul\u0026gt; {{ with .Date }}\u0026lt;li\u0026gt;Date: {{ .Format \u0026#34;January 02, 2006\u0026#34; }}\u0026lt;/li\u0026gt;{{ end }} {{ with .Tags.ApertureValue }}\u0026lt;li\u0026gt;Aperture: {{ lang.FormatNumber 2 . }}\u0026lt;/li\u0026gt;{{ end }} {{ with .Tags.BrightnessValue }}\u0026lt;li\u0026gt;Brightness: {{ lang.FormatNumber 2 . }}\u0026lt;/li\u0026gt;{{ end }} {{ with .Tags.ExposureTime }}\u0026lt;li\u0026gt;Exposure Time: {{ . }}\u0026lt;/li\u0026gt;{{ end }} {{ with .Tags.FNumber }}\u0026lt;li\u0026gt;F Number: {{ . }}\u0026lt;/li\u0026gt;{{ end }} {{ with .Tags.FocalLength }}\u0026lt;li\u0026gt;Focal Length: {{ . }}\u0026lt;/li\u0026gt;{{ end }} {{ with .Tags.ISOSpeedRatings }}\u0026lt;li\u0026gt;ISO Speed Ratings: {{ . }}\u0026lt;/li\u0026gt;{{ end }} {{ with .Tags.LensModel }}\u0026lt;li\u0026gt;Lens Model: {{ . }}\u0026lt;/li\u0026gt;{{ end }} \u0026lt;/ul\u0026gt; {{ end }} Exif变量 # .Date\n图像创建日期/时间。使用time.Format函数格式化。\n.Lat\nGPS纬度（latitude 以度为单位）。\n.Long\nGPS经度（longitude 以度为单位）。\n.Tags\n此图像可用的Exif标签集合。您可以在站点配置中包含或排除特定标签。\n图像处理选项 # ​\tResize、Fit、Fill和Crop方法接受一个以空格分隔、大小写不敏感的选项列表。列表中的选项顺序无关紧要。\n尺寸 # ​\t使用Resize方法，必须指定宽度、高度或两者。Fit、Fill和Crop方法需要宽度和高度。所有尺寸以像素为单位。\n{{ $image := $image.Resize \u0026#34;600x\u0026#34; }} {{ $image := $image.Resize \u0026#34;x400\u0026#34; }} {{ $image := $image.Resize \u0026#34;600x400\u0026#34; }} {{ $image := $image.Fit \u0026#34;600x400\u0026#34; }} {{ $image := $image.Fill \u0026#34;600x400\u0026#34; }} {{ $image := $image.Crop \u0026#34;600x400\u0026#34; }} 旋转 # ​\t将图像逆时针旋转给定角度。 Hugo在缩放之前执行旋转。例如，如果原始图像为600x400，并且您希望将图像逆时针旋转90度，并将其缩小50%：\n{{ $image = $image.Resize \u0026#34;200x r90\u0026#34; }} ​\t在上面的示例中，宽度表示旋转后的期望宽度。\n​\t要在不缩放的情况下旋转图像，请使用原始图像的尺寸：\n{{ with .Resources.GetMatch \u0026#34;sunset.jpg\u0026#34; }} {{ with .Resize (printf \u0026#34;%dx%d r90\u0026#34; .Height .Width) }} \u0026lt;img src=\u0026#34;{{ .RelPermalink }}\u0026#34; width=\u0026#34;{{ .Width }}\u0026#34; height=\u0026#34;{{ .Height }}\u0026#34;\u0026gt; {{ end }} {{ end }} ​\t在上面的示例中，第二行我们反转了宽度和高度，以反映旋转后期望尺寸。\n锚点 # ​\t使用Crop或Fill方法时，锚点确定裁剪框的放置位置。您可以指定TopLeft、Top、TopRight、Left、Center、Right、BottomLeft、Bottom、BottomRight或Smart。\n​\t默认值为Smart，它使用Smartcrop图像分析来确定裁剪框的最佳放置位置。您可以在站点配置中覆盖默认值。\n​\t例如，如果您有一个400x200像素的图像，其中鸟位于左上象限，您可以创建一个包含鸟的200x100缩略图：\n{{ $image.Crop \u0026#34;200x100 TopLeft\u0026#34; }} ​\t如果在使用Crop或Fill方法时应用旋转，则相对于旋转后的图像指定锚点。\n目标格式 # ​\t默认情况下，Hugo将图像编码为源格式。您可以通过指定bmp、gif、jpeg、jpg、png、tif、tiff或webp将图像转换为另一种格式。\n{{ $image.Resize \u0026#34;600x webp\u0026#34; }} ​\t使用原始图像的尺寸而不缩放来转换图像：\n{{ with .Resources.GetMatch \u0026#34;sunset.jpg\u0026#34; }} {{ with .Resize (printf \u0026#34;%dx%d webp\u0026#34; .Width .Height) }} \u0026lt;img src=\u0026#34;{{ .RelPermalink }}\u0026#34; width=\u0026#34;{{ .Width }}\u0026#34; height=\u0026#34;{{ .Height }}\u0026#34;\u0026gt; {{ end }} {{ end }} 质量 # ​\t适用于JPEG和WebP图像，q值确定转换图像的质量。更高的值会产生更好的质量图像，而更低的值会产生更小的文件。将此值设置为介于1和100之间（包括1和100）的整数。\n​\t默认值为75。您可以在站点配置中覆盖默认值。\n{{ $image.Resize \u0026#34;600x webp q50\u0026#34; }} 提示 # ​\t适用于WebP图像，此选项对应于一组预定义的编码参数。\nValue Example drawing 高对比度手绘或线描图像 icon 小型彩色图像 photo 自然光照的户外照片 picture 室内照片，例如肖像 text 主要是文本的图像 ​\t默认值为photo。您可以在站点配置中覆盖默认值。\n{{ $image.Resize \u0026#34;600x webp picture\u0026#34; }} 背景色 # ​\t当将支持透明度的图像（例如PNG）转换为不支持透明度的图像（例如JPEG）时，可以指定结果图像的背景颜色。\n​\t使用3位或6位十六进制颜色代码（例如#00f或#0000ff）。\n​\t默认值为#ffffff（白色）。您可以在站点配置中覆盖默认值。\n{{ $image.Resize \u0026#34;600x jpg #b31280\u0026#34; }} 重采样滤镜 # You may specify the resampling filter used when resizing an image. Commonly used resampling filters include:\n您可以在调整图像大小时指定使用的重采样滤镜。常用的重采样滤镜包括：\n调整图像大小时，可以指定所使用的重采样滤镜。常用的重采样滤镜包括：\nFilter Description Box 适合缩小的简单快速平均滤镜 Lanczos 用于摄影图像的高质量重采样滤镜，产生锐利的结果 CatmullRom 尖锐的立方滤镜，比Lanczos滤镜快，提供类似的结果 MitchellNetravali 立方体滤镜，产生比 CatmullRom 更平滑的结果，减少了环状伪影 Linear 双线性重采样滤镜，产生平滑的输出，比立方体滤镜更快 NearestNeighbor 最快的重采样滤镜，无抗锯齿 ​\t默认值为 Box。您可以在站点配置中覆盖默认值。\n{{ $image.Resize \u0026#34;600x400 Lanczos\u0026#34; }} ​\t请参见github.com/disintegration/imaging以获取完整的重采样滤镜列表。如果您希望以性能为代价改善图像质量，可以尝试使用替代滤镜。\n图像处理示例 # ​\t以下示例中使用的日落照片版权归Bjørn Erik Pedersen所有（Creative Commons Attribution-Share Alike 4.0 International license）。\n​\t这是用于生成上述示例的shortcode ：\nlayouts/shortcodes/imgproc.html\n{{ $img := .Page.Resources.GetMatch (printf \u0026#34;*%s*\u0026#34; (.Get 0)) }} {{ $command := .Get 1 }} {{ $options := .Get 2 }} {{ if eq $command \u0026#34;Fit\u0026#34;}} {{ $img = $img.Fit $options }} {{ else if eq $command \u0026#34;Resize\u0026#34;}} {{ $img = $img.Resize $options }} {{ else if eq $command \u0026#34;Fill\u0026#34;}} {{ $img = $img.Fill $options }} {{ else if eq $command \u0026#34;Crop\u0026#34;}} {{ $img = $img.Crop $options }} {{ else }} {{ errorf \u0026#34;Invalid image processing command: Must be one of Crop, Fit, Fill or Resize.\u0026#34;}} {{ end }} \u0026lt;figure style=\u0026#34;padding: 0.25rem; margin: 2rem 0; background-color: #cccc\u0026#34;\u0026gt; \u0026lt;img style=\u0026#34;max-width: 100%; width: auto; height: auto;\u0026#34; src=\u0026#34;{{ $img.RelPermalink }}\u0026#34; width=\u0026#34;{{ $img.Width }}\u0026#34; height=\u0026#34;{{ $img.Height }}\u0026#34;\u0026gt; \u0026lt;figcaption\u0026gt; \u0026lt;small\u0026gt; {{ with .Inner }} {{ . }} {{ else }} .{{ $command }} \u0026#34;{{ $options }}\u0026#34; {{ end }} \u0026lt;/small\u0026gt; \u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; ​\t在您的Markdown中像这样调用shortcode ：\n\\{\\{\\\u0026lt; imgproc sunset Resize \u0026#34;300x\u0026#34; /\\\u0026gt;\\}\\} ​\t注意上面自我封闭的shortcode语法。您可以使用或不使用内部内容来调用imgproc shortcode 。\n图像处理配置 # 处理选项 # ​\t在您的站点配置中定义一个imaging处理部分，以设置默认的图像处理选项。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml imaging: anchor: Smart bgColor: '#ffffff' hint: photo quality: 75 resampleFilter: Box ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [imaging] anchor = 'Smart' bgColor = '#ffffff' hint = 'photo' quality = 75 resampleFilter = 'Box' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;imaging\u0026quot;: { \u0026quot;anchor\u0026quot;: \u0026quot;Smart\u0026quot;, \u0026quot;bgColor\u0026quot;: \u0026quot;#ffffff\u0026quot;, \u0026quot;hint\u0026quot;: \u0026quot;photo\u0026quot;, \u0026quot;quality\u0026quot;: 75, \u0026quot;resampleFilter\u0026quot;: \u0026quot;Box\u0026quot; } } ``` anchor\n参见图像处理选项：锚点。\nbgColor\nSee image processing options: background color.\n参见图像处理选项：背景色。\nhint\n参见图像处理选项：提示。\nquality\n参见图像处理选项：质量。\nresampleFilter\n参见图像处理选项：重采样滤镜。\nExif 数据 # 在您的站点配置中定义一个 imaging.exif 部分，以控制 Exif 数据的可用性。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml imaging: exif: disableDate: false disableLatLong: false excludeFields: \u0026quot;\u0026quot; includeFields: \u0026quot;\u0026quot; ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [imaging] [imaging.exif] disableDate = false disableLatLong = false excludeFields = '' includeFields = '' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;imaging\u0026quot;: { \u0026quot;exif\u0026quot;: { \u0026quot;disableDate\u0026quot;: false, \u0026quot;disableLatLong\u0026quot;: false, \u0026quot;excludeFields\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;includeFields\u0026quot;: \u0026quot;\u0026quot; } } } ``` disableDate\nHugo 将图像创建日期/时间提取到 .Date 中。将此设置为 true 以禁用。默认值为 false。\ndisableLatLong\nHugo 将 GPS 纬度和经度提取到 .Lat 和 .Long 中。将此设置为 true 以禁用。默认值为 false。\nexcludeFields\n正则表达式匹配要从 .Tags 集合中排除的 Exif 标记。默认值为 \u0026quot;\u0026quot;。\nincludeFields\n正则表达式匹配要在 .Tags 集合中包含的 Exif 标记。默认值为 \u0026quot;\u0026quot;。要包括所有可用的标记，请将此值设置为 \u0026quot;.*\u0026quot;。\n​\t为了提高性能并减小缓存大小，如果您既不设置 excludeFields 也不设置 includeFields，则 Hugo 将排除以下标记：ColorSpace、Contrast、Exif、Exposure[M|P|B]、Flash、GPS、JPEG、Metering、Resolution、Saturation、Sensing、Sharp 和 WhiteBalance。\n智能裁剪图像 # ​\t默认情况下，Hugo在使用Crop或Fill方法裁剪图像时会使用Smartcrop库。您可以手动设置锚点，但在大多数情况下，Smart选项会做出很好的选择。\n​\t以下是使用上面的日落图片的示例：\n图像处理性能考虑 # ​\tHugo在resources目录中缓存处理过的图像。如果您将此目录包含在源代码控制中，Hugo将不必在CI / CD工作流程（例如，GitHub Pages，GitLab Pages，Netlify等）中重新生成图像。这将加快构建速度。\n​\t如果您更改图像处理方法或选项，或者重命名或删除图像，则resources目录将包含未使用的图像。要删除未使用的图像，请执行垃圾回收：\nhugo --gc 另请参阅 # 图像过滤器 内容组织 页面资源 "},{"id":130,"href":"/hugo/variables/","title":"变量","section":"文档","content":" Variables and Params - 变量和参数 # https://gohugo.io/variables/\n​\tHugo的模板是上下文感知的，并为您在创建站点视图时提供大量的可用值。\n"},{"id":131,"href":"/hugo/functions/_render/","title":".Render","section":"函数","content":"将以下英文翻译为中文：\n.Render # https://gohugo.io/functions/render/\n​\t应用视图来渲染内容。\n语法 # .Render LAYOUT ​\t该视图是一种替代布局，应该是一个文件名，指向 内容视图 文档中指定位置之一的模板。\n​\t此函数仅适用于 列表上下文 中的单个内容。\n​\t例如，下面的示例可以使用位于 /layouts/_default/summary.html 中的内容视图来渲染一篇内容：\n{{ range .Pages }} {{ .Render \u0026#34;summary\u0026#34; }} {{ end }} 另请参阅 # Content View Templates "},{"id":132,"href":"/hugo/variables/sitemapvariables/","title":"Sitemap变量","section":"变量","content":" Sitemap Variables - Sitemap变量 # https://gohugo.io/variables/sitemap/\n​\tsitemap是一个 Page ，因此具有可用于sitemap模板的所有页面变量。 它们还具有以下专门用于sitemap的变量：\n.Sitemap.ChangeFreq # ​\t页面更改频率\n.Sitemap.Priority # ​\t页面的优先级\n.Sitemap.Filename # ​\tSitemap文件名\n另请参阅 # Sitemap模板 "},{"id":133,"href":"/hugo/templ/taxonomytemplates/","title":"分类法（Taxonomy）模板 ","section":"模板","content":" Taxonomy Templates - 分类法（Taxonomy）模板 # https://gohugo.io/templates/taxonomy-templates/\n​\tTaxonomy（分类法）模板包括分类法列表页面、分类法条目页面以及在单页模板中使用分类法。\n​\tHugo 支持用户定义的内容分组，称为分类法。分类法是展示内容之间逻辑关系的分类法方法。如果您对 Hugo 如何利用这个强大功能不熟悉，请参见内容管理下的分类法。\n​\tHugo 提供了多种在项目模板中使用分类法的方式：\n按照与分类法条目相关联的内容的方式在分类法列表模板中显示。 以特定的顺序显示与分类法条目相关联的内容，具体方法是在分类法列表模板中设置排序方式。 按照分类法的方式在分类法条目模板中显示。 在单页模板中列出单个内容的分类法条目。 分类法列表模板 # ​\t分类法列表页面模板是列表，因此具有可用于列表页面的所有变量和方法。\n分类法列表模板查找顺序 # ​\t请参见模板查找。\n分类法条目模板 # 分类法条目模板查找顺序 # ​\t请参见模板查找。\n分类法方法 # A Taxonomy is a map[string]WeightedPages.\n​\t分类法是一个 map[string]WeightedPages。\n.Get(term)\n返回条目的 WeightedPages。\n.Count(term)\n分配给该条目的内容数量。\n.Alphabetical\nReturns an OrderedTaxonomy (slice) ordered by Term.\n返回一个按条目排序的 OrderedTaxonomy（切片）。\n.ByCount\n返回一个按条目数量排序的 OrderedTaxonomy（切片）。\n.Reverse\n返回一个按相反顺序排序的 OrderedTaxonomy（切片）。必须与 一个OrderedTaxonomy 一起使用。\nOrderedTaxonomy # ​\t由于 Map 是无序的，因此 OrderedTaxonomy 是一个具有定义顺序的特殊结构。\n[]struct { Name string WeightedPages WeightedPages } ​\t该切片的每个元素都有：\n.Term\n使用的条目。\n.WeightedPages\n一个加权页面的切片。\n.Count\n分配给该条目的内容数量。\n.Pages\n分配给该条目的所有页面。所有列表方法都可用于此。\nWeightedPages # ​\tWeightedPages是WeightedPage的一个切片。\ntype WeightedPages []WeightedPage .Count(term)\n被分配到此条目的内容数量。\n.Pages\n返回一个页面的切片，可以使用任何 列表方法 进行排序。\n在分类法条目模板中显示自定义元数据 # ​\t如果您需要为每个分类法条目显示自定义元数据，您需要在/content/\u0026lt;TAXONOMY\u0026gt;/\u0026lt;TERM\u0026gt;/_index.md路径下为该条目创建一个页面，并在其前置元数据中添加元数据，如分类法文档中所述。以其中显示的演员分类法为例，在您的分类法条目模板中，您可以通过迭代变量.Pages来访问您的自定义字段：\n\u0026lt;ul\u0026gt; {{ range .Pages }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; {{ .Params.wikipedia }} \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 排序分类法 # ​\t分类法可以按字母键或分配给该键的内容数量排序。\n按字母顺序示例 # \u0026lt;ul\u0026gt; {{ range .Data.Terms.Alphabetical }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .Page.Permalink }}\u0026#34;\u0026gt;{{ .Page.Title }}\u0026lt;/a\u0026gt; {{ .Count }}\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 在分类法中排序内容 # ​\tHugo在分类法中使用date和weight来排序内容。\n​\t在 Hugo 中，每篇内容可以选择性地被分配一个日期。它也可以为每个所属分类法分配一个权重。\n​\t当在分类法中迭代内容时，默认排序方式与用于章节和列表页面相同：首先按权重，然后按日期排序。这意味着，如果两篇内容的权重相同，则最近日期的内容将首先显示。\n​\t任何一篇内容的默认权重为0。零意味着\u0026quot;does not have a weight\u0026quot;，而不是\u0026quot;has a weight of numerical value zero\u0026quot;。\n​\t因此，权重为零的条目被特殊处理：如果两个页面的权重不相等，并且其中一个是零，则具有零权重的页面将始终出现在另一个页面之后，而不用考虑另一个页面的权重。因此，应谨慎使用零权重：例如，如果正权重和负权重都用于在两个方向上扩展序列，则具有零权重的页面将不会出现在列表的中间，而是在末尾。\n分配权重 # ​\t每个内容可以分别为它所属的每个分类法（taxonomies）赋予一个权重（weight）。\ncontent/example.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- categories: - d categories_weight: 44 tags: - a - b - c tags_weight: 22 title: Example --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ categories = ['d'] categories_weight = 44 tags = ['a', 'b', 'c'] tags_weight = 22 title = 'Example' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;categories\u0026quot;: [ \u0026quot;d\u0026quot; ], \u0026quot;categories_weight\u0026quot;: 44, \u0026quot;tags\u0026quot;: [ \u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot; ], \u0026quot;tags_weight\u0026quot;: 22, \u0026quot;title\u0026quot;: \u0026quot;Example\u0026quot; } ``` ​\t惯例是使用taxonomyname_weight。\n​\t在上面的例子中，这篇内容在渲染分配给\u0026quot;tag\u0026quot; 分类法中的\u0026quot;a\u0026quot;、\u0026ldquo;b\u0026rdquo; 和 \u0026ldquo;c\u0026rdquo; 值的页面时具有22的权重。\n​\t在渲染\u0026rsquo;d\u0026rsquo;类别时，它还被赋予了44的权重。\n​\t这样做可以使同一篇内容在不同的分类法中出现在不同的位置。\n​\t目前，分类法仅支持默认的内容排序方式，即权重-\u0026gt;日期。\n​\t使用分类法将需要提供两种不同的模板。\n​\t这两中模板在模板章节中都有详细介绍。\n​\t列表模板是用于在单个HTML页面中渲染多篇内容的任一模板。此模板将用于生成所有自动创建的分类法页面。\n​\t分类法模板是用于生成给定模板的条目列表的模板。\n​\t除了使用 Hugo 自动生成的 列表模板 来创建分类法页面外，还有四种常见的方式可以展示您的分类法数据：\n对于给定篇的内容，您可以列出附加的条目 对于给定篇的内容，您可以列出具有相同条目的其他内容 您可以列出某一分类法的所有条目 您可以列出所有分类法（及其条目） 显示单篇内容的分类法 # ​\t在内容模板中，您可能希望显示分配给该内容的分类法。\n​\t由于我们利用前置元数据系统为内容定义分类法，因此分配给每篇内容的分类法位于通常的位置（即 .Params.\u0026lt;TAXONOMYPLURAL\u0026gt;）。\n示例：在单页模板中列出标签 # \u0026lt;ul\u0026gt; {{ range (.GetTerms \u0026#34;tags\u0026#34;) }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; ​\t如果您想要内联列出分类法，您将需要注意标题中的可选复数结尾（如果有多个分类法），以及逗号。假设我们有一个名为 \u0026ldquo;directors\u0026rdquo; 的分类法，如 TOML 格式的前置元数据所示：directors: [ \u0026quot;Joel Coen\u0026quot;, \u0026quot;Ethan Coen\u0026quot; ]。\n​\t要列出这样的分类法，请使用以下方法：\n示例：在单页模板中使用逗号分隔标签 # {{ $taxo := \u0026#34;directors\u0026#34; }} \u0026lt;!-- Use the plural form here --\u0026gt; {{ with .Param $taxo }} \u0026lt;strong\u0026gt;Director{{ if gt (len .) 1 }}s{{ end }}:\u0026lt;/strong\u0026gt; {{ range $index, $director := . }} {{- if gt $index 0 }}, {{ end -}} {{ with $.Site.GetPage (printf \u0026#34;/%s/%s\u0026#34; $taxo $director) -}} \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ $director }}\u0026lt;/a\u0026gt; {{- end -}} {{- end -}} {{ end }} ​\t或者，如果只需要使用分隔符列出分类法，则可以使用delimit 模板函数作为快捷方式。详见GitHub上的#2143讨论。\n列出具有相同分类法条目的内容 # ​\t如果您正在使用分类法来管理一系列文章，您可以列出与同一分类法相关联的各个页面。这也是一种快速粗略的方法来展示相关内容：\n示例：显示同一系列的内容 # \u0026lt;ul\u0026gt; {{ range .Site.Taxonomies.series.golang }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .Page.RelPermalink }}\u0026#34;\u0026gt;{{ .Page.Title }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 列出给定分类法中的所有内容 # ​\t这在侧边栏中作为\u0026quot;特色内容\u0026quot;将非常有用。您甚至可以通过为内容分配不同的条目来创建不同的\u0026quot;特色内容\u0026quot; 章节。\n示例：对\u0026quot;Featured\u0026quot;内容进行分组 # \u0026lt;section id=\u0026#34;menu\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; {{ range $key, $taxonomy := .Site.Taxonomies.featured }} \u0026lt;li\u0026gt;{{ $key }}\u0026lt;/li\u0026gt; \u0026lt;ul\u0026gt; {{ range $taxonomy.Pages }} \u0026lt;li hugo-nav=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/section\u0026gt; 渲染站点的分类法 # ​\t如果您希望显示站点分类法的所有键列表，可以从每个页面都可以访问的.Site变量中检索它们。\n​\t这可以采用标签云、菜单或简单列表的形式。\n​\t以下示例显示站点标签分类法中的所有条目：\n示例：列出所有站点标签 # \u0026lt;ul\u0026gt; {{ range .Site.Taxonomies.tags }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .Page.Permalink }}\u0026#34;\u0026gt;{{ .Page.Title }}\u0026lt;/a\u0026gt; {{ .Count }}\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 示例：列出所有分类法、条目和分配的内容 # ​\t这个示例将列出所有分类法及其条目，以及分配给每个条目的所有内容。\nlayouts/partials/all-taxonomies.html\n\u0026lt;section\u0026gt; \u0026lt;ul id=\u0026#34;all-taxonomies\u0026#34;\u0026gt; {{ range $taxonomy_term, $taxonomy := .Site.Taxonomies }} {{ with $.Site.GetPage (printf \u0026#34;/%s\u0026#34; $taxonomy_term) }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ $taxonomy_term }}\u0026lt;/a\u0026gt; \u0026lt;ul\u0026gt; {{ range $key, $value := $taxonomy }} \u0026lt;li\u0026gt;{{ $key }}\u0026lt;/li\u0026gt; \u0026lt;ul\u0026gt; {{ range $value.Pages }} \u0026lt;li hugo-nav=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{ end }} {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/section\u0026gt; .Site.GetPage 用于分类法 # ​\t由于分类法是列表，可以使用.GetPage函数使用简洁的语法获取与特定分类法条目相关联的所有页面。下面对站点上所有标签进行全面的遍历，并链接到每个条目的单独分类页面，而不必使用上面的\u0026quot;列出所有站点标签\u0026quot;示例中更脆弱的URL构建方法：\nlinks-to-all-tags.html\n{{ $taxo := \u0026#34;tags\u0026#34; }} \u0026lt;ul class=\u0026#34;{{ $taxo }}\u0026#34;\u0026gt; {{ with ($.Site.GetPage (printf \u0026#34;/%s\u0026#34; $taxo)) }} {{ range .Pages }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} {{ end }} \u0026lt;/ul\u0026gt; 另请参阅 # 分类法 原型 前置元数据 Hugo 中的内容列表 .Param "},{"id":134,"href":"/hugo/contentmanagement/shortcodes/","title":"简码","section":"内容管理","content":" Shortcodes - 简码 # https://gohugo.io/content-management/shortcodes/\n​\t简码是在您的内容文件中调用内置或自定义模板的简单代码片段。\n什么是简码 # ​\tHugo喜欢Markdown，因为它的简单内容格式，但有时Markdown存在局限性。通常，内容作者被迫将原始HTML（例如视频\u0026lt;iframe\u0026gt;）添加到Markdown内容中。我们认为这与Markdown语法的美丽简洁相矛盾。\n​\tHugo创建了简码来规避这些限制。\n​\t简码是内容文件中的简单代码片段，Hugo将使用预定义的模板进行渲染。请注意，简码在模板文件中不起作用。如果您需要简码提供的此类插入（drop-in）功能，但在模板中，则很可能需要局部模板。\n​\t除了更干净的Markdown外，简码可以随时更新以反映新的类、技术或标准。在站点生成的时候，Hugo简码将轻松合并您的更改。您避免了可能复杂的搜索和替换操作。\n使用简码 # ​\t在您的内容文件中，可以通过调用\\{\\{\\% shortcodename parameters \\%\\}\\}来调用简码。简码参数由空格分隔，具有内部空格的参数可以用引号引起来。\n​\t简码声明中的第一个单词始终是简码的名称。参数跟在名称后面。根据简码的定义方式，参数可以是命名的、位置的或两者兼有，但不能在单个调用中混合使用参数类型。命名参数的格式与HTML的格式name=\u0026quot;value\u0026quot;相似。\n​\t一些简码使用或需要闭合简码。与HTML一样，开放和关闭简码匹配（仅名称），关闭声明前缀有一个斜杠。\n​\t以下是成对的简码的两个示例：\n\\{\\{\\% mdshortcode \\%\\}\\}Stuff to `process` in the *center*.\\{\\{\\% /mdshortcode \\%\\}\\} \\{\\{\\\u0026lt; highlight go \\\u0026gt;\\}\\} A bunch of code here \\{\\{\\\u0026lt; /highlight \\\u0026gt;\\}\\} ​\t上面的例子使用两个不同的定界符，不同之处在于第一个中有%字符，第二个中有\u0026lt;\u0026gt;字符。\n使用原始字符串参数的简码 # ​\t您可以使用原始字符串字面值将占据多行的参数传递给简码：\n\\{\\{\\\u0026lt; myshortcode `This is some \u0026lt;b\u0026gt;HTML\u0026lt;/b\u0026gt;, and a new line with a \u0026#34;quoted string\u0026#34;.` \\\u0026gt;\\}\\} 具有 Markdown 的简码 # ​\t在Hugo 0.55中，我们改变了%定界符的工作方式。使用 % 作为最外层定界符的简码现在将在发送到内容渲染器时完全渲染。它们可以成为生成的目录（table of contents）、脚注（footnotes）等的一部分。\n​\t如果您想要旧的行为，可以在简码模板的开头放置以下行：\n\\{\\{ $_hugo_config := `{ \u0026#34;version\u0026#34;: 1 }` \\}\\} 没有 Markdown 的简码 # ​\t\u0026lt;字符表示简码的内部内容不需要进一步渲染。通常，不带Markdown的简码包括内部HTML：\n\\{\\{\\\u0026lt; myshortcode \\\u0026gt;\\}\\}\u0026lt;p\u0026gt;Hello \u0026lt;strong\u0026gt;World!\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\\{\\{\\\u0026lt; /myshortcode \\\u0026gt;\\}\\} 嵌套的简码 # ​\t您可以通过创建自己的模板来利用.Parent变量在其他简码中调用简码。 .Parent允许您检查简码被调用的上下文。请参见简码模板。\n使用 Hugo 的内置简码 # ​\tHugo附带了一组预定义的简码，代表非常常见的用法。这些简码提供给作者方便，并使您的Markdown内容保持干净。\nfigure # ​\tfigure 是 Markdown 中图像语法的扩展，它不提供更语义化的 HTML5 元素的简写形式。\n​\tfigure简码可以使用以下命名参数：\nsrc\n要显示的图像的URL。\nlink\n如果图像需要超链接，目标的URL。\ntarget\n如果设置了link参数，则为URL的可选target属性。\nrel\n如果设置了link参数，则为URL的可选rel属性。\nalt\n如果无法显示图像，则为图像的替代文本。\ntitle\n图像标题。\ncaption\n图像标题。在caption的值中的Markdown将被渲染。\nclass\nHTML figure标记的class属性。\nheight\n图像的height属性。\nwidth\n图像的width属性。\nattr\n图像归属文本。在attr的值中的Markdown将被渲染。\nattrlink\n如果需要将归属文本超链接，则为目标的URL。\n示例figure输入 # figure-input-example.md\n\\{\\{\\\u0026lt; figure src=\u0026#34;elephant.jpg\u0026#34; title=\u0026#34;\u0026gt;An elephant at sunset\u0026#34; \\\u0026gt;\\}\\} 示例figure输出 # \u0026lt;figure\u0026gt; \u0026lt;img src=\u0026#34;elephant.jpg\u0026#34;\u0026gt; \u0026lt;figcaption\u0026gt;An elephant at sunset\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; gist # ​\t要显示此URL的GitHub代码片段（gist）：\nhttps://gist.github.com/user/50a7482715eac222e230d1e64dd9a89b ​\t在您的Markdown中包含以下内容：\n\\{\\{\\\u0026lt; gist user 50a7482715eac222e230d1e64dd9a89b \\\u0026gt;\\}\\} ​\t这将按文件名按字母顺序显示gist中的所有文件。\n{{ with .GetTerms \u0026#34;tags\u0026#34; }} \u0026lt;ul\u0026gt; {{ range . }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/tags/tag-a/\u0026#34;\u0026gt;Tag A\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/tags/tab-b/\u0026#34;\u0026gt;Tab B\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/tags/tab-c/\u0026#34;\u0026gt;Tab C\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; ​\t要显示gist中的特定文件：\n\\{\\{\\\u0026lt; gist user 50a7482715eac222e230d1e64dd9a89b 1-template.html \\\u0026gt;\\}\\} ​\t渲染结果：\n{{ with .GetTerms \u0026#34;tags\u0026#34; }} \u0026lt;ul\u0026gt; {{ range . }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} highlight # ​\t用于展示高亮代码示例：\n\\{\\{\\\u0026lt; highlight go-html-template \\\u0026gt;\\}\\} {{ range .Pages }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} \\{\\{\\\u0026lt; /highlight \\\u0026gt;\\}\\} ​\t渲染结果：\n{{ range .Pages }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} ​\t若要指定一个或多个高亮选项，请使用引号包围、逗号分隔的列表：\n\\{\\{\\\u0026lt; highlight go-html-template \u0026#34;lineNos=inline, lineNoStart=42\u0026#34; \\\u0026gt;\\}\\} {{ range .Pages }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} \\{\\{\\\u0026lt; /highlight \\\u0026gt;\\}\\} ​\t渲染结果：\n42{{ range .Pages }} 43 \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; 44{{ end }} instagram # ​\tinstagram简码使用Facebook的oEmbed Read功能。Facebook开发者文档说明：\n这个权限或特性需要App Review流程成功完成，然后您的应用才能访问实时数据。了解更多 此权限或功能仅在业务验证后才可用。在应用访问数据之前，您可能还需要签署其他合同。在此处了解更多 ​\t您必须获得Access Token才能使用instagram 简码。\n​\t如果您的站点配置是私有的：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml services: instagram: accessToken: xxx ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [services] [services.instagram] accessToken = 'xxx' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;services\u0026quot;: { \u0026quot;instagram\u0026quot;: { \u0026quot;accessToken\u0026quot;: \u0026quot;xxx\u0026quot; } } } ``` ​\t如果您的站点配置不是私有的，请使用环境变量设置 Access Token：\nHUGO_SERVICES_INSTAGRAM_ACCESSTOKEN=xxx hugo --gc --minify ​\t如果您正在使用Client Access Token，您必须使用管道符（APPID|ACCESSTOKEN）将Access Token与您的App ID 结合起来。\n​\t要显示具有此 URL 的 Instagram 帖子：\nhttps://www.instagram.com/p/BWNjjyYFxVx/ ​\t在您的 Markdown 中包含以下内容：\n\\{\\{\\\u0026lt; instagram BWNjjyYFxVx \\\u0026gt;\\}\\} param # ​\t从当前页面的前置元数据中的 params 集合获取一个值，并回退到站点参数值。如果在其中都找不到具有给定键的参数，则会记录一个 ERROR。\n\\{\\{\\\u0026lt; param testparam \\\u0026gt;\\}\\} ​\t由于 testparam 是此页面前置元数据中定义的参数，其值为 Hugo Rocks!，因此以上内容将打印出：\nHugo Rocks!\n​\t要访问深层嵌套的参数，请使用\u0026quot;点语法\u0026quot;，例如：\n\\{\\{\\\u0026lt; param \u0026#34;my.nested.param\u0026#34; \\\u0026gt;\\}\\} ref 和relref # ​\t这些简码将通过相对路径（例如blog/post.md）或逻辑名称（post.md）查找页面，并返回找到的页面的永久链接（ref 即 permalink ）或相对永久链接（relref 即 relative permalink）。\n​\tref和relref还使得可以为Hugo生成的标题链接创建片段链接（fragmentary link）。\n​\t在交叉引用文档中阅读有关 ref 和 relref 的更详细描述。\n​\tref 和 relref 接受恰好一个必需的引用参数，引用参数必须在位置 0 上引用并使用引号引起来。\n示例ref和relref输入 # [Neat](\\{\\{\\\u0026lt; ref \u0026#34;blog/neat.md\u0026#34; \\\u0026gt;\\}\\}) [Who](\\{\\{\\\u0026lt; relref \u0026#34;about.md#who\u0026#34; \\\u0026gt;\\}\\}) 示例ref和relref输出 # ​\t假设标准的 Hugo 美化 URL 已经开启。\n\u0026lt;a href=\u0026#34;https://example.com/blog/neat\u0026#34;\u0026gt;Neat\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/about/#who\u0026#34;\u0026gt;Who\u0026lt;/a\u0026gt; tweet # ​\t要显示此URL的Twitter帖子：\nhttps://twitter.com/SanDiegoZoo/status/1453110110599868418 ​\t请在您的Markdown 中包含以下内容：\n\\{\\{\\\u0026lt; tweet user=\u0026#34;SanDiegoZoo\u0026#34; id=\u0026#34;1453110110599868418\u0026#34; \\\u0026gt;\\}\\} ​\t渲染结果：\nvimeo # ​\t要显示此 URL 的 Vimeo 视频：\nhttps://vimeo.com/channels/staffpicks/55073825 ​\t请在您的Markdown 中包含以下内容：\n\\{\\{\\\u0026lt; vimeo 55073825 \\\u0026gt;\\}\\} ​\t渲染结果：\n​\t如果您想进一步自定义 YouTube 或 Vimeo 输出的视觉样式，请在调用简码时添加一个名为 class 的参数。新的class将添加到包裹 \u0026lt;iframe\u0026gt; 的 \u0026lt;div\u0026gt; 中，并删除其内联样式。请注意，您还需要将id作为命名参数调用。您还可以使用 title 为 Vimeo 视频添加描述性标题。\n\\{\\{\\\u0026lt; vimeo id=\u0026#34;146022717\u0026#34; class=\u0026#34;my-vimeo-wrapper-class\u0026#34; title=\u0026#34;My vimeo video\u0026#34; \\\u0026gt;\\}\\} youtube # ​\tyoutube 简码为 YouTube 视频嵌入一个响应式视频播放器。仅需要视频的 ID，例如：\nhttps://www.youtube.com/watch?v=w7Ft2ymGmfc 示例 youtube 输入 # ​\t复制视频 URL 中 v= 后面的 YouTube 视频 ID 并将其传递给 youtube 简码：\nexample-youtube-input.md\n\\{\\{\\\u0026lt; youtube w7Ft2ymGmfc \\\u0026gt;\\}\\} ​\t此外，您可以将嵌入视频的autoplay 参数设置为 true，以自动开始播放。请记住，您不能混合使用命名和未命名参数，因此您需要将未命名的视频 ID 分配给 id 参数：\nexample-youtube-input-with-autoplay.md\n\\{\\{\\\u0026lt; youtube id=\u0026#34;w7Ft2ymGmfc\u0026#34; autoplay=\u0026#34;true\u0026#34; \\\u0026gt;\\}\\} ​\t出于辅助功能的原因，最好为您的 YouTube 视频提供一个标题。您可以使用 title 参数为简码提供标题。如果没有提供标题，将使用默认标题\u0026quot;YouTube Video\u0026quot;。\nexample-youtube-input-with-title.md\n\\{\\{\\\u0026lt; youtube id=\u0026#34;w7Ft2ymGmfc\u0026#34; title=\u0026#34;A New Hugo Site in Under Two Minutes\u0026#34; \\\u0026gt;\\}\\} 示例 youtube 输出 # ​\t使用上述 youtube 示例，将添加以下 HTML 到您的站点的标记中：\nexample-youtube-output.html\n\u0026lt;div style=\u0026#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\u0026#34;\u0026gt; \u0026lt;iframe src=\u0026#34;https://www.youtube.com/embed/w7Ft2ymGmfc?autoplay=1\u0026#34; style=\u0026#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\u0026#34; allowfullscreen title=\u0026#34;YouTube Video\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; 示例 youtube 显示 # **\t使用上述 youtube 示例（不带 autoplay=\u0026quot;true\u0026quot;），以下是访问者在您的站点上看到的内容。当然，最终的显示将取决于您的样式表和周围的标记。该视频也包含在 Hugo 文档的快速入门中。\n隐私配置 # ​\t要了解如何配置您的Hugo站点以满足新的欧盟隐私法规，请参阅Hugo和GDPR。\n创建自定义简码 # ​\t要了解更多有关创建自定义简码的信息，请参阅简码模板文档。\n另请参阅 # Hugo和《通用数据保护条例》（GDPR） 创建您自己的简码 markdownify .Get .RenderString "},{"id":135,"href":"/hugo/templ/sectiontemplates/","title":"章节页面模板","section":"模板","content":" Section Page Templates - 章节页面模板 # https://gohugo.io/templates/section-templates/\n​\t用于章节页面的模板是列表，因此具有所有可用于列举页面的变量和方法。\n向章节模板添加内容和前置元数据 # ​\t为了有效利用章节页面模板，您应首先了解Hugo的内容组织方式，特别是添加内容和前置元数据到章节和其他列表页面的_index.md文件的目的。\n章节模板查找顺序 # ​\t请参见模板查找。\n页面种类 # ​\tHugo 中的每个Page都有一个 .Kind 属性。\nKind Description Example home 主页的着陆页 /index.html page 指定页面的着陆页 my-post page (/posts/my-post/index.html) section 指定章节的着陆页 posts section (/posts/index.html) taxonomy 分类的着陆页 tags taxonomy (/tags/index.html) term 某一分类条目的着陆页 term awesome in tags taxonomy (/tags/awesome/index.html) .Site.GetPage with Sections # ​\t.Kind可以轻松地与模板中的where函数结合使用，创建特定类型的内容列表。这种方法非常适合创建列表，但有时您可能想通过章节的路径获取单个章节的索引页面。\n​\t.GetPage函数查找给定Kind和path的索引页。\n​\t您可以使用两个参数调用.Site.GetPage：kind（上述有效Kind之一）和kind value。\n例如：\n{{ .Site.GetPage \u0026quot;section\u0026quot; \u0026quot;posts\u0026quot; }} {{ .Site.GetPage \u0026quot;page\u0026quot; \u0026quot;search\u0026quot; }} 示例：创建默认章节模板 # layouts/_default/section.html\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;main\u0026gt; {{ .Content }} \u0026lt;ul class=\u0026#34;contents\u0026#34;\u0026gt; {{ range .Paginator.Pages }} \u0026lt;li\u0026gt;{{ .Title }} \u0026lt;div\u0026gt; {{ partial \u0026#34;summary.html\u0026#34; . }} \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ partial \u0026#34;pagination.html\u0026#34; . }} \u0026lt;/main\u0026gt; {{ end }} 示例：使用 .Site.GetPage # ​\t.Site.GetPage 的示例假设有以下项目目录结构：\n. └── content ├── blog │ ├── _index.md # \u0026#34;title: My Hugo Blog\u0026#34; in the front matter │ ├── post-1.md │ ├── post-2.md │ └── post-3.md └── events #Note there is no _index.md file in \u0026#34;events\u0026#34; ├── event-1.md └── event-2.md ​\t如果没有找到 _index.md 页面，则 .Site.GetPage 将返回 nil。因此，如果 content/blog/_index.md 不存在，则该模板将输出该章节的名称：\n\u0026lt;h1\u0026gt;{{ with .Site.GetPage \u0026#34;section\u0026#34; \u0026#34;blog\u0026#34; }}{{ .Title }}{{ end }}\u0026lt;/h1\u0026gt; ​\t由于 blog 有一个带有前置元数据的章节索引页位于 content/blog/_index.md，因此上述代码将返回以下结果：\n\u0026lt;h1\u0026gt;My Hugo Blog\u0026lt;/h1\u0026gt; ​\t但如果我们尝试在 events 章节使用相同的代码，则 Hugo 会默认使用章节标题，因为没有 content/events/_index.md 可供提取内容和前置元数据：\n\u0026lt;h1\u0026gt;{{ with .Site.GetPage \u0026#34;section\u0026#34; \u0026#34;events\u0026#34; }}{{ .Title }}{{ end }}\u0026lt;/h1\u0026gt; ​\t然后返回以下结果：\n\u0026lt;h1\u0026gt;Events\u0026lt;/h1\u0026gt; 另请参阅 # .GetPage 内容章节 内容类型 Hugo 中的内容列表 菜单模板 "},{"id":136,"href":"/hugo/hugopipes/","title":"Hugo Pipes","section":"文档","content":" Hugo Pipes Overview # https://gohugo.io/hugo-pipes/\n"},{"id":137,"href":"/hugo/functions/_renderstring/","title":".RenderString","section":"函数","content":"将以下英文翻译为中文：\n.RenderString # https://gohugo.io/functions/renderstring/\n​\t将标记渲染为 HTML。\n语法 # .RenderString MARKUP ​\t.RenderString 是 Page 上的方法，它使用为该页面定义的内容渲染器（如果选项中未设置）将一些标记渲染为 HTML。\n​\t该方法带有一个可选的 map 参数，其中包含以下选项：\ndisplay (\u0026ldquo;inline\u0026rdquo;)\ninline or block. If inline (default), surrounding \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; on short snippets will be trimmed.\ninline 或 block 。如果是 inline （默认值），则会在简码片段周围修剪 \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; 。\nmarkup (defaults to the Page’s markup)\n请参见内容格式列表中的标识符。\n以下是一些示例：\n{{ $optBlock := dict \u0026#34;display\u0026#34; \u0026#34;block\u0026#34; }} {{ $optOrg := dict \u0026#34;markup\u0026#34; \u0026#34;org\u0026#34; }} {{ \u0026#34;**Bold Markdown**\u0026#34; | $p.RenderString }} {{ \u0026#34;**Bold Block Markdown**\u0026#34; | $p.RenderString $optBlock }} {{ \u0026#34;/italic org mode/\u0026#34; | $p.RenderString $optOrg }} 自 v0.93.0 开始使用 注意：markdownify 使用此函数以支持 Render Hooks。\n另请参阅 # Content Formats Markdown Render Hooks Shortcodes anchorize markdownify "},{"id":138,"href":"/hugo/templ/singlepagetemplates/","title":"单页模板","section":"模板","content":" Single Page Templates - 单页模板 # ​\t在 Hugo 中，内容的主要视图是单个视图。Hugo 会为每个 Markdown 文件提供相应的单个模板进行渲染。\n单页模板查找顺序 # ​\t请参阅模板查找。\n单页模板示例 # ​\t内容页面的类型是 page，因此可以在它们的模板中使用所有 页面变量 和 站点变量。\nposts/single.html # ​\t这个单页模板使用了 Hugo 的 基础模板、.Format 函数 来处理日期、.WordCount 页面变量 以及遍历单一内容的特定分类法。with 也用来检查是否在前置元数据中设置了分类法。\nlayouts/posts/single.html\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;section id=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;h1 id=\u0026#34;title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;div\u0026gt; \u0026lt;article id=\u0026#34;content\u0026#34;\u0026gt; {{ .Content }} \u0026lt;/article\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;aside id=\u0026#34;meta\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;section\u0026gt; \u0026lt;h4 id=\u0026#34;date\u0026#34;\u0026gt; {{ .Date.Format \u0026#34;Mon Jan 2, 2006\u0026#34; }} \u0026lt;/h4\u0026gt; \u0026lt;h5 id=\u0026#34;wordcount\u0026#34;\u0026gt; {{ .WordCount }} Words \u0026lt;/h5\u0026gt; \u0026lt;/section\u0026gt; {{ with .GetTerms \u0026#34;topics\u0026#34; }} \u0026lt;ul id=\u0026#34;topics\u0026#34;\u0026gt; {{ range . }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} {{ with .GetTerms \u0026#34;tags\u0026#34; }} \u0026lt;ul id=\u0026#34;tags\u0026#34;\u0026gt; {{ range . }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; {{ with .PrevInSection }} \u0026lt;a class=\u0026#34;previous\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt; {{ .Title }}\u0026lt;/a\u0026gt; {{ end }} {{ with .NextInSection }} \u0026lt;a class=\u0026#34;next\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt; {{ .Title }}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; {{ end }} ​\t要轻松生成一个内容类型的新实例（例如，在像 project/ 这样的章节中生成新的 .md 文件），并预先配置好前置元数据，请使用内容原型。\n另请参阅 # 创建自己的简码 Hugo 的查找顺序 页面 Bundles RSS 模板 章节页面模板 "},{"id":139,"href":"/hugo/contentmanagement/relatedcontent/","title":"相关内容","section":"内容管理","content":" Related Content - 相关内容 # https://gohugo.io/content-management/related/\n​\t在\u0026quot;另请参阅\u0026quot;章节中列出相关内容。\n​\tHugo 使用一组因素来基于前置元数据参数识别页面的相关内容。这可以调整为所需的索引和参数集，或者留给Hugo的默认相关内容配置。\n列出相关内容 # ​\t要列出最多 5 个相关页面（共享相同的date或keyword参数），只需在您的单个页面模板中包含类似以下内容的partial：\nlayouts/partials/related.html\n{{ $related := .Site.RegularPages.Related . | first 5 }} {{ with $related }} \u0026lt;h3\u0026gt;See Also\u0026lt;/h3\u0026gt; \u0026lt;ul\u0026gt; {{ range . }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} ​\tRelated方法接受一个参数，可以是Page或选项映射。这些选项映射具有以下选项：\nindices\n要搜索的索引。\ndocument\n要搜索相关内容的文档。\nnamedSlices\n要搜索的关键字。\nfragments\n片段（fragments ）包含一个用于配置为\u0026quot;fragments\u0026quot;类型的索引的特殊关键字列表。这将匹配文档的片段（fragment ）标识符。\n​\t使用以上所有选项的虚构示例：\n{{ $page := . }} {{ $opts := \u0026#34;indices\u0026#34; (slice \u0026#34;tags\u0026#34; \u0026#34;keywords\u0026#34;) \u0026#34;document\u0026#34; $page \u0026#34;namedSlices\u0026#34; (slice (keyVals \u0026#34;tags\u0026#34; \u0026#34;hugo\u0026#34; \u0026#34;rocks\u0026#34;) (keyVals \u0026#34;date\u0026#34; $page.Date)) \u0026#34;fragments\u0026#34; (slice \u0026#34;heading-1\u0026#34; \u0026#34;heading-2\u0026#34;) }} ​\t我们在Hugo 0.111.0中改进和简化了这个功能。在此之前，我们有3种不同的方法：Related，RelatedTo和RelatedIndicies。现在我们只有一个方法：Related。旧的方法仍然可用但已弃用。另请参阅此博客文章，以获得更高级用法的详细解释。\n在相关内容中索引内容标题 # New in v0.111.0\n​\tHugo可以索引您内容中的标题，并使用此功能查找相关内容。您可以通过将类型为fragments的索引添加到related配置中来启用此功能：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml related: includeNewer: true indices: - applyFilter: false name: fragmentrefs type: fragments weight: 80 threshold: 20 toLower: false ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [related] includeNewer = true threshold = 20 toLower = false [[related.indices]] applyFilter = false name = 'fragmentrefs' type = 'fragments' weight = 80 ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;related\u0026quot;: { \u0026quot;includeNewer\u0026quot;: true, \u0026quot;indices\u0026quot;: [ { \u0026quot;applyFilter\u0026quot;: false, \u0026quot;name\u0026quot;: \u0026quot;fragmentrefs\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;fragments\u0026quot;, \u0026quot;weight\u0026quot;: 80 } ], \u0026quot;threshold\u0026quot;: 20, \u0026quot;toLower\u0026quot;: false } } ``` name映射到可选的前置元数据切片属性，可用于从页面级别链接到片段/标题（fragment/heading）级别。 如果启用applyFilter，则结果中每个页面上的.HeadingsFiltered将反映筛选后的标题。如果您想在相关内容列表中显示标题，则这很有用： {{ $related := .Site.RegularPages.Related . | first 5 }} {{ with $related }} \u0026lt;h2\u0026gt;See Also\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; {{ range $i, $p := . }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; {{ with .HeadingsFiltered }} \u0026lt;ul\u0026gt; {{ range . }} {{ $link := printf \u0026#34;%s#%s\u0026#34; $p.RelPermalink .ID | safeURL }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ $link }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} 配置相关内容 # ​\tHugo提供了相关内容的合理默认配置，但是如果需要，您可以在全局或语言级别上对其进行微调。\n默认配置 # ​\t如果项目上没有设置任何related配置，则Hugo的相关内容方法将使用以下内容。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml related: includeNewer: false indices: - name: keywords weight: 100 - name: date weight: 10 threshold: 80 toLower: false ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [related] includeNewer = false threshold = 80 toLower = false [[related.indices]] name = 'keywords' weight = 100 [[related.indices]] name = 'date' weight = 10 ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;related\u0026quot;: { \u0026quot;includeNewer\u0026quot;: false, \u0026quot;indices\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;keywords\u0026quot;, \u0026quot;weight\u0026quot;: 100 }, { \u0026quot;name\u0026quot;: \u0026quot;date\u0026quot;, \u0026quot;weight\u0026quot;: 10 } ], \u0026quot;threshold\u0026quot;: 80, \u0026quot;toLower\u0026quot;: false } } ``` ​\t请注意，如果您将tags配置为分类（taxonomy），那么tags将与上述默认配置一起添加，并且权重为80。\n​\t应该使用相同的语法设置自定义配置。\n如果添加了一个related 配置部分，则需要添加完整配置。不能只设置例如 includeNewer，并使用 Hugo 默认值中的其他部分。\n顶级配置选项 # threshold\n0-100之间的值。较低的值将提供更多但可能不是很相关的匹配项。\nincludeNewer\n设置为true以在相关内容列表中包含新于当前页面的页面。这意味着旧帖子的输出可能会随着添加新的相关内容而发生变化。\ntoLower\n将索引和查询中的关键字转换为小写。这可能会以轻微的性能损失为代价提供更准确的结果。请注意，这也可以针对每个索引进行设置。\n每个索引的配置选项 # name\n索引名称。此值直接映射到页面参数。 Hugo支持字符串值（例如示例中的author）和列表（tags，keywords等）以及时间和日期对象。\ntype\nv0.111.0 中的新功能。basic（默认）或fragments之一。\napplyFilter\nv0.111.0 中的新功能。将type特定的过滤器应用于搜索结果。目前仅用于fragments类型。\nweight\n表示该参数相对于其他参数的重要性的整数权重。它可以是0，这将关闭此索引的效果，甚至可以是负数。使用不同的值进行测试，以确定最适合您内容的值。\ncardinalityThreshold (default 0)\nv0.111.0 中的新功能。用于从索引中删除常见关键字的百分比（0-100）。例如，将此设置为50将删除在索引中使用超过50％的文档中使用的所有关键字。\npattern\n目前仅对日期相关。在列出相关内容时，我们可能希望列出时间上也接近的内容。将\u0026quot;2006\u0026quot;（日期索引的默认值）设置为日期索引的模式将增加发布于同一年的页面的权重。对于访问频繁的博客，\u0026ldquo;200601\u0026rdquo;（年份和月份）可能是更好的默认值。\ntoLower\n见上文。\n性能考虑 # ​\t快是Hugo的中间名，如果它不是非常快，我们不会发布此功能。\n​\t这个功能已经在后台计划中，并被很多人长期要求。这个开发最近受到这个Twitter帖子的推动：\n​\tScott S. Lowe 移除了使用标签上的intersect模板函数构建的\u0026quot;相关内容\u0026quot;部分，结果在其拥有 1700 篇文章的博客上，构建时间从 30 秒减少到不到 2 秒。\n​\t他现在应该能够添加一个改进版的\u0026quot;相关内容\u0026quot;部分，而不会影响快速的实时重新加载。但需要注意的是：\n​\t他现在应该能够添加改进版的\u0026quot;相关内容\u0026quot;部分，而不放弃快速的实时重载。但值得注意的是：\n如果您不使用任何Related方法，您将不会使用相关内容功能，性能将与之前相同。 调用.RegularPages.Related等将创建一个倒排索引（有时也称为posting list），它将被重用于同一页面集合中的任何查找。在另外调用.Pages.Related之类的方法时，它会按预期工作，但会创建一个额外的倒排索引。这仍然非常快，但值得注意，特别是对于较大的站点。 ​\t我们目前不对页面内容进行索引。我们认为在解决 Sherlock 的最后一个案件之前，发布一些能让大多数人满意的东西是值得的。\n另请参阅 # 构建选项 评论 内容组织 页面资源 简码 "},{"id":140,"href":"/hugo/cli/","title":"命令","section":"文档","content":" Commands - 命令 # https://gohugo.io/commands/\n"},{"id":141,"href":"/hugo/functions/_scratch/","title":".Scratch","section":"函数","content":"将以下英文翻译为中文：\n.Scratch # https://gohugo.io/functions/scratch/\n​\t该函数用作 \u0026ldquo;草稿本\u0026rdquo;，用于存储和操作数据。\n​\tScratch 是 Hugo 的一个功能，旨在方便地在 Go 模板中操纵数据。它是一个 Page 或 简码方法，其结果数据将被附加到给定的上下文中，或者它可以作为存储在变量中的唯一实例。\n​\t请注意，Scratch 最初是作为一个解决方案创建的，以解决影响 0.48 版本之前的 Hugo 的Go 模板作用域限制问题。有关.Scratch和上下文用例的详细分析，请参阅这篇博客文章。\n带有上下文的 .Scratch vs. 本地的 newScratch # ​\t自 Hugo 0.43 起，有两种使用 Scratch 的不同方式：\n页面的 .Scratch # .Scratch 作为Page 方法或 简码方法可用，并将“草稿”数据附加到给定页面上。使用 .Scratch 必须要在 Page 或 简码上下文中。\n{{ .Scratch.Set \u0026#34;greeting\u0026#34; \u0026#34;bonjour\u0026#34; }} {{ range .Pages }} {{ .Scratch.Set \u0026#34;greeting\u0026#34; (print \u0026#34;bonjour\u0026#34; .Title) }} {{ end }} 本地的 newScratch # ​\t使用 newScratch 函数，可以将 Scratch 实例分配给任何变量。 在这种情况下，不需要Page 或 简码上下文，而 Scratch 的作用域仅为本地。以下方法可以从已分配 Scratch 实例的变量中使用：\n{{ $data := newScratch }} {{ $data.Set \u0026#34;greeting\u0026#34; \u0026#34;hola\u0026#34; }} 方法 # ​\tScratch 具有以下方法：\n​\t请注意，以下示例假设已在 $scratch 中存储了 本地 Scratch 实例。\n.Set # ​\t设置给定键的值。\n{{ $scratch.Set \u0026#34;greeting\u0026#34; \u0026#34;Hello\u0026#34; }} .Get # ​\t获取给定键的值。\n{{ $scratch.Set \u0026#34;greeting\u0026#34; \u0026#34;Hello\u0026#34; }} ---- {{ $scratch.Get \u0026#34;greeting\u0026#34; }} \u0026gt; Hello .Add # ​\t将给定值添加到给定键的现有值中。\n​\t对于单个值，Add接受支持 Go 的 + 运算符的值。如果某个键的第一个 Add 是一个数组或切片，则后续添加的内容将追加到该列表中。\n{{ $scratch.Add \u0026#34;greetings\u0026#34; \u0026#34;Hello\u0026#34; }} {{ $scratch.Add \u0026#34;greetings\u0026#34; \u0026#34;Welcome\u0026#34; }} ---- {{ $scratch.Get \u0026#34;greetings\u0026#34; }} \u0026gt; HelloWelcome {{ $scratch.Add \u0026#34;total\u0026#34; 3 }} {{ $scratch.Add \u0026#34;total\u0026#34; 7 }} ---- {{ $scratch.Get \u0026#34;total\u0026#34; }} \u0026gt; 10 {{ $scratch.Add \u0026#34;greetings\u0026#34; (slice \u0026#34;Hello\u0026#34;) }} {{ $scratch.Add \u0026#34;greetings\u0026#34; (slice \u0026#34;Welcome\u0026#34; \u0026#34;Cheers\u0026#34;) }} ---- {{ $scratch.Get \u0026#34;greetings\u0026#34; }} \u0026gt; []interface {}{\u0026#34;Hello\u0026#34;, \u0026#34;Welcome\u0026#34;, \u0026#34;Cheers\u0026#34;} .SetInMap # Takes a key, mapKey and value and adds a map of mapKey and value to the given key.\n​\t接收一个 key 、 mapKey 和 value ，并将 mapKey 和 value 的映射添加到给定的 key 中。\n{{ $scratch.SetInMap \u0026#34;greetings\u0026#34; \u0026#34;english\u0026#34; \u0026#34;Hello\u0026#34; }} {{ $scratch.SetInMap \u0026#34;greetings\u0026#34; \u0026#34;french\u0026#34; \u0026#34;Bonjour\u0026#34; }} ---- {{ $scratch.Get \u0026#34;greetings\u0026#34; }} \u0026gt; map[french:Bonjour english:Hello] .DeleteInMap # Takes a key and mapKey and removes the map of mapKey from the given key.\n​\t接收一个 key 和 mapKey ，并从给定的 key 中删除 mapKey 的映射。\n{{ .Scratch.SetInMap \u0026#34;greetings\u0026#34; \u0026#34;english\u0026#34; \u0026#34;Hello\u0026#34; }} {{ .Scratch.SetInMap \u0026#34;greetings\u0026#34; \u0026#34;french\u0026#34; \u0026#34;Bonjour\u0026#34; }} ---- {{ .Scratch.DeleteInMap \u0026#34;greetings\u0026#34; \u0026#34;english\u0026#34; }} ---- {{ .Scratch.Get \u0026#34;greetings\u0026#34; }} \u0026gt; map[french:Bonjour] .GetSortedMapValues # Return an array of values from key sorted by mapKey.\n​\t按 mapKey 排序，返回 key 中的值数组。\n{{ $scratch.SetInMap \u0026#34;greetings\u0026#34; \u0026#34;english\u0026#34; \u0026#34;Hello\u0026#34; }} {{ $scratch.SetInMap \u0026#34;greetings\u0026#34; \u0026#34;french\u0026#34; \u0026#34;Bonjour\u0026#34; }} ---- {{ $scratch.GetSortedMapValues \u0026#34;greetings\u0026#34; }} \u0026gt; [Hello Bonjour] .Delete # Remove the given key.\n​\t删除给定的键。\n{{ $scratch.Set \u0026#34;greeting\u0026#34; \u0026#34;Hello\u0026#34; }} ---- {{ $scratch.Delete \u0026#34;greeting\u0026#34; }} .Values # Return the raw backing map. Note that you should only use this method on the locally scoped Scratch instances you obtain via newScratch, not .Page.Scratch etc., as that will lead to concurrency issues.\n​\t返回原始的后备映射。注意，只应在通过 newScratch 获得的局部范围的Scratch实例上使用此方法，而不是 .Page.Scratch 等，因为会导致并发问题。\n另请参阅 # .Store Menu Variables Page Resources after delimit "},{"id":142,"href":"/hugo/templ/contentviewtemplates/","title":"内容视图模板","section":"模板","content":" Content View Templates - 内容视图模板 # https://gohugo.io/templates/views/\n​\tHugo可以渲染内容的替代视图，这在列表和摘要视图中特别有用。\n​\t这些替代的内容视图在列表模板中特别有用。\n​\t以下是内容视图的常见用例：\n您希望在主页上显示每种类型的内容，但仅以有限的摘要视图显示。 您只想在分类列表页面上显示您的内容的项目列表。视图通过将每种不同类型的内容的渲染委托给内容本身来使此过程变得非常简单。 创建内容视图 # ​\t要创建新视图，请在每个不同的内容类型目录中创建具有视图名称的模板。以下示例包含用于posts和project内容类型的\u0026quot;li\u0026quot;视图和\u0026quot;summary\u0026quot;视图。正如您所看到的，这些视图与单个内容视图模板single.html并排。您甚至可以为给定类型提供特定的视图，并继续使用_default/single.html作为主视图。\n▾ layouts/ ▾ posts/ li.html single.html summary.html ▾ project/ li.html single.html summary.html ​\tHugo还支持使用默认内容模板，以在没有为该类型提供特定内容视图模板的情况下使用。内容视图也可以在_default目录中定义，并且将像列表和单个模板一样工作，最终作为查找顺序的一部分向下传递到_default目录中。\n▾ layouts/ ▾ _default/ li.html single.html summary.html 哪个模板将被渲染？ # ​\t以下是内容视图的查找顺序：\n/layouts/\u0026lt;TYPE\u0026gt;/\u0026lt;VIEW\u0026gt;.html /layouts/_default/\u0026lt;VIEW\u0026gt;.html /themes/\u0026lt;THEME\u0026gt;/layouts/\u0026lt;TYPE\u0026gt;/\u0026lt;VIEW\u0026gt;.html /themes/\u0026lt;THEME\u0026gt;/layouts/_default/\u0026lt;VIEW\u0026gt;.html 示例：列表中的内容视图 # ​\t以下示例演示了如何在列表模板中使用内容视图。\nlist.html # ​\t在此示例中，将.Render被传递到模板中以调用render函数。 .Render是一种特殊的函数，它指示内容使用第一个参数提供的视图模板渲染自身。在本例中，该模板将渲染以下summary.html视图：\nlayouts/_default/list.html\n\u0026lt;main id=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1 id=\u0026#34;title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ range .Pages }} {{ .Render \u0026#34;summary\u0026#34; }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; summary.html # ​\tHugo将整个页面对象传递给以下summary.html视图模板。（有关完整列表，请参见页面变量。）\nlayouts/_default/summary.html\n\u0026lt;article class=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#39;{{ .Permalink }}\u0026#39;\u0026gt; {{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;post-meta\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} - {{ .FuzzyWordCount }} Words \u0026lt;/div\u0026gt; \u0026lt;/header\u0026gt; {{ .Summary }} \u0026lt;footer\u0026gt; \u0026lt;a href=\u0026#39;{{ .Permalink }}\u0026#39;\u0026gt;\u0026lt;nobr\u0026gt;Read more →\u0026lt;/nobr\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/article\u0026gt; li.html # ​\t继续上一个示例，我们可以通过更改调用 .Render 函数中的参数来使用较小的 li.html 视图（即 {{ .Render \u0026quot;li\u0026quot; }}）。\nlayouts/_default/li.html\n\u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026#34;meta\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; 另请参阅 # .Render "},{"id":143,"href":"/hugo/contentmanagement/sections/","title":"内容章节","section":"内容管理","content":" Content Sections - 内容章节 # https://gohugo.io/content-management/sections/\n​\tHugo 生成与您的内容匹配的章节树。\n​\t章节是根据 content/ 目录下的组织结构定义的页面集合。\n​\t默认情况下，content/ 下的所有一级目录都形成自己的章节（根章节），前提是它们构成分支 Bundles。即使是一级目录，如果它们只是叶子 Bundles，也不会形成自己的章节。\n​\t如果用户需要在更深的层次上定义一个名为 foo 的章节，则需要创建一个名为 foo 的目录，并包含一个 _index.md 文件（有关更多信息，请参见分支 Bundles）。\n​\t章节不能通过前置元数据参数进行定义或覆盖——它严格基于内容组织结构派生。\n嵌套章节 # ​\t章节可以嵌套到任意深度。\ncontent └── blog \u0026lt;-- Section, 因为是content/目录下的一级目录 ├── funny-cats │ ├── mypost.md │ └── kittens \u0026lt;-- Section, 因为包含 _index.md │ └── _index.md └── tech \u0026lt;-- Section, 因为包含 _index.md └── _index.md ​\t理解的重要部分是，为了使章节树完全可导航，至少需要一个内容文件作为最低层的章节（例如 _index.md）。\n​\t当我们谈论与模板选择相关的章节时，目前仅涉及根章节（/blog/funny-cats/mypost/ =\u0026gt; blog）。\n​\t如果您需要一个子章节的特定模板，则需要在前置元数据参数中调整type或layout。\n示例：面包屑导航 # ​\t通过可用的章节变量和方法，您可以构建强大的导航。其中一个常见的示例是使用部分（partial ）来显示面包屑导航：\nlayouts/partials/breadcrumb.html\n\u0026lt;nav aria-label=\u0026#34;breadcrumb\u0026#34;\u0026gt; \u0026lt;ol\u0026gt; {{ range .Ancestors.Reverse }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt; \u0026lt;a aria-current=\u0026#34;page\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/nav\u0026gt; 章节页面变量和方法 # ​\t另请参见页面变量。\n.CurrentSection\n该页面所属的当前章节。如果该页面本身就是章节或主页，则该值可以是该页面本身。\n.FirstSection\n根目录下该页面的第一级章节，例如/docs、/blog 等。\n.InSection $anotherPage\n给定页面是否在当前章节中。\n.IsAncestor $anotherPage\n当前页面是否是给定页面的祖先。\n.IsDescendant $anotherPage\n当前页面是否是给定页面的后代。\n.Parent\n一个章节的父章节或一个页面所属的章节。\n.Section\n该内容所属的章节。注意：对于被嵌套章节，这是目录中的第一个路径元素，例如 /blog/funny/mypost/ =\u0026gt; blog。\n.Sections\n此内容下面的章节。\n内容章节列表 # ​\tHugo 将为每个根章节自动创建一个页面，列出该章节中的所有内容。有关自定义这些页面的渲染方式的详细信息，请参见章节模板文档。\n内容章节与内容类型 # ​\t默认情况下，创建在章节中的所有内容都将使用与根章节名称相匹配的内容type。例如，Hugo 将假定 posts/post-1.md 具有 posts 内容type。如果您正在使用 post 章节的原型，Hugo 将根据在 archetypes/posts.md 中找到的内容生成前置元数据。\n另请参阅 # 内容类型 .GetPage 评论 内容组织 Hugo 中的内容列表 "},{"id":144,"href":"/hugo/troubleshooting/","title":"Troubleshooting","section":"文档","content":" Troubleshoot # https://gohugo.io/troubleshooting/\nThe Troubleshooting section includes known issues, recent workarounds, and FAQs pulled from the Hugo Discussion Forum.\n"},{"id":145,"href":"/hugo/functions/_store/","title":".Store","section":"函数","content":"将以下英文翻译为中文：\n.Store # https://gohugo.io/functions/store/\nReturns a Scratch that is not reset on server rebuilds.\nThe .Store method on .Page returns a Scratch to store and manipulate data. In contrast to the .Scratch method, this Scratch is not reset on server rebuilds.\nMethods # .Set # Sets the value of a given key.\n{{ .Store.Set \u0026#34;greeting\u0026#34; \u0026#34;Hello\u0026#34; }} .Get # Gets the value of a given key.\n{{ .Store.Set \u0026#34;greeting\u0026#34; \u0026#34;Hello\u0026#34; }} {{ .Store.Get \u0026#34;greeting\u0026#34; }} → Hello .Add # Adds a given value to existing value(s) of the given key.\nFor single values, Add accepts values that support Go’s + operator. If the first Add for a key is an array or slice, the following adds will be appended to that list.\n{{ .Store.Add \u0026#34;greetings\u0026#34; \u0026#34;Hello\u0026#34; }} {{ .Store.Add \u0026#34;greetings\u0026#34; \u0026#34;Welcome\u0026#34; }} {{ .Store.Get \u0026#34;greetings\u0026#34; }} → HelloWelcome {{ .Store.Add \u0026#34;total\u0026#34; 3 }} {{ .Store.Add \u0026#34;total\u0026#34; 7 }} {{ .Store.Get \u0026#34;total\u0026#34; }} → 10 {{ .Store.Add \u0026#34;greetings\u0026#34; (slice \u0026#34;Hello\u0026#34;) }} {{ .Store.Add \u0026#34;greetings\u0026#34; (slice \u0026#34;Welcome\u0026#34; \u0026#34;Cheers\u0026#34;) }} {{ .Store.Get \u0026#34;greetings\u0026#34; }} → []interface {}{\u0026#34;Hello\u0026#34;, \u0026#34;Welcome\u0026#34;, \u0026#34;Cheers\u0026#34;} .SetInMap # Takes a key, mapKey and value and adds a map of mapKey and value to the given key.\n{{ .Store.SetInMap \u0026#34;greetings\u0026#34; \u0026#34;english\u0026#34; \u0026#34;Hello\u0026#34; }} {{ .Store.SetInMap \u0026#34;greetings\u0026#34; \u0026#34;french\u0026#34; \u0026#34;Bonjour\u0026#34; }} {{ .Store.Get \u0026#34;greetings\u0026#34; }} → map[french:Bonjour english:Hello] .DeleteInMap # Takes a key and mapKey and removes the map of mapKey from the given key.\n{{ .Store.SetInMap \u0026#34;greetings\u0026#34; \u0026#34;english\u0026#34; \u0026#34;Hello\u0026#34; }} {{ .Store.SetInMap \u0026#34;greetings\u0026#34; \u0026#34;french\u0026#34; \u0026#34;Bonjour\u0026#34; }} {{ .Store.DeleteInMap \u0026#34;greetings\u0026#34; \u0026#34;english\u0026#34; }} {{ .Store.Get \u0026#34;greetings\u0026#34; }} → map[french:Bonjour] .GetSortedMapValues # Returns an array of values from key sorted by mapKey.\n{{ .Store.SetInMap \u0026#34;greetings\u0026#34; \u0026#34;english\u0026#34; \u0026#34;Hello\u0026#34; }} {{ .Store.SetInMap \u0026#34;greetings\u0026#34; \u0026#34;french\u0026#34; \u0026#34;Bonjour\u0026#34; }} {{ .Store.GetSortedMapValues \u0026#34;greetings\u0026#34; }} → [Hello Bonjour] .Delete # Removes the given key.\n{{ .Store.Set \u0026#34;greeting\u0026#34; \u0026#34;Hello\u0026#34; }} {{ .Store.Delete \u0026#34;greeting\u0026#34; }} 另请参阅 # .Scratch Menu Variables Page Resources "},{"id":146,"href":"/hugo/templ/datatemplates/","title":"数据模板","section":"模板","content":" Data Templates - 数据模板 # https://gohugo.io/templates/data-templates/\n​\t除了Hugo内置的变量，您可以在模板或简码中指定自己的自定义数据，这些数据可以来自本地和动态源。\n​\tHugo支持从位于Hugo项目根目录下的data目录中的YAML、JSON、XML和TOML文件加载数据。\ndata文件夹 # ​\tdata 文件夹应该存储在生成站点时 Hugo 需要使用的其他数据。\n​\t数据文件不用于生成独立的页面。它们应该通过以下方式补充内容文件：\n当前置元数据字段过于复杂时扩展内容；或 在模板中显示一个更大的数据集（参见下面的示例） ​\t在这两种情况下，最好将这些数据外包到它们（自己的）的文件中。\n​\t这些文件必须是 YAML、JSON、XML 或 TOML 文件（使用 .yml、.yaml、.json、.xml 或 .toml 扩展名）。这些数据将作为 map 存储在 .Site.Data 变量中。\n​\t要使用 site.Data.filename 表示法访问数据，该filename必须以下划线或 Unicode 字母开头，后跟零个或多个下划线、Unicode 字母或 Unicode 数字。例如：\n123.json - 无效的 x123.json - 有效的 _123.json - 有效的 ​\t要使用 index 函数访问这些数据，则该文件名无关紧要。例如：\n数据文件 模板代码 123.json {{ index .Site.Data \u0026quot;123\u0026quot; }} x123.json {{ index .Site.Data \u0026quot;x123\u0026quot; }} _123.json {{ index .Site.Data \u0026quot;_123\u0026quot; }} x-123.json {{ index .Site.Data \u0026quot;x-123\u0026quot; }} 主题中的数据文件 # ​\t数据文件也可以在主题中使用。\n​\t但是，请注意，主题数据文件与项目目录合并，以项目目录为优先。也就是说，如果存在相同名称和相对路径的两个文件，则根项目 data 目录中文件中的数据将覆盖 themes/\u0026lt;THEME\u0026gt;/data 目录中文件中的数据（对于重复的键）。\n​\t因此，主题作者应该小心，不要包含用户可以轻松覆盖的数据文件，因为用户可能决定自定义主题。对于不应被覆盖的特定于主题的数据项，最好在文件夹结构前加上命名空间，例如 mytheme/data/\u0026lt;THEME\u0026gt;/somekey/...。要检查是否存在此类重复项，请使用 -v 标志运行 hugo。\n​\t从数据文件创建数据模板的映射中的键将是一组点链接的 path、filename 和文件中的 key（如果适用）。\n​\t以下是最好的说明例子：\n示例：Jaco Pastorius的个人唱片 # ​\tJaco Pastorius 是一位伟大的贝斯手，但他的个人唱片分类目录非常简短，足以作为一个示例。John Patitucci 是另一位贝斯巨匠。\n​\t下面的示例有点牵强，但它说明了数据文件的灵活性。这个示例使用 TOML 作为文件格式，其中包含以下两个数据文件：\ndata/jazz/bass/jacopastorius.toml data/jazz/bass/johnpatitucci.toml ​\tjacopastorius.toml 包含以下内容。 johnpatitucci.toml 包含类似的列表：\njacopastorius.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml discography: - 1974 - Modern American Music … Period! The Criteria Sessions - 1974 - Jaco - 1976 - Jaco Pastorius - 1981 - Word of Mouth - 1981 - The Birthday Concert (released in 1995) - 1982 - Twins I \u0026amp; II (released in 1999) - 1983 - Invitation - 1986 - Broadway Blues (released in 1998) - 1986 - Honestly Solo Live (released in 1990) - 1986 - Live In Italy (released in 1991) - 1986 - Heavy'n Jazz (released in 1992) - 1991 - Live In New York City, Volumes 1-7. - 1999 - Rare Collection (compilation) - '2003 - Punk Jazz: The Jaco Pastorius Anthology (compilation)' - 2007 - The Essential Jaco Pastorius (compilation) ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml discography = ['1974 - Modern American Music … Period! The Criteria Sessions', '1974 - Jaco', '1976 - Jaco Pastorius', '1981 - Word of Mouth', '1981 - The Birthday Concert (released in 1995)', '1982 - Twins I \u0026amp; II (released in 1999)', '1983 - Invitation', '1986 - Broadway Blues (released in 1998)', '1986 - Honestly Solo Live (released in 1990)', '1986 - Live In Italy (released in 1991)', \u0026quot;1986 - Heavy'n Jazz (released in 1992)\u0026quot;, '1991 - Live In New York City, Volumes 1-7.', '1999 - Rare Collection (compilation)', '2003 - Punk Jazz: The Jaco Pastorius Anthology (compilation)', '2007 - The Essential Jaco Pastorius (compilation)'] ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;discography\u0026quot;: [ \u0026quot;1974 - Modern American Music … Period! The Criteria Sessions\u0026quot;, \u0026quot;1974 - Jaco\u0026quot;, \u0026quot;1976 - Jaco Pastorius\u0026quot;, \u0026quot;1981 - Word of Mouth\u0026quot;, \u0026quot;1981 - The Birthday Concert (released in 1995)\u0026quot;, \u0026quot;1982 - Twins I \\u0026 II (released in 1999)\u0026quot;, \u0026quot;1983 - Invitation\u0026quot;, \u0026quot;1986 - Broadway Blues (released in 1998)\u0026quot;, \u0026quot;1986 - Honestly Solo Live (released in 1990)\u0026quot;, \u0026quot;1986 - Live In Italy (released in 1991)\u0026quot;, \u0026quot;1986 - Heavy'n Jazz (released in 1992)\u0026quot;, \u0026quot;1991 - Live In New York City, Volumes 1-7.\u0026quot;, \u0026quot;1999 - Rare Collection (compilation)\u0026quot;, \u0026quot;2003 - Punk Jazz: The Jaco Pastorius Anthology (compilation)\u0026quot;, \u0026quot;2007 - The Essential Jaco Pastorius (compilation)\u0026quot; ] } ``` ​\t可以通过 .Site.Data.jazz.bass 访问贝斯手列表，通过添加文件名而不带后缀名来访问单个贝斯手，例如 .Site.Data.jazz.bass.jacopastorius。\n​\t现在可以在模板中呈现所有贝斯手的唱片列表：\n{{ range $.Site.Data.jazz.bass }} {{ partial \u0026#34;artist.html\u0026#34; . }} {{ end }} ​\t然后在 partials/artist.html 中：\n\u0026lt;ul\u0026gt; {{ range .discography }} \u0026lt;li\u0026gt;{{ . }}\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; ​\t发现新的喜欢的贝斯手？只需在相同的目录中添加另一个 .toml 文件即可。\n示例：从数据文件中访问命名的值 # ​\t假设在 data/ 下的 User0123.[yml|toml|xml|json] 数据文件中，您有以下数据结构：\nUser0123.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml Achievements: - Can create a Key, Value list from Data File - Learns Hugo - Reads documentation Name: User0123 Short Description: He is a **jolly good** fellow. ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml Achievements = ['Can create a Key, Value list from Data File', 'Learns Hugo', 'Reads documentation'] Name = 'User0123' 'Short Description' = 'He is a **jolly good** fellow.' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;Achievements\u0026quot;: [ \u0026quot;Can create a Key, Value list from Data File\u0026quot;, \u0026quot;Learns Hugo\u0026quot;, \u0026quot;Reads documentation\u0026quot; ], \u0026quot;Name\u0026quot;: \u0026quot;User0123\u0026quot;, \u0026quot;Short Description\u0026quot;: \u0026quot;He is a **jolly good** fellow.\u0026quot; } ``` ​\t您可以使用以下代码在布局中渲染 Short Description：\n\u0026lt;div\u0026gt;Short Description of {{ .Site.Data.User0123.Name }}: \u0026lt;p\u0026gt;{{ index .Site.Data.User0123 \u0026#34;Short Description\u0026#34; | markdownify }}\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt; ​\t请注意使用 markdownify 模板函数。这将通过 Markdown 渲染引擎发送描述。\n获取远程数据 # ​\t使用 getJSON 或 getCSV 获取远程数据：\n{{ $dataJ := getJSON \u0026#34;url\u0026#34; }} {{ $dataC := getCSV \u0026#34;separator\u0026#34; \u0026#34;url\u0026#34; }} ​\t如果为 URL 使用前缀或后缀，则这些函数接受可变参数：\n{{ $dataJ := getJSON \u0026#34;url prefix\u0026#34; \u0026#34;arg1\u0026#34; \u0026#34;arg2\u0026#34; \u0026#34;arg n\u0026#34; }} {{ $dataC := getCSV \u0026#34;separator\u0026#34; \u0026#34;url prefix\u0026#34; \u0026#34;arg1\u0026#34; \u0026#34;arg2\u0026#34; \u0026#34;arg n\u0026#34; }} ​\tgetCSV 的分隔符（separator）必须放在第一个位置，并且只能是一个字符长。\n​\t所有传递的参数将连接到最终 URL：\n{{ $urlPre := \u0026#34;https://api.github.com\u0026#34; }} {{ $gistJ := getJSON $urlPre \u0026#34;/users/GITHUB_USERNAME/gists\u0026#34; }} ​\t这将在内部解析为以下内容：\n{{ $gistJ := getJSON \u0026#34;https://api.github.com/users/GITHUB_USERNAME/gists\u0026#34; }} 添加 HTTP 标头 # ​\tgetJSON 和 getCSV 都以可选的 map 作为最后一个参数，例如：\n{{ $data := getJSON \u0026#34;https://example.org/api\u0026#34; (dict \u0026#34;Authorization\u0026#34; \u0026#34;Bearer abcd\u0026#34;) }} ​\t如果您需要同一标头键的多个值，请使用切片：\n{{ $data := getJSON \u0026#34;https://example.org/api\u0026#34; (dict \u0026#34;X-List\u0026#34; (slice \u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34;)) }} CSV 文件示例 # ​\t对于getCSV，一个字符长的分隔符必须放在第一个位置，然后是URL。以下是从已发布的CSV在partial模板中创建HTML表格的示例：\nlayouts/partials/get-csv.html\n\u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Position\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Salary\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; {{ $url := \u0026#34;https://example.com/finance/employee-salaries.csv\u0026#34; }} {{ $sep := \u0026#34;,\u0026#34; }} {{ range $i, $r := getCSV $sep $url }} \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ index $r 0 }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ index $r 1 }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ index $r 2 }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; {{ end }} \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; ​\t表达式{{ index $r number }}必须用于输出当前行的第n列。\n缓存 URL # ​\t每个下载的URL将被缓存到默认文件夹$TMPDIR/hugo_cache/中。变量$TMPDIR将被解析为依赖于您系统的临时目录。\n​\t使用命令行标志--cacheDir，您可以指定系统上的任何文件夹作为缓存目录。\n​\t您还可以在主配置文件中设置cacheDir。\n​\t如果您不喜欢缓存，可以使用命令行标志--ignoreCache完全禁用缓存。\n使用 REST URL 进行身份验证 # ​\t目前，您只能使用可以放入URL中的那些身份验证方法。OAuth和其他身份验证方法未实现。\n加载本地文件 # ​\t要使用getJSON和getCSV加载本地文件，源文件必须位于Hugo的工作目录中。文件扩展名不重要，但（文件的）内容重要。\n​\t它应用了与上面在获取远程数据中相同的输出逻辑。\n​\t要使用getCSV加载的本地CSV文件必须位于data目录之外。\n数据文件的 LiveReload # ​\t当URL的内容发生更改时，没有机会触发LiveReload。但是，当本地文件更改时（即，data/*和themes/\u0026lt;THEME\u0026gt;/data/*），将触发LiveReload。不支持符号链接。请注意，由于下载数据需要一段时间，Hugo会在数据下载完成之前停止处理Markdown文件。\n​\t如果更改了任何本地文件并触发了LiveReload，则Hugo将从缓存中读取数据驱动（URL）内容。如果您禁用了缓存（例如，通过使用hugo server --ignoreCache运行服务器），Hugo将在每次LiveReload触发时重新下载内容。这可能会产生巨大的流量。您可能会很快达到API限制。\n数据驱动内容的示例 # 照片库采用 JSON 数据驱动：https://github.com/pcdummy/hugo-lightslider-example 使用数据驱动内容和自定义简码，在一篇文章中介绍了 GitHub 星标仓库：GitHub Starred Repositories。 数据格式规范 # TOML 规范 YAML 规范 JSON 规范 CSV 规范 XML 规范 另请参阅 # 配置 Hugo 前置元数据 RSS 模板 Sitemap模板 jsonify "},{"id":147,"href":"/hugo/contentmanagement/archetypes/","title":"原型","section":"内容管理","content":" Archetypes - 原型 # https://gohugo.io/content-management/archetypes/\n​\tArchetypes是在创建新内容时使用的模板。\n什么是Archetypes？ # ​\tArchetypes是位于项目的archetypes目录中的内容模板文件，其中包含为您的站点内容类型（content types）预配置的前置元数据（前置元数据）和可能的内容排列方式。当您运行hugo new时，将使用这些模板。\n​\thugo new使用content-section来查找项目中最合适的原型模板。如果您的项目不包含任何原型文件，它也会在主题中查找。\narchetype-example.sh\nhugo new posts/my-first-post.md ​\t以上将创建一个新的内容文件content/posts/my-first-post.md，使用找到的第一个原型文件:\narchetypes/posts.md archetypes/default.md themes/my-theme/archetypes/posts.md themes/my-theme/archetypes/default.md ​\t最后两个列表项仅适用于您使用主题并且它使用my-theme主题名称作为示例。\n创建新的Archetype模板 # ​\t以下是一个虚构的newsletter section 的示例，以及原型文件archetypes/newsletter.md。在archetypes/中创建一个新文件newsletter.md并在文本编辑器中打开它。\narchetypes/newsletter.md\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} draft: true --- **Insert Lead paragraph here.** ## New Cool Posts {{ range first 10 ( where .Site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;cool\u0026#34; ) }} * {{ .Title }} {{ end }} ​\t当您使用以下命令创建新的newsletter：\nhugo new newsletter/the-latest-cool.stuff.md ​\t它将基于原型模板创建一个新的newsletter类型的内容文件。\n!!! warning \u0026ldquo;注意\u0026rdquo; 注意：如果在原型文件中使用了 .Site，那么只有在构建站点时才会构建。这对于大型站点可能需要很长时间。\n​\t上述newsletter类型的原型展示了可能性：完整的Hugo .Site和所有Hugo模板函数都可以在原型文件中使用。\n基于目录的archetypes # ​\t从Hugo 0.49开始，您可以使用完整的目录作为原型模板。假设有以下原型目录：\narchetypes ├── default.md └── post-bundle ├── bio.md ├── images │ └── featured.jpg └── index.md hugo new --kind post-bundle posts/my-post ​\t该命令将创建一个新的文件夹/content/posts/my-post，并且它包含与post-bundle原型文件夹中相同的一组文件。所有内容文件（例如index.md）都可以包含模板逻辑，并将为内容的语言接收正确的.Site。\n另请参阅 # 前置元数据 Taxonomies Taxonomy Templates .Param 构建选项 "},{"id":148,"href":"/hugo/tools/","title":"工具","section":"文档","content":" Developer Tools # https://gohugo.io/tools/\nOne of Hugo’s greatest strengths is its passionate—and always evolving—developer community. With the exception of the highlight shortcode mentioned in Syntax Highlighting, the tools and other projects featured in this section are offerings from both commercial services and open-source projects, many of which are developed by Hugo developers just like you.\nSee the popularity of Hugo compared with other static site generators.\n"},{"id":149,"href":"/hugo/functions/_unix/","title":".Unix","section":"函数","content":"将以下英文翻译为中文：\n.Unix # https://gohugo.io/functions/unix/\nConverts a time.Time value to the number of seconds elapsed since the Unix epoch, excluding leap seconds. The Unix epoch is 00:00:00 UTC on 1 January 1970.\n语法 # .Unix .UnixMilli .UnixMicro .UnixNano The Milli, Micro, and Nano variants return the number of milliseconds, microseconds, and nanoseconds (respectively) elapsed since the Unix epoch.\n.Date.Unix --\u0026gt; 1637259694 .ExpiryDate.Unix --\u0026gt; 1672559999 .Lastmod.Unix --\u0026gt; 1637361786 .PublishDate.Unix --\u0026gt; 1637421261 (\u0026#34;1970-01-01T00:00:00-00:00\u0026#34; | time.AsTime).Unix --\u0026gt; 0 (\u0026#34;1970-01-01T00:00:42-00:00\u0026#34; | time.AsTime).Unix --\u0026gt; 42 (\u0026#34;1970-04-11T01:48:29-08:00\u0026#34; | time.AsTime).Unix --\u0026gt; 8675309 (\u0026#34;2026-05-02T20:09:31-07:00\u0026#34; | time.AsTime).Unix --\u0026gt; 1777777771 now.Unix --\u0026gt; 1637447841 now.UnixMilli --\u0026gt; 1637447841347 now.UnixMicro --\u0026gt; 1637447841347378 now.UnixNano --\u0026gt; 1637447841347378799 另请参阅 # .AddDate .Format now time time.Format "},{"id":150,"href":"/hugo/contentmanagement/taxonomies/","title":"分类法","section":"内容管理","content":" Taxonomies - 分类法 # https://gohugo.io/content-management/taxonomies/\n​\tHugo支持用户定义的分类法。\n什么是分类法？ # ​\tHugo支持用户定义的内容分组，称为分类法（taxonomies）。分类法是内容之间逻辑关系的分类。\n定义 # Taxonomy\n可用于对内容进行分类的分类方式\nTerm\n分类法中的一个键\nValue\n分配给项(term)的内容\n示例分类法：电影站点 # ​\t假设您正在制作一个关于电影的站点。您可能想包括以下分类法：\nActors 演员 Directors 导演 Studios 制片厂 Genre 流派 Year 年份 Awards 奖项 ​\t然后，在每部电影中，您都需要为这些分类法指定项（即，在每部电影的内容文件的前置元数据中）。根据这些项（terms），Hugo会自动创建每个Actor、Director、Studio、Genre、Year和Award的页面，每个页面都会列出与特定Actor、Director、Studio、Genre、Year和Award匹配的所有电影。\n电影分类法组织 # ​\t继续使用电影站点的示例，以下演示了从分类法的角度看内容关系：\nActor \u0026lt;- Taxonomy Bruce Willis \u0026lt;- Term The Sixth Sense \u0026lt;- Value Unbreakable \u0026lt;- Value Moonrise Kingdom \u0026lt;- Value Samuel L. Jackson \u0026lt;- Term Unbreakable \u0026lt;- Value The Avengers \u0026lt;- Value xXx \u0026lt;- Value ​\t从内容的角度看，关系看起来不同，尽管使用的数据和标签是相同的：\nUnbreakable \u0026lt;- Value Actors \u0026lt;- Taxonomy Bruce Willis \u0026lt;- Term Samuel L. Jackson \u0026lt;- Term Director \u0026lt;- Taxonomy M. Night Shyamalan \u0026lt;- Term ... Moonrise Kingdom \u0026lt;- Value Actors \u0026lt;- Taxonomy Bruce Willis \u0026lt;- Term Bill Murray \u0026lt;- Term Director \u0026lt;- Taxonomy Wes Anderson \u0026lt;- Term ... Hugo分类法默认设置 # ​\tHugo本身支持分类法。\n​\t不需要在您的站点配置文件中添加任何行，Hugo将自动为tags和categories创建分类法。这与手动配置您的分类法相同，如下所示：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml taxonomies: category: categories tag: tags ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [taxonomies] category = 'categories' tag = 'tags' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;taxonomies\u0026quot;: { \u0026quot;category\u0026quot;: \u0026quot;categories\u0026quot;, \u0026quot;tag\u0026quot;: \u0026quot;tags\u0026quot; } } ``` ​\t如果您不想让Hugo创建任何分类法，请将站点配置中的disableKinds设置为以下内容：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml disableKinds: - taxonomy - term ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml disableKinds = ['taxonomy', 'term'] ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;disableKinds\u0026quot;: [ \u0026quot;taxonomy\u0026quot;, \u0026quot;term\u0026quot; ] } ``` Kind Description Example home 主页的着陆页 /index.html page 给定页面的着陆页 my-post page (/posts/my-post/index.html) section 给定章节的着陆页 posts section (/posts/index.html) taxonomy 分类法的着陆页 tags taxonomy (/tags/index.html) term 一个分类法项的着陆页 term awesome in tags taxonomy (/tags/awesome/index.html) 默认目标 # ​\t当使用分类法并提供分类法模板时，Hugo将自动创建列出所有分类法项的页面以及列出与每个项关联的内容的个别页面。例如，在您的配置中声明并在内容前置元数据中使用的categories分类法将创建以下页面：\n位于example.com/categories/的单个页面，列出分类法中的所有项 为每个项创建的单独的分类法列表页面（例如/categories/development/），其中显示了所有标记为该分类法的任何内容文件的前置元数据中的页面列表 配置分类法 # ​\t除了默认之外的自定义分类法在整个站点中使用之前必须在站点配置中定义。您需要为每个分类法提供复数和单数标签。例如，对于TOML，singular key = \u0026quot;plural value\u0026quot;，而对于YAML，singular key: \u0026quot;plural value\u0026quot;。\n示例：添加名为\u0026quot;series\u0026quot;的自定义分类法 # 在添加自定义分类法时，如果您想保留它们，您需要同时添加默认分类法。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml taxonomies: category: categories series: series tag: tags ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [taxonomies] category = 'categories' series = 'series' tag = 'tags' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;taxonomies\u0026quot;: { \u0026quot;category\u0026quot;: \u0026quot;categories\u0026quot;, \u0026quot;series\u0026quot;: \u0026quot;series\u0026quot;, \u0026quot;tag\u0026quot;: \u0026quot;tags\u0026quot; } } ``` 示例：删除默认分类法 # ​\t如果您只想要默认tags分类法，并删除您站点的categories分类法，可以通过修改站点配置文件中的taxonomies值来实现。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml taxonomies: tag: tags ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [taxonomies] tag = 'tags' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;taxonomies\u0026quot;: { \u0026quot;tag\u0026quot;: \u0026quot;tags\u0026quot; } } ``` ​\t如果您想要完全禁用所有分类法，请参阅 Hugo 分类法默认设置中 disableKinds 的用法。\n​\t您可以向您的分类法列表和分类法项页面添加内容和前置元数据。有关如何为此目的添加 _index.md 的更多信息，请参见内容组织。\n​\t与常规页面类似，分类法列表永久链接是可配置的，但分类法项页面永久链接是不可配置的。\n​\tHugo 0.55 版中删除了配置选项 preserveTaxonomyNames。\n​\t现在，您可以在相关分类法节点（taxonomy node）上使用 .Page.Title 来获取原始值。\n将分类法添加到内容中 # ​\t一旦在站点级别定义了分类法，任何内容都可以被分配给它，而不管内容类型或内容章节。\n​\t将内容分配给分类法是在前置元数据中完成的。只需创建一个变量，其名称为taxonomy 的复数形式，并分配所有要应用于内容类型实例的项。\n​\t如果您希望能够快速生成具有预配置分类法或项的内容文件，请阅读有关 Hugo 原型的文档。\n示例：带有taxonomies 的前置元数据 # content/example.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- categories: - Development project_url: https://github.com/gohugoio/hugo series: - Go Web Dev slug: hugo tags: - Development - Go - fast - Blogging title: 'Hugo: A fast and flexible static site generator' --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ categories = ['Development'] project_url = 'https://github.com/gohugoio/hugo' series = ['Go Web Dev'] slug = 'hugo' tags = ['Development', 'Go', 'fast', 'Blogging'] title = 'Hugo: A fast and flexible static site generator' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;categories\u0026quot;: [ \u0026quot;Development\u0026quot; ], \u0026quot;project_url\u0026quot;: \u0026quot;https://github.com/gohugoio/hugo\u0026quot;, \u0026quot;series\u0026quot;: [ \u0026quot;Go Web Dev\u0026quot; ], \u0026quot;slug\u0026quot;: \u0026quot;hugo\u0026quot;, \u0026quot;tags\u0026quot;: [ \u0026quot;Development\u0026quot;, \u0026quot;Go\u0026quot;, \u0026quot;fast\u0026quot;, \u0026quot;Blogging\u0026quot; ], \u0026quot;title\u0026quot;: \u0026quot;Hugo: A fast and flexible static site generator\u0026quot; } ``` 排序分类法 # ​\t内容文件可以为其关联的每个分类法分配权重。分类法权重可用于在分类法列表模板中排序或排序内容，并在内容文件的前置元数据中声明。声明分类法权重的约定是taxonomyname_weight。\n​\t以下显示一个具有权重为22的内容，可在渲染分配给tags分类法的\u0026quot;a\u0026quot;、\u0026ldquo;b\u0026quot;和\u0026quot;c\u0026quot;值的页面时用于排序目的。在渲染\u0026quot;d\u0026quot;类别页面时，它也被分配了权重44。\n示例：分类法weight # === \u0026ldquo;yaml\u0026rdquo;\n``` yaml categories: - d categories_weight: 44 tags: - a - b - c tags_weight: 22 title: foo ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml categories = ['d'] categories_weight = 44 tags = ['a', 'b', 'c'] tags_weight = 22 title = 'foo' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;categories\u0026quot;: [ \u0026quot;d\u0026quot; ], \u0026quot;categories_weight\u0026quot;: 44, \u0026quot;tags\u0026quot;: [ \u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot; ], \u0026quot;tags_weight\u0026quot;: 22, \u0026quot;title\u0026quot;: \u0026quot;foo\u0026quot; } ``` ​\t通过使用分类法权重，同一篇内容可以在不同的分类法中出现在不同的位置。\n​\t目前，分类法仅支持默认weight =\u0026gt; date排序列表内容。有关更多信息，请参见分类法模板的文档。\n向分类法或项添加自定义元数据 # ​\t如果您需要向分类法项添加自定义元数据，则需要在 /content/\u0026lt;TAXONOMY\u0026gt;/\u0026lt;TERM\u0026gt;/_index.md 中创建该项的页面，并在其前置元数据中添加您的元数据。继续以\u0026rsquo;Actors\u0026rsquo;为例，假设您想为每个演员添加维基百科页面链接。您的分类项页面将如下所示：\ncontent/actors/bruce-willis/_index.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- title: Bruce Willis wikipedia: https://en.wikipedia.org/wiki/Bruce_Willis --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ title = 'Bruce Willis' wikipedia = 'https://en.wikipedia.org/wiki/Bruce_Willis' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;title\u0026quot;: \u0026quot;Bruce Willis\u0026quot;, \u0026quot;wikipedia\u0026quot;: \u0026quot;https://en.wikipedia.org/wiki/Bruce_Willis\u0026quot; } ``` 另请参阅 # 分类法模板 原型 前置元数据 Hugo 中的内容列表 .Param "},{"id":151,"href":"/hugo/templ/partialtemplates/","title":"局部模板","section":"模板","content":" Partial Templates - 局部模板 # https://gohugo.io/templates/partials/\n​\tPartial 是在列表和页面模板中使用的更小的上下文感知组件，可以经济地使用以保持模板 DRY。\n局部模板查找顺序 # ​\tPartial 模板（如单页面模板和列表页面模板）具有特定的查找顺序。然而，partial 更简单，因为 Hugo 只会检查两个地方：\nlayouts/partials/*\u0026lt;PARTIALNAME\u0026gt;.html themes/\u0026lt;THEME\u0026gt;/layouts/partials/*\u0026lt;PARTIALNAME\u0026gt;.html ​\t这允许某一主题的最终用户将 partial 的内容复制到同名文件中以进行进一步的自定义。\n在您的模板中使用 Partial # ​\tHugo 项目中的所有 partial 都位于一个名为 layouts/partials 的目录中。为了更好的组织，您还可以在 partials 中创建多个子目录：\nlayouts/ └── partials/ ├── footer/ │ ├── scripts.html │ └── site-footer.html ├── head/ │ ├── favicons.html │ ├── metadata.html │ ├── prerender.html │ └── twitter.html └── header/ ├── site-header.html └── site-nav.html ​\t在模板中调用所有 partial 都使用以下模式：\n{{ partial \u0026#34;\u0026lt;PATH\u0026gt;/\u0026lt;PARTIAL\u0026gt;.html\u0026#34; . }} ​\t新手 Hugo 用户最常见的错误之一是未能向 partial 调用传递上下文。在上述模式中，请注意如何使用“点号”(.)作为第二个参数来给出 partial 上下文。您可以在Hugo 模板介绍中了解更多有关\u0026quot;the dot\u0026quot;的信息。\n​\t\u0026lt;PARTIAL\u0026gt;包括baseof已被保留。（#5373）\n​\t如上例目录结构所示，您可以在partials中嵌套目录以获得更好的源代码组织。您只需要使用相对于partials目录的嵌套 partial 路径即可：\n{{ partial \u0026#34;header/site-header.html\u0026#34; . }} {{ partial \u0026#34;footer/scripts.html\u0026#34; . }} 变量作用域 # ​\tpartial 调用中的第二个参数是要传递下去的变量。上述示例传递了.，这告诉接收 partial 的模板应用当前上下文。\n​\t这意味着 partial 只能访问这些变量。partial 是被隔离的，无法访问外部作用域。在 partial 内部，$.Var 等同于 .Var。\n从 Partial 返回一个值 # ​\t除了输出标记之外，partial 还可以用于返回任何类型的值。为了返回一个值，partial 必须在partial 的末尾包括一个孤立的 return 语句。\n示例 GetFeatured # {{/* layouts/partials/GetFeatured.html */}} {{ return first . (where site.RegularPages \u0026#34;Params.featured\u0026#34; true) }} {{/* layouts/index.html */}} {{ range partial \u0026#34;GetFeatured.html\u0026#34; 5 }} [...] {{ end }} 示例 GetImage # {{/* layouts/partials/GetImage.html */}} {{ $image := false }} {{ with .Params.gallery }} {{ $image = index . 0 }} {{ end }} {{ with .Params.image }} {{ $image = . }} {{ end }} {{ return $image }} {{/* layouts/_default/single.html */}} {{ with partial \u0026#34;GetImage.html\u0026#34; . }} [...] {{ end }} ​\t每个 partial 文件只允许一个 return 语句。\n内联 Partial # ​\t您还可以在模板中内联定义 partial。但是请记住，模板命名空间是全局的，因此您需要确保名称是唯一的，以避免冲突。\nValue: {{ partial \u0026#34;my-inline-partial.html\u0026#34; . }} {{ define \u0026#34;partials/my-inline-partial.html\u0026#34; }} {{ $value := 32 }} {{ return $value }} {{ end }} 缓存的 Partials # ​\tpartialCached模板函数可以为不需要在每次调用时重新渲染的复杂模板提供显著的性能提升。最简单的用法如下：\n{{ partialCached \u0026#34;footer.html\u0026#34; . }} ​\t您也可以传递附加参数给partialCached，以创建缓存 partial 模板的变体。\n​\t例如，您可以告诉Hugo只对每个章节渲染一次footer.html partial 模板：\n{{ partialCached \u0026#34;footer.html\u0026#34; . .Section }} ​\t如果您需要传递额外的参数以创建唯一的变体，您可以传递任意数量的变体参数：\n{{ partialCached \u0026#34;footer.html\u0026#34; . .Params.country .Params.province }} ​\t注意，变体参数不会被传递给底层的 partial 模板，它们只用于创建唯一的缓存键。\n示例 header.html # ​\t下面的header.html partial 模板被用于spf13.com：\nlayouts/partials/header.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html class=\u0026#34;no-js\u0026#34; lang=\u0026#34;en-US\u0026#34; prefix=\u0026#34;og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; {{ partial \u0026#34;meta.html\u0026#34; . }} \u0026lt;base href=\u0026#34;{{ .Site.BaseURL }}\u0026#34;\u0026gt; \u0026lt;title\u0026gt; {{ .Title }} : spf13.com \u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;canonical\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt; {{ if .RSSLink }}\u0026lt;link href=\u0026#34;{{ .RSSLink }}\u0026#34; rel=\u0026#34;alternate\u0026#34; type=\u0026#34;application/rss+xml\u0026#34; title=\u0026#34;{{ .Title }}\u0026#34; /\u0026gt;{{ end }} {{ partial \u0026#34;head_includes.html\u0026#34; . }} \u0026lt;/head\u0026gt; ​\theader.html 这个示例的partial 是在 Hugo 引入 block templates 之前创建的。关于如何定义主模板（例如站点的头部、页头和页脚）的外部 chrome 或 shell，可以在 base templates and blocks 中了解更多信息。您甚至可以组合使用 blocks 和 partials，以增加灵活性。\n示例 footer.html # ​\t下面的footer.html partial 模板被用于spf13.com：\nlayouts/partials/footer.html\n\u0026lt;footer\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p\u0026gt; \u0026amp;copy; 2013-14 Steve Francia. \u0026lt;a href=\u0026#34;https://creativecommons.org/licenses/by/3.0/\u0026#34; title=\u0026#34;Creative Commons Attribution\u0026#34;\u0026gt;Some rights reserved\u0026lt;/a\u0026gt;; please attribute properly and link back. \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt; 另请参阅 # .GetPage 内容z章节 内容类型 在 Hugo 中的内容列表 菜单模板 "},{"id":152,"href":"/hugo/hostingdeployment/","title":"Hosting \u0026 部署","section":"文档","content":" Hosting \u0026amp; Deployment # https://gohugo.io/hosting-and-deployment/\nBecause Hugo renders static websites, you can host your new Hugo website virtually anywhere. The following represent only a few of the more popular hosting and automated deployment solutions used by the Hugo community.\n"},{"id":153,"href":"/hugo/functions/abslangurl/","title":"absLangURL","section":"函数","content":"将以下英文翻译为中文：\nabsLangURL # https://gohugo.io/functions/abslangurl/\nReturns an absolute URL with a language prefix, if any.\n语法 # absLangURL INPUT Use this function with both monolingual and multilingual configurations. The URL returned by this function depends on:\nWhether the input begins with a slash The baseURL in site configuration The language prefix, if any In examples that follow, the project is multilingual with content in both Español (es) and English (en). The default language is Español. The returned values are from the English site.\nInput does not begin with a slash # If the input does not begin with a slash, the resulting URL will be correct regardless of the baseURL.\nWith baseURL = https://example.org/\n{{ absLangURL \u0026#34;\u0026#34; }} → https://example.org/en/ {{ absLangURL \u0026#34;articles\u0026#34; }} → https://example.org/en/articles {{ absLangURL \u0026#34;style.css\u0026#34; }} → https://example.org/en/style.css With baseURL = https://example.org/docs/\n{{ absLangURL \u0026#34;\u0026#34; }} → https://example.org/docs/en/ {{ absLangURL \u0026#34;articles\u0026#34; }} → https://example.org/docs/en/articles {{ absLangURL \u0026#34;style.css\u0026#34; }} → https://example.org/docs/en/style.css Input begins with a slash # If the input begins with a slash, the resulting URL will be incorrect when the baseURL includes a subdirectory. With a leading slash, the function returns a URL relative to the protocol+host section of the baseURL.\nWith baseURL = https://example.org/\n{{ absLangURL \u0026#34;/\u0026#34; }} → https://example.org/en/ {{ absLangURL \u0026#34;/articles\u0026#34; }} → https://example.org/en/articles {{ absLangURL \u0026#34;/style.css\u0026#34; }} → https://example.org/en/style.css With baseURL = https://example.org/docs/\n{{ absLangURL \u0026#34;/\u0026#34; }} → https://example.org/en/ {{ absLangURL \u0026#34;/articles\u0026#34; }} → https://example.org/en/articles {{ absLangURL \u0026#34;/style.css\u0026#34; }} → https://example.org/en/style.css The last three examples are not desirable in most situations. As a best practice, never include a leading slash when using this function.\n另请参阅 # relLangURL absURL relURL uniq Multilingual Mode "},{"id":154,"href":"/hugo/templ/shortcodetemplates/","title":"创建自己的简码","section":"模板","content":" Create Your Own Shortcodes - 创建自己的简码 # https://gohugo.io/templates/shortcode-templates/\n​\t您可以使用与单页和列表页相同的模板语法来创建自己的简码，以扩展Hugo内置的简码。\n​\t简码是一种将模板合并成小型、可重用的代码片段的方式，您可以直接在内容中嵌入这些代码片段。从这个意义上说，您可以将简码视为页面和列表模板与基本内容文件之间的中间件。\n​\tHugo还提供了常见用例的内置简码。（参见内容管理：简码。）\n创建自定义Shortcodes # ​\tHugo的内置简码涵盖了许多常见但不是全部的用例。幸运的是，Hugo提供了轻松创建自定义简码以满足您站点需求的功能。\n文件位置 # ​\t要创建一个简码，请在 源文件组织 的 layouts/shortcodes 目录中放置一个 HTML 模板。请仔细考虑文件名，因为简码名称将与文件名相同，但没有 .html 扩展名。例如，layouts/shortcodes/myshortcode.html 将根据您选择的参数类型使用 \\{\\{\\\u0026lt; myshortcode /\\\u0026gt;\\}\\} 或 \\{\\{\\% myshortcode \\/\\%\\}\\} 进行调用。\n​\t您可以在子文件夹中组织您的简码，例如在 layouts/shortcodes/boxes 中。然后，这些简码将使用它们的相对路径进行访问，例如：\n\\{{\\\u0026lt; boxes/square \\\u0026gt;\\}\\} ​\t注意正斜杠。\n简码模板查找顺序 # ​\t简码模板具有简单的查找顺序：\n/layouts/shortcodes/\u0026lt;SHORTCODE\u0026gt;.html /themes/\u0026lt;THEME\u0026gt;/layouts/shortcodes/\u0026lt;SHORTCODE\u0026gt;.html 位置参数 vs 命名参数 # ​\t您可以使用以下类型的参数创建简码：\n位置参数 命名参数 位置或命名参数（即\u0026quot;灵活（flexible）\u0026quot;） ​\t在具有位置参数的简码中，参数的顺序很重要。如果简码有一个必需的单一值（例如下面的youtube简码），则位置参数非常有效，并且需要的内容作者输入较少。\n​\t对于具有多个或可选参数的更复杂的布局，命名参数效果最好。虽然不太简洁，但命名参数需要较少的内容作者记忆，并且可以按任意顺序添加到简码声明中。\n​\t允许两种类型的参数（即\u0026quot;灵活（flexible）\u0026ldquo;的简码）对于复杂的布局非常有用，您可以设置默认值，这些默认值可以很容易地被用户覆盖。\n访问参数 # ​\t可以通过 .Get 方法访问所有简码参数。无论是将键（即字符串）还是数字传递给 .Get 方法取决于您是否正在访问命名或位置参数。\n​\t要通过名称访问参数，请使用.Get方法，后跟命名参数作为引用字符串的形式：\n{{ .Get \u0026#34;class\u0026#34; }} ​\t要通过位置访问参数，请使用 .Get，后跟数字位置，要记住位置参数是从零开始编号的：\n{{ .Get 0 }} ​\t对于第二个位置，您只需要使用：\n{{ .Get 1 }} ​\t当输出取决于参数是否设置时，使用with 很棒：\n{{ with .Get \u0026#34;class\u0026#34; }} class=\u0026#34;{{ . }}\u0026#34;{{ end }} ​\t.Get 也可以用于检查是否已提供参数。当条件取决于两个值中的任一个或两个值时，这非常有用：\n{{ if or (.Get \u0026#34;title\u0026#34;) (.Get \u0026#34;alt\u0026#34;) }} alt=\u0026#34;{{ with .Get \u0026#34;alt\u0026#34; }}{{ . }}{{ else }}{{ .Get \u0026#34;title\u0026#34; }}{{ end }}\u0026#34;{{ end }} .Inner # ​\t如果使用了闭合的简码，.Inner 变量将被填充为开放和闭合简码之间的内容。如果需要闭合的简码，则可以检查 .Inner 的长度以指示其存在。\n​\t通过.Inner变量声明内容的简码也可以使用自闭合语法来声明，而无需内容和结束标签：\n\\{\\{\\\u0026lt; innershortcode \\/\\\u0026gt;\\}\\} 任何引用.Inner的简码都必须是闭合的或自闭合的。\n.Params # ​\t简码中的.Params变量包含传递给简码的参数列表，用于更复杂的用例。您也可以使用以下逻辑访问更高级别的参数：\n$.Params\n这些是直接传递到简码声明中的参数（例如，YouTube视频ID）\n$.Page.Params\n引用该页面的参数；在这种情况下， 该\u0026quot;page\u0026quot;指的是声明简码的内容文件（例如，内容的前置元数据中的shortcode_color字段可以通过$.Page.Params.shortcode_color访问）。\n$.Page.Site.Params\n引用您站点配置文件中定义的全局变量。\n.IsNamedParams # ​\t.IsNamedParams 变量检查简码声明是否使用了命名参数，并返回一个布尔值。\n​\t例如，您可以创建一个 image 简码，可以使用命名参数 src 或第一个位置参数，具体取决于内容作者的偏好。假设 image 简码的调用方式如下：\n\\{\\{\\\u0026lt; image src=\u0026#34;images/my-image.jpg\u0026#34; \\\u0026gt;\\}\\} ​\t然后，您可以将以下内容包含在您的简码模板中：\n{{ if .IsNamedParams }} \u0026lt;img src=\u0026#34;{{ .Get \u0026#34;src\u0026#34; }}\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; {{ else }} \u0026lt;img src=\u0026#34;{{ .Get 0 }}\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; {{ end }} ​\t请查看下面的 Vimeo 简码示例 以了解 .IsNamedParams 的用法。\n​\t虽然可以创建接受位置参数和命名参数的简码模板，但是在内容中声明的简码不能混合参数类型。因此，像 \\{\\{\\\u0026lt; image src=\u0026quot;images/my-image.jpg\u0026quot; \u0026quot;This is my alt text\u0026quot; \\\u0026gt;\\}\\} 这样声明的简码将返回一个错误。\n​\t您还可以使用变量.Page访问所有普通页面变量。\n​\t简码也可以嵌套。在嵌套的简码标签中，您可以使用 .Parent 变量 访问父级简码的上下文，这对于从根继承常见的简码参数非常有用。\n检查是否存在 # ​\t您可以通过在该页面模板中调用.HasShortcode，并提供简码的名称来检查页面上是否使用了特定的简码。当您想要在头部中包含仅由该简码使用的特定脚本或样式时，这一功能有时很有用。\n自定义简码示例 # ​\t以下是通过在/layouts/shortcodes中的简码模板文件创建的不同类型的简码示例。\n单词示例：year # ​\t假设您想在不需要不断查看 Markdown 的情况下，在内容文件中保持版权年份的更新。您的目标是可以按照以下方式调用简码：\n\\{\\{\\\u0026lt; year \\\u0026gt;\\}\\} /layouts/shortcodes/year.html\n{{ now.Format \u0026#34;2006\u0026#34; }} 单位置示例：YouTube # ​\t内嵌视频是 Markdown 内容中常见的补充，但很容易变得不美观。以下是 Hugo 的内置 YouTube 简码 使用的代码：\n\\{\\{\\\u0026lt; youtube 09jf3ow9jfw \\\u0026gt;\\}\\} ​\t将会加载 /layouts/shortcodes/youtube.html 中的模板：\n/layouts/shortcodes/youtube.html\n\u0026lt;div class=\u0026#34;embed video-player\u0026#34;\u0026gt; \u0026lt;iframe class=\u0026#34;youtube-player\u0026#34; type=\u0026#34;text/html\u0026#34; width=\u0026#34;640\u0026#34; height=\u0026#34;385\u0026#34; src=\u0026#34;https://www.youtube.com/embed/{{ index .Params 0 }}\u0026#34; allowfullscreen frameborder=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; youtube-embed.html\n\u0026lt;div class=\u0026#34;embed video-player\u0026#34;\u0026gt; \u0026lt;iframe class=\u0026#34;youtube-player\u0026#34; type=\u0026#34;text/html\u0026#34; width=\u0026#34;640\u0026#34; height=\u0026#34;385\u0026#34; src=\u0026#34;https://www.youtube.com/embed/09jf3ow9jfw\u0026#34; allowfullscreen frameborder=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; 单命名示例：image # ​\t假设您想创建自己的 img 简码，而不是使用 Hugo 的内置 figure 简码。您的目标是可以在内容文件中按照以下方式调用简码：\ncontent-image.md\n\\{\\{\\\u0026lt; img src=\u0026#34;/media/spf13.jpg\u0026#34; title=\u0026#34;Steve Francia\u0026#34; \\\u0026gt;\\}\\} ​\t您已经在 /layouts/shortcodes/img.html 中创建了简码，它会加载以下简码模板：\n/layouts/shortcodes/img.html\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026#34;class\u0026#34; }}class=\u0026#34;{{ . }}\u0026#34;{{ end }}\u0026gt; {{ with .Get \u0026#34;link\u0026#34; }}\u0026lt;a href=\u0026#34;{{ . }}\u0026#34;\u0026gt;{{ end }} \u0026lt;img src=\u0026#34;{{ .Get \u0026#34;src\u0026#34; }}\u0026#34; {{ if or (.Get \u0026#34;alt\u0026#34;) (.Get \u0026#34;caption\u0026#34;) }}alt=\u0026#34;{{ with .Get \u0026#34;alt\u0026#34; }}{{ . }}{{ else }}{{ .Get \u0026#34;caption\u0026#34; }}{{ end }}\u0026#34;{{ end }} /\u0026gt; {{ if .Get \u0026#34;link\u0026#34; }}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026#34;title\u0026#34;) (.Get \u0026#34;caption\u0026#34;)) (.Get \u0026#34;attr\u0026#34;) }} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026#34;title\u0026#34; }} \u0026lt;h4\u0026gt;{{ .Get \u0026#34;title\u0026#34; }}\u0026lt;/h4\u0026gt;{{ end }} {{ if or (.Get \u0026#34;caption\u0026#34;) (.Get \u0026#34;attr\u0026#34;) }}\u0026lt;p\u0026gt; {{ .Get \u0026#34;caption\u0026#34; }} {{ with .Get \u0026#34;attrlink\u0026#34; }}\u0026lt;a href=\u0026#34;{{ . }}\u0026#34;\u0026gt; {{ end }} {{ .Get \u0026#34;attr\u0026#34; }} {{ if .Get \u0026#34;attrlink\u0026#34; }}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt; ​\t将被渲染为：\nimg-output.html\n\u0026lt;figure\u0026gt; \u0026lt;img src=\u0026#34;/media/spf13.jpg\u0026#34; /\u0026gt; \u0026lt;figcaption\u0026gt; \u0026lt;h4\u0026gt;Steve Francia\u0026lt;/h4\u0026gt; \u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; 单灵活示例：vimeo # \\{\\{\\\u0026lt; vimeo 49718712 \\\u0026gt;\\}\\} \\{\\{\\\u0026lt; vimeo id=\u0026#34;49718712\u0026#34; class=\u0026#34;flex-video\u0026#34; \\\u0026gt;\\}\\} ​\t将会加载 /layouts/shortcodes/vimeo.html 中的模板：\n/layouts/shortcodes/vimeo.html\n{{ if .IsNamedParams }} \u0026lt;div class=\u0026#34;{{ if .Get \u0026#34;class\u0026#34; }}{{ .Get \u0026#34;class\u0026#34; }}{{ else }}vimeo-container{{ end }}\u0026#34;\u0026gt; \u0026lt;iframe src=\u0026#34;https://player.vimeo.com/video/{{ .Get \u0026#34;id\u0026#34; }}\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; {{ else }} \u0026lt;div class=\u0026#34;{{ if len .Params | eq 2 }}{{ .Get 1 }}{{ else }}vimeo-container{{ end }}\u0026#34;\u0026gt; \u0026lt;iframe src=\u0026#34;https://player.vimeo.com/video/{{ .Get 0 }}\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; {{ end }} ​\t将被渲染为：\nvimeo-iframes.html\n\u0026lt;div class=\u0026#34;vimeo-container\u0026#34;\u0026gt; \u0026lt;iframe src=\u0026#34;https://player.vimeo.com/video/49718712\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-video\u0026#34;\u0026gt; \u0026lt;iframe src=\u0026#34;https://player.vimeo.com/video/49718712\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; 成对示例：highlight # ​\t以下内容取自 highlight，它是 Hugo 内置简码 之一。\nhighlight-example.md\n\\{\\{\\\u0026lt; highlight html \\\u0026gt;\\}\\} \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; This HTML \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \\{\\{\\\u0026lt; /highlight \\\u0026gt;\\}\\} ​\thighlight 简码的模板使用以下代码，它已经包含在 Hugo 中：\n{{ .Get 0 | highlight .Inner }} ​\tHTML 示例代码块的渲染输出如下：\nsyntax-highlighted.html\n\u0026lt;div class=\u0026#34;highlight\u0026#34; style=\u0026#34;background: #272822\u0026#34;\u0026gt;\u0026lt;pre style=\u0026#34;line-height: 125%\u0026#34;\u0026gt;\u0026lt;span style=\u0026#34;color: #f92672\u0026#34;\u0026gt;\u0026amp;lt;html\u0026amp;gt;\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;color: #f92672\u0026#34;\u0026gt;\u0026amp;lt;body\u0026amp;gt;\u0026lt;/span\u0026gt; This HTML \u0026lt;span style=\u0026#34;color: #f92672\u0026#34;\u0026gt;\u0026amp;lt;/body\u0026amp;gt;\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;color: #f92672\u0026#34;\u0026gt;\u0026amp;lt;/html\u0026amp;gt;\u0026lt;/span\u0026gt; \u0026lt;/pre\u0026gt;\u0026lt;/div\u0026gt; 嵌套的简码：图像库 # ​\tHugo的.Parent 简码变量在父简码的上下文中被调用时提供了对父简码上下文的访问，这为常见的简码参数提供了继承模型。\n​\t下面的示例是人为的，但演示了该概念。假设您有一个 gallery 简码，它期望一个名为 class 的参数：\nlayouts/shortcodes/gallery.html\n\u0026lt;div class=\u0026#34;{{ .Get \u0026#34;class\u0026#34; }}\u0026#34;\u0026gt; {{ .Inner }} \u0026lt;/div\u0026gt; ​\t您还有一个 img 简码，只有一个名为 src 的参数，您想在 gallery 和其他简码中调用它，以使父级定义每个 img 的上下文：\nlayouts/shortcodes/img.html\n{{- $src := .Get \u0026#34;src\u0026#34; -}} {{- with .Parent -}} \u0026lt;img src=\u0026#34;{{ $src }}\u0026#34; class=\u0026#34;{{ .Get \u0026#34;class\u0026#34; }}-image\u0026#34;\u0026gt; {{- else -}} \u0026lt;img src=\u0026#34;{{ $src }}\u0026#34;\u0026gt; {{- end -}} ​\t然后您可以在内容中按以下方式调用您的简码：\n\\{\\{\\\u0026lt; gallery class=\u0026#34;content-gallery\u0026#34; \\\u0026gt;\\}\\} \\{\\{\\\u0026lt; img src=\u0026#34;/images/one.jpg\u0026#34; \\\u0026gt;\\}\\} \\{\\{\\\u0026lt; img src=\u0026#34;/images/two.jpg\u0026#34; \\\u0026gt;\\}\\} \\{\\{\\\u0026lt; /gallery \\\u0026gt;\\}\\} \\{\\{\\\u0026lt; img src=\u0026#34;/images/three.jpg\u0026#34; \\\u0026gt;\\}\\} ​\t这将输出以下 HTML。请注意，前两个 img 简码继承了通过调用父级 gallery 设置的 class 值为 content-gallery，而第三个 img 只使用了 src：\n\u0026lt;div class=\u0026#34;content-gallery\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/one.jpg\u0026#34; class=\u0026#34;content-gallery-image\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/two.jpg\u0026#34; class=\u0026#34;content-gallery-image\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;img src=\u0026#34;/images/three.jpg\u0026#34;\u0026gt; 简码中的错误处理 # ​\t使用 errorf 模板函数和 .Position 变量可获得简码中有用的错误消息：\n{{ with .Get \u0026#34;name\u0026#34; }} {{ else }} {{ errorf \u0026#34;missing value for param \u0026#39;name\u0026#39;: %s\u0026#34; .Position }} {{ end }} ​\t当上述失败时，您会看到类似下面的 ERROR 日志：\nERROR 2018/11/07 10:05:55 missing value for param name: \u0026#34;/Users/bep/dev/go/gohugoio/hugo/docs/content/en/variables/shortcodes.md:32:1\u0026#34; 更多简码示例 # ​\t更多简码示例可以在 spf13.com 的简码目录 和 Hugo 文档的简码目录 中找到。\n内联简码 # ​\t您也可以内联实现您的简码——例如，在您使用它们的内容文件中。这对于您只需要在一个地方使用脚本非常有用。\n​\t这个功能默认是禁用的，但可以在您的站点配置中启用：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml enableInlineShortcodes: true ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml enableInlineShortcodes = true ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;enableInlineShortcodes\u0026quot;: true } ``` ​\t它出于安全原因默认禁用。Hugo 模板处理使用的安全模型假定模板作者是可信的，但内容文件不是，因此模板是安全的，可以避免因输入数据格式不正确而出现注入问题。但在大多数情况下，您也可以完全控制内容，那么 enableInlineShortcodes = true 将被认为是安全的。但要注意：它允许从内容文件中执行 ad-hoc Go 文本模板。\n​\t启用后，您可以在内容文件中执行以下操作：\n\\{\\{\\\u0026lt; time.inline \\\u0026gt;\\}\\}{{ now }}\\{\\{\\\u0026lt; /time.inline \\\u0026gt;\\}\\} ​\t上述代码将打印当前日期和时间。\n请注意，内联简码的内部内容将被解析并作为一个具有与常规简码模板相同上下文的 Go 文本模板执行。\n​\t这意味着可以通过.Page.Title等方式访问当前页面。这也意味着没有\u0026quot;嵌套内联简码\u0026quot;的概念。\n​\t同一个内联简码可以在同一个内容文件中多次重复使用，如果需要不同的参数，则使用自闭合语法：\n\\{\\{\\\u0026lt; time.inline /\\\u0026gt;\\}\\} 另请参阅 # 简码 .Get Hugo的查找顺序 RSS模板 章节页面模板 "},{"id":155,"href":"/hugo/contentmanagement/summaries/","title":"内容摘要","section":"内容管理","content":" Content Summaries - 内容摘要 # https://gohugo.io/content-management/summaries/\n​\tHugo 可以生成内容的摘要。\n​\t通过使用.Summary页面变量，Hugo会生成内容摘要以在摘要视图中用作简短版本。\n摘要拆分选项 # 自动摘要拆分 手动摘要拆分 前置元数据摘要 ​\t在摘要中附带指向原始内容的链接是很自然的，常见的设计模式是以\u0026quot;Read More …\u0026ldquo;按钮的形式渲染。参见 .RelPermalink、.Permalink 和 .Truncated 页面变量。\n自动摘要拆分 # ​\t默认情况下，Hugo 会自动将内容的前 70 个字作为摘要，并将其存储在 .Summary 页面变量中供模板使用。您可以通过在站点配置中设置 summaryLength 来自定义摘要长度。\n​\t您可以使用 plainify 和 safeHTML 等函数自定义摘要中加载的 HTML 标记的方式。\n​\tHugo 定义的摘要使用的是通过将文本按一个或多个连续空格字符拆分计算的字数。如果您使用 CJK 语言创建内容，并希望使用 Hugo 的自动摘要拆分，请在站点配置中将 hasCJKLanguage 设置为 true。\n手动摘要拆分 # ​\t或者，您可以在想要拆分文章的地方添加 `\n` 摘要分隔符。\n​\t对于 Org 模式内容，请在想要拆分文章的地方使用 # more。\n​\t摘要分隔符之前的内容将用作该内容的摘要，并以完整的 HTML 格式存储在 .Summary 页面变量中。\n​\t摘要分隔符的概念不仅仅适用于 Hugo。在其他文献中，它也被称为\u0026quot;more tag\u0026quot;或\u0026quot;excerpt separator\u0026rdquo;。\nPros（优点）\n自由、精度和提高渲染质量。所有 HTML 标记和格式都会被保留。\nCons（缺点）\n需要内容作者额外的工作，因为他们需要记得在每个内容文件中输入 \u0026lt;!--more--\u0026gt;（或 org 内容为 # more）。可以通过在原型的前置元数据下方添加摘要分隔符来自动化这一过程。\n​\t请确保精确输入 \u0026lt;!--more--\u0026gt;；即全部小写且没有空格。\n前置元数据摘要 # ​\t您可能希望文章摘要不是从文章开头开始的文本。在这种情况下，您可以在文章前置元数据的summary变量中提供一个单独的摘要。\nPros（优点）\n完全自由的文本，与文章内容无关。可以在摘要中使用标记。\nCons（缺点）\n对于内容作者来说，需要编写一个完全独立的文本作为文章的摘要，这会增加额外的工作量。\n摘要选择顺序 # ​\t因为有多种方法可以指定摘要，了解 Hugo 在决定返回 .Summary 的文本时遵循的选择顺序是有用的。它如下所示：\n如果文章中存在 \u0026lt;!--more--\u0026gt; 摘要分隔符，则提供分隔符之前的文本，按照手动摘要拆分方法。 如果文章前置元数据中有一个summary变量，则按照前置元数据摘要方法提供变量的值。 按照自动摘要拆分方法，提供文章开头的文本。 ​\tHugo 使用上述步骤中返回的第一个文本。因此，例如，如果您的文章在其前言中具有summary变量和一个 \u0026lt;!--more--\u0026gt; 摘要分隔符，Hugo 将使用手动摘要拆分方法。\n示例：前 10 篇带摘要的文章 # ​\t您可以使用以下代码显示内容摘要。例如，您可以在一个章节模板中使用以下代码片段。\npage-list-with-summaries.html\n{{ range first 10 .Pages }} \u0026lt;article\u0026gt; \u0026lt;!-- this \u0026lt;div\u0026gt; includes the title summary --\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ .Summary }} \u0026lt;/div\u0026gt; {{ if .Truncated }} \u0026lt;!-- This \u0026lt;div\u0026gt; includes a read more link, but only if the summary is truncated... --\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;Read More…\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/article\u0026gt; {{ end }} 注意，当内容未被截断时，即摘要包含整篇文章时，.Truncated 布尔变量值可以用于隐藏\u0026quot;Read More…\u0026ldquo;链接。\n"},{"id":156,"href":"/hugo/functions/absurl/","title":"absURL","section":"函数","content":"将以下英文翻译为中文：\nabsURL # https://gohugo.io/functions/absurl/\nReturns an absolute URL.\n语法 # absURL INPUT With multilingual configurations, use the absLangURL function instead. The URL returned by this function depends on:\nWhether the input begins with a slash The baseURL in site configuration Input does not begin with a slash # If the input does not begin with a slash, the resulting URL will be correct regardless of the baseURL.\nWith baseURL = https://example.org/\n{{ absURL \u0026#34;\u0026#34; }} → https://example.org/ {{ absURL \u0026#34;articles\u0026#34; }} → https://example.org/articles {{ absURL \u0026#34;style.css\u0026#34; }} → https://example.org/style.css With baseURL = https://example.org/docs/\n{{ absURL \u0026#34;\u0026#34; }} → https://example.org/docs/ {{ absURL \u0026#34;articles\u0026#34; }} → https://example.org/docs/articles {{ absURL \u0026#34;style.css\u0026#34; }} → https://example.org/docs/style.css Input begins with a slash # If the input begins with a slash, the resulting URL will be incorrect when the baseURL includes a subdirectory. With a leading slash, the function returns a URL relative to the protocol+host section of the baseURL.\nWith baseURL = https://example.org/\n{{ absURL \u0026#34;/\u0026#34; }} → https://example.org/ {{ absURL \u0026#34;/articles\u0026#34; }} → https://example.org/articles {{ absURL \u0026#34;/style.css\u0026#34; }} → https://example.org/style.css With baseURL = https://example.org/docs/\n{{ absURL \u0026#34;/\u0026#34; }} → https://example.org/ {{ absURL \u0026#34;/articles\u0026#34; }} → https://example.org/articles {{ absURL \u0026#34;/style.css\u0026#34; }} → https://example.org/style.css The last three examples are not desirable in most situations. As a best practice, never include a leading slash when using this function.\n另请参阅 # absLangURL relLangURL relURL Links and Cross References URL Management "},{"id":157,"href":"/hugo/templ/localfiletemplates/","title":"本地文件模板","section":"模板","content":" Local File Templates - 本地文件模板 # https://gohugo.io/templates/files/\n​\tHugo 的 readDir 和 readFile 函数使得遍历项目目录结构和将文件内容写入模板变得容易。\n遍历本地文件 # ​\t使用 Hugo 的 readDir 和 readFile 模板函数，您可以遍历服务器上站点的文件。\n使用 readDir # ​\treadDir 函数 返回一个由 os.FileInfo 组成的数组。它以文件的 path 作为单个字符串参数。这个路径可以指向您站点上的任何目录（即服务器文件系统中的目录）。\n​\t路径是绝对还是相对并不重要，因为对于 readDir 函数，您站点的根目录（通常是 ./public/）实际上同时扮演两个角色：\n文件系统根目录 当前工作目录 使用 readFile # ​\treadfile 函数 从磁盘读取文件并将其转换为字符串，以便由其他 Hugo 函数操纵或按原样添加。readFile 将文件（包括路径）作为传递给该函数的参数。\n​\t在模板中使用 readFile 函数时，请确保路径相对于Hugo 项目根目录：\n{{ readFile \u0026#34;/content/templates/local-file-templates\u0026#34; }} readFile 示例：将项目文件添加到内容 # ​\t由于 readFile 是一个函数，因此它仅在模板中可用，而不在内容中可用。然而，我们可以创建一个简单的 简码模板，来调用 readFile，将第一个参数通过该函数传递，然后允许一个可选的第二个参数将文件通过 Markdown 处理器。将这个 简码添加到内容中的模式如下：\n\\{\\{\\\u0026lt; readfile file=\u0026#34;/path/to/local/file.txt\u0026#34; markdown=\u0026#34;true\u0026#34; \\\u0026gt;\\}\\} ​\t如果要使用 readFile 为主题创建自定义简码，请注意，简码的使用将参考项目根目录，而不是您的 themes 目录。\n另请参阅 # 配置模块 目录结构 文件变量 静态文件 主题组件 "},{"id":158,"href":"/hugo/contentmanagement/linksandcrossreferences/","title":"链接和交叉引用","section":"内容管理","content":" Links and Cross References - 链接和交叉引用 # https://gohugo.io/content-management/cross-references/\n​\t用于创建指向文档的简码链接。\n​\tref和relref简码分别显示文档的绝对和相对永久链接。\n使用ref和relref # ​\tref和relref简码需要一个参数：指向内容文档的路径，带有或不带有文件扩展名，带有或不带有锚点。没有前导 / 的路径首先相对于当前页面解析，然后相对于站点的其余部分解析。\n. └── content ├── about | ├── _index.md | └── credits.md ├── pages | ├── document1.md | └── document2.md // has anchor #anchor ├── products | └── index.md └── blog └── my-post.md ​\t这些页面可以按以下方式被引用：\n\\{\\{\\\u0026lt; ref \u0026#34;document2\u0026#34; \\\u0026gt;\\}\\} // \u0026lt;- From pages/document1.md, relative path \\{\\{\\\u0026lt; ref \u0026#34;document2#anchor\u0026#34; \\\u0026gt;\\}\\} \\{\\{\\\u0026lt; ref \u0026#34;document2.md\u0026#34; \\\u0026gt;\\}\\} \\{\\{\\\u0026lt; ref \u0026#34;document2.md#anchor\u0026#34; \\\u0026gt;\\}\\} \\{\\{\\\u0026lt; ref \u0026#34;#anchor\u0026#34; \\\u0026gt;\\}\\} // \u0026lt;- From pages/document2.md \\{\\{\\\u0026lt; ref \u0026#34;/blog/my-post\u0026#34; \\\u0026gt;\\}\\} // \u0026lt;- From anywhere, absolute path \\{\\{\\\u0026lt; ref \u0026#34;/blog/my-post.md\u0026#34; \\\u0026gt;\\}\\} \\{\\{\\\u0026lt; relref \u0026#34;document\u0026#34; \\\u0026gt;\\}\\} \\{\\{\\\u0026lt; relref \u0026#34;document.md\u0026#34; \\\u0026gt;\\}\\} \\{\\{\\\u0026lt; relref \u0026#34;#anchor\u0026#34; \\\u0026gt;\\}\\} \\{\\{\\\u0026lt; relref \u0026#34;/blog/my-post.md\u0026#34; \\\u0026gt;\\}\\} ​\tindex.md可以被其路径或其不带结尾 / 的所在文件夹引用。_index.md只被其所在文件夹引用：\n\\{\\{\\\u0026lt; ref \u0026#34;/about\u0026#34; \\\u0026gt;\\}\\} // \u0026lt;- References /about/_index.md \\{\\{\\\u0026lt; ref \u0026#34;/about/_index\u0026#34; \\\u0026gt;\\}\\} // Raises REF_NOT_FOUND error \\{\\{\\\u0026lt; ref \u0026#34;/about/credits.md\u0026#34; \\\u0026gt;\\}\\} // \u0026lt;- References /about/credits.md \\{\\{\\\u0026lt; ref \u0026#34;/products\u0026#34; \\\u0026gt;\\}\\} // \u0026lt;- References /products/index.md \\{\\{\\\u0026lt; ref \u0026#34;/products/index\u0026#34; \\\u0026gt;\\}\\} // \u0026lt;- References /products/index.md ​\t在Markdown中使用ref或relref生成超链接：\n[About](\\{\\{\\\u0026lt; ref \u0026#34;/about\u0026#34; \\\u0026gt;\\}\\} \u0026#34;About Us\u0026#34;) ​\t如果文档无法被唯一解析，Hugo将发出错误或警告。错误行为可配置，请参阅下文。\n链接到另一种语言版本 # ​\t要链接到文档的另一种语言版本，请使用以下语法：\n\\{\\{\\\u0026lt; relref path=\u0026#34;document.md\u0026#34; lang=\u0026#34;ja\u0026#34; \\\u0026gt;\\}\\} 获取另一种输出格式 # ​\t要链接到文档的另一种输出格式，请使用以下语法：\n\\{\\{\\\u0026lt; relref path=\u0026#34;document.md\u0026#34; outputFormat=\u0026#34;rss\u0026#34; \\\u0026gt;\\}\\} 标题ID # ​\t使用Markdown文档类型时，Hugo为页面上的每个标题生成元素ID。例如：\n## Reference 生成以下HTML：\n\u0026lt;h2 id=\u0026#34;reference\u0026#34;\u0026gt;Reference\u0026lt;/h2\u0026gt; ​\t在使用ref或relref简码时，通过将ID附加到路径来获取标题的永久链接：\n\\{\\{\\\u0026lt; ref \u0026#34;document.md#reference\u0026#34; \\\u0026gt;\\}\\} \\{\\{\\\u0026lt; relref \u0026#34;document.md#reference\u0026#34; \\\u0026gt;\\}\\} ​\t通过包含属性来生成自定义标题ID。例如：\n## Reference A {#foo} ## Reference B {id=\u0026#34;bar\u0026#34;} 生成以下HTML：\n\u0026lt;h2 id=\u0026#34;foo\u0026#34;\u0026gt;Reference A\u0026lt;/h2\u0026gt; \u0026lt;h2 id=\u0026#34;bar\u0026#34;\u0026gt;Reference B\u0026lt;/h2\u0026gt; ​\t如果同一标题在页面上出现多次，Hugo将生成唯一的元素ID。例如：\n## Reference ## Reference ## Reference 生成以下HTML：\n\u0026lt;h2 id=\u0026#34;reference\u0026#34;\u0026gt;Reference\u0026lt;/h2\u0026gt; \u0026lt;h2 id=\u0026#34;reference-1\u0026#34;\u0026gt;Reference\u0026lt;/h2\u0026gt; \u0026lt;h2 id=\u0026#34;reference-2\u0026#34;\u0026gt;Reference\u0026lt;/h2\u0026gt; Ref 和 RelRef 配置 # ​\t自 Hugo 0.45 开始，该行为可以在 config.toml 中进行配置：\nrefLinksErrorLevel (\u0026ldquo;ERROR\u0026rdquo;)\n使用ref或relref解析页面链接时，如果链接无法解析，将使用此日志级别记录。有效值为ERROR（默认）或WARNING。任何ERROR都将导致构建失败（exit -1）。\nrefLinksNotFoundURL\n在 ref 或 relref 中找不到页面引用时使用的 URL 占位符。则原样使用。\n另请参阅 # ref relref URL 管理 absLangURL absURL "},{"id":159,"href":"/hugo/functions/after/","title":"after","section":"函数","content":"将以下英文翻译为中文：\nafter # https://gohugo.io/functions/after/\nafter slices an array to only the items after the Nth item.\n语法 # after INDEX COLLECTION The following shows after being used in conjunction with the slice function:\n{{ $data := slice \u0026#34;one\u0026#34; \u0026#34;two\u0026#34; \u0026#34;three\u0026#34; \u0026#34;four\u0026#34; }} {{ range after 2 $data }} {{ . }} {{ end }} → [\u0026#34;three\u0026#34;, \u0026#34;four\u0026#34;] Example of after with first: 2nd–4th Most Recent Articles # You can use after in combination with the first function and Hugo’s powerful sorting methods. Let’s assume you have a list page at example.com/articles. You have 10 articles, but you want your templating for the list/section page to show only two rows:\nThe top row is titled \u0026ldquo;Featured\u0026rdquo; and shows only the most recently published article (i.e. by publishdate in the content files’ front matter). The second row is titled \u0026ldquo;Recent Articles\u0026rdquo; and shows only the 2nd- to 4th-most recently published articles. layouts/section/articles.html\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;section class=\u0026#34;row featured-article\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Featured Article\u0026lt;/h2\u0026gt; {{ range first 1 .Pages.ByPublishDate.Reverse }} \u0026lt;header\u0026gt; \u0026lt;h3\u0026gt;\u0026lt;a href=\u0026#34;{{ . Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;p\u0026gt;{{ .Description }}\u0026lt;/p\u0026gt; {{ end }} \u0026lt;/section\u0026gt; \u0026lt;div class=\u0026#34;row recent-articles\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Recent Articles\u0026lt;/h2\u0026gt; {{ range first 3 (after 1 .Pages.ByPublishDate.Reverse) }} \u0026lt;section class=\u0026#34;recent-article\u0026#34;\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h3\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;p\u0026gt;{{ .Description }}\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{ end }} 另请参阅 # .Scratch delimit first range "},{"id":160,"href":"/hugo/contentmanagement/urlmanagement/","title":"URL管理","section":"内容管理","content":" URL Management - URL管理 # https://gohugo.io/content-management/urls/\n​\t通过前置元数据输入和站点配置中的设置来控制URL的结构和外观。\n概述 # ​\t默认情况下，当Hugo渲染页面时，生成的URL与content目录中的文件路径匹配。例如：\ncontent/posts/post-1.md → https://example.org/posts/post-1/ ​\t您可以通过前置元数据值和站点配置选项来更改URL的结构和外观。\n前置元数据 # slug # Set the slug in 前置元数据 to override the last segment of the path. The slug value does not affect section pages.\n​\t在前置元数据中设置slug以覆盖路径的最后一段。slug值不影响部分页面。\ncontent/posts/post-1.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- slug: my-first-post title: My First Post --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ slug = 'my-first-post' title = 'My First Post' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;slug\u0026quot;: \u0026quot;my-first-post\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;My First Post\u0026quot; } ``` ​\t结果的URL将是：\nhttps://example.org/posts/my-first-post/ url # ​\t在前置元数据中设置url以覆盖整个路径。将其用于常规页面或section页面。\n​\t具有以下前置元数据的：\ncontent/posts/post-1.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- title: My First Article url: /articles/my-first-article --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ title = 'My First Article' url = '/articles/my-first-article' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;title\u0026quot;: \u0026quot;My First Article\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;/articles/my-first-article\u0026quot; } ``` ​\t结果的URL将是：\nhttps://example.org/articles/my-first-article/ ​\t如果包括文件扩展名：\ncontent/posts/post-1.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- title: My First Article url: /articles/my-first-article.html --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ title = 'My First Article' url = '/articles/my-first-article.html' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;title\u0026quot;: \u0026quot;My First Article\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;/articles/my-first-article.html\u0026quot; } ``` 结果的URL将是：\nhttps://example.org/articles/my-first-article.html ​\t在单语站点中，带有或不带有前导斜杠的url值相对于baseURL。\n​\t在多语言站点中：\n带有前导斜杠的url值相对于baseURL。 没有前导斜杠的url值相对于baseURL加上语言前缀。 Site type 前置元数据 url Resulting URL monolingual /about https://example.org/about/ monolingual about https://example.org/about/ multilingual /about https://example.org/about/ multilingual about https://example.org/de/about/ ​\t如果在前置元数据中同时设置slug和url，则url值优先。\n站点配置 # Permalinks 永久链接 # ​\t在站点配置中，为顶层section内的常规页面设置URL模式。这是递归的，影响后代常规页面。\n​\t在站点配置中定义的permalinks不适用于section页面。要调整section页面的URL，请在前置元数据中设置url。\n例子 # ​\t使用此内容结构：\ncontent/ ├── posts/ │ ├── _index.md │ ├── post-1.md │ └── post-2.md └── _index.md ​\t为posts section内的普通页面创建一个基于日期的递归层次结构：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml posts: /posts/:year/:month/:title/ ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml posts = '/posts/:year/:month/:title/' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;posts\u0026quot;: \u0026quot;/posts/:year/:month/:title/\u0026quot; } ``` ​\t发布站点的结构将是：\npublic/ ├── posts/ │ ├── 2023/ │ │ └── 03/ │ │ ├── post-1/ │ │ │ └── index.html │ │ └── post-2/ │ │ └── index.html │ └── index.html ├── favicon.ico └── index.html ​\t要为内容根目录中的常规页面创建基于日期的层次结构：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml /: /:year/:month/:title/ ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml '/' = '/:year/:month/:title/' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;/\u0026quot;: \u0026quot;/:year/:month/:title/\u0026quot; } ``` ​\t为内容根目录定义的URL模式不适用于递归。\n​\t使用相同的方法处理分类（taxonomies）。例如，要省略URL的分类段（taxonomy segment）：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml tags: /:title/ ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml tags = '/:title/' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;tags\u0026quot;: \u0026quot;/:title/\u0026quot; } ``` ​\t前置元数据url值优先于permalinks中定义的URL模式。\nTokens # ​\t在定义URL模式时使用这些标记。前置元数据中的date字段确定与时间相关的标记的值。\n:year\n4位数字的年份\n:month\n2位数字的月份\n:monthname\n月份的名称\n:day\n2位数字的日期\n:weekday\n一周中的1位数字日期（星期日=0）\n:weekdayname\n一周中日期的名称\n:yearday\n1到3位数字的一年中的日期\n:section\n内容的section\n:sections\n内容的section层次结构。您可以使用切片语法选择section：:sections[1:] 包括除第一个部分以外的所有部分，:sections[:last] 包括除最后一个部分以外的所有部分，:sections[last] 仅包括最后一个部分，:sections[1:2] 包括第2个和第3个section (这里应该是由问题的：按照go的语法这里应该只包括第1个section才对吧)。请注意，这种切片访问不会抛出任何越界错误，因此您不必非常精确。\n:title\n内容的标题\n:slug\n内容的 slug（如果在前置元数据中未提供 slug，则使用title）\n:slugorfilename\n内容的 slug（如果在前置元数据中未提供 slug，则使用文件名）\n:filename\n内容的文件名（不包括扩展名）\n​\t对于与时间有关的值，您还可以使用 Go 的 time 包中定义的布局字符串组件。例如：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml permalinks: posts: /:06/:1/:2/:title/ ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [permalinks] posts = '/:06/:1/:2/:title/' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;permalinks\u0026quot;: { \u0026quot;posts\u0026quot;: \u0026quot;/:06/:1/:2/:title/\u0026quot; } } ``` 外观 # ​\tURL 的外观可以是丑陋的或漂亮的。\nType Path URL ugly content/about.md https://example.org/about.html pretty content/about.md https://example.org/about/ ​\t默认情况下，Hugo 生成漂亮的 URL。要生成丑陋的 URL，请更改您的站点配置：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml uglyURLs: true ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml uglyURLs = true ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;uglyURLs\u0026quot;: true } ``` Post-processing # ​\tHugo 提供了两个相互排斥的配置选项，用于在渲染页面后更改 URL。\nCanonical URLs （ 规范化 URL ） # ​\t这是一个传统的配置选项，被模板函数和 markdown 渲染钩子取代，很可能会在未来的版本中被删除。\n​\t如果启用，Hugo 在渲染页面后执行搜索和替换。它搜索与 action、href、src、srcset 和 url 属性相关联的站点相对 URL（具有前导斜杠）。然后，它添加 baseURL 来创建绝对 URL。\n\u0026lt;a href=\u0026#34;/about\u0026#34;\u0026gt; → \u0026lt;a href=\u0026#34;https://example.org/about/\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/a.gif\u0026#34;\u0026gt; → \u0026lt;img src=\u0026#34;https://example.org/a.gif\u0026#34;\u0026gt; ​\t这是一种不完美、蛮力的方法，会影响内容以及HTML属性。正如上面提到的，这是一个旧的配置选项，可能会在未来的版本中被删除。\n启用方法如下：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml canonifyURLs: true ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml canonifyURLs = true ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;canonifyURLs\u0026quot;: true } ``` Relative URLs # ​\t除非您创建的是可通过文件系统导航的无服务器站点，否则不要启用此选项。\n​\t如果启用此选项，Hugo将在渲染页面后执行搜索和替换。它将搜索与action、href、src、srcset和url属性相关的站点相对URL（带有前导斜杠）。然后将URL转换为相对于当前页面的URL。\n​\t例如，在渲染content/posts/post-1时：\n\u0026lt;a href=\u0026#34;/about\u0026#34;\u0026gt; → \u0026lt;a href=\u0026#34;../../about\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/a.gif\u0026#34;\u0026gt; → \u0026lt;img src=\u0026#34;../../a.gif\u0026#34;\u0026gt; ​\t这是一种不完美、蛮力的方法，会影响内容以及HTML属性。正如上面提到的，除非您创建的是可通过文件系统导航的无服务器站点，否则不要启用此选项。\n启用方法如下：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml relativeURLs: true ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml relativeURLs = true ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;relativeURLs\u0026quot;: true } ``` 别名 # ​\t使用别名从旧URL重定向到新URL：\n带有前导斜杠的别名相对于baseURL 没有前导斜杠的别名相对于当前目录 示例 # ​\t更改现有页面的文件名，并创建从先前URL到新URL的别名：\ncontent/posts/new-file-name.md.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml aliases: - /posts/previous-file-name ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml aliases = ['/posts/previous-file-name'] ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;aliases\u0026quot;: [ \u0026quot;/posts/previous-file-name\u0026quot; ] } ``` Each of these directory-relative aliases is equivalent to the site-relative alias above:\n​\t这些目录相对别名与上面的站点相对别名等效：\nprevious-file-name\n./previous-file-name\n../posts/previous-file-name\n​\t您可以为当前页面创建多个别名：\ncontent/posts/new-file-name.md.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml aliases: - previous-file-name - original-file-name ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml aliases = ['previous-file-name', 'original-file-name'] ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;aliases\u0026quot;: [ \u0026quot;previous-file-name\u0026quot;, \u0026quot;original-file-name\u0026quot; ] } ``` ​\t在多语言站点中，可以使用目录相对别名，或者使用站点相对别名包含语言前缀：\ncontent/posts/new-file-name.de.md.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml aliases: - /de/posts/previous-file-name ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml aliases = ['/de/posts/previous-file-name'] ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;aliases\u0026quot;: [ \u0026quot;/de/posts/previous-file-name\u0026quot; ] } ``` 别名的工作原理 # ​\t使用上面的第一个示例，Hugo 生成了以下站点结构：\npublic/ ├── posts/ │ ├── new-file-name/ │ │ └── index.html │ ├── previous-file-name/ │ │ └── index.html │ └── index.html └── index.html ​\t从旧的 URL 到新 URL 的别名是客户端重定向：\nposts/previous-file-name/index.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en-us\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;https://example.org/posts/new-file-name/\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;canonical\u0026#34; href=\u0026#34;https://example.org/posts/new-file-name/\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;robots\u0026#34; content=\u0026#34;noindex\u0026#34;\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;refresh\u0026#34; content=\u0026#34;0; url=https://example.org/posts/new-file-name/\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;/html\u0026gt; Collectively, the elements in the head section:\n​\thead 部分的元素总结如下：\n告诉搜索引擎新的 URL 是规范的（canonical） 告诉搜索引擎不要索引旧的 URL 告诉浏览器重定向到新的 URL ​\tHugo 在渲染页面之前渲染别名文件。带有先前文件名的新页面将覆盖别名，这是预期的。\n自定义 # ​\t创建一个新的模板（layouts/alias.html）来自定义别名文件的内容。该模板接收以下上下文：\nPermalink\n被别名的页面链接\nPage\n被别名的页面的 Page 数据\n另请参阅 # 内容组织 配置 Hugo 链接和交叉引用 菜单模板 菜单 "},{"id":161,"href":"/hugo/templ/404page/","title":"自定义404页面","section":"模板","content":" Custom 404 Page - 自定义404页面 # https://gohugo.io/templates/404/\n​\t如果您知道如何创建单页模板，那么您可以无限制地创建自定义404页面。\n​\t当使用 Hugo 与 GitHub Pages 时，可以通过在 layouts 文件夹的根目录中创建 404.html 模板文件来提供 自定义的404 错误页面。当 Hugo 生成您的站点时，404.html 文件将被放置在根目录中。\n​\t404 页面将拥有可用于模板的所有常规页面变量。\n​\t除了标准页面变量外，404 页面还可以从 .Pages 访问所有站点内容。\n▾ layouts/ 404.html 404.html # ​\t这是一个基本的404.html模板示例：\n​\t以下是一个基本的 404.html 模板示例：\nlayouts/404.html\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;main id=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1 id=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;{{ \u0026#34;\u0026#34; | relURL }}\u0026#34;\u0026gt;Go Home\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; {{ end }} 自动加载 # ​\t您的 404.html 文件可以在访问者输入错误的 URL 路径时自动加载，具体取决于您正在使用的 Web 服务器环境。例如：\nGitHub Pages 和 GitLab Pages。404 页面是自动的。 Apache。您可以在站点根目录的 .htaccess 文件中指定 ErrorDocument 404 /404.html。 Nginx。您可以在 nginx.conf 文件中指定 error_page 404 /404.html;。详情在此。 Amazon AWS S3。在为静态 Web 服务设置存储桶时，您可以从 S3 GUI 中指定错误文件。 Amazon CloudFront。您可以在 CloudFront 控制台的错误页面章节指定页面。详情在此。 Caddy Server。使用 handle_errors 指令为一个或多个状态码指定错误页面。详情在此。 Netlify。在 content/_redirects 中添加 /* /404.html 404。详情在此 Azure Static Web App。在配置文件 staticwebapp.config.json 中设置 responseOverrides.404.rewrite 和 responseOverrides.404.statusCode。详情在此 Azure Storage 作为静态站点托管。您可以在 Azure 门户的静态站点配置页中指定Error document path。详情在此。 DigitalOcean App 平台。您可以在应用程序规范文件中指定 error_document 或使用控制面板设置错误文档。详情在此。 Firebase Hosting：/404.html 自动用作404页面。 ​\thugo server 不会自动加载您的自定义 404.html 文件，但是您可以通过将浏览器导航到/404.html来测试您的自定义\u0026quot;not found\u0026quot;页面的外观。\n"},{"id":162,"href":"/hugo/functions/anchorize/","title":"anchorize","section":"函数","content":"将以下英文翻译为中文：\nanchorize # https://gohugo.io/functions/anchorize/\nTakes a string and sanitizes it the same way as the defaultMarkdownHandler does for markdown headers.\n语法 # anchorize INPUT If Goldmark is set as defaultMarkdownHandler, the sanitizing logic adheres to the setting markup.goldmark.parser.autoHeadingIDType.\nSince the defaultMarkdownHandler and this template function use the same sanitizing logic, you can use the latter to determine the ID of a header for linking with anchor tags.\n{{ anchorize \u0026#34;This is a header\u0026#34; }} --\u0026gt; \u0026#34;this-is-a-header\u0026#34; {{ anchorize \u0026#34;This is also a header\u0026#34; }} --\u0026gt; \u0026#34;this-is-also----a-header\u0026#34; {{ anchorize \u0026#34;main.go\u0026#34; }} --\u0026gt; \u0026#34;maingo\u0026#34; {{ anchorize \u0026#34;Article 123\u0026#34; }} --\u0026gt; \u0026#34;article-123\u0026#34; {{ anchorize \u0026#34;\u0026lt;- Let\u0026#39;s try this, shall we?\u0026#34; }} --\u0026gt; \u0026#34;--lets-try-this-shall-we\u0026#34; {{ anchorize \u0026#34;Hello, 世界\u0026#34; }} --\u0026gt; \u0026#34;hello-世界\u0026#34; 另请参阅 # .RenderString Content Formats Markdown Render Hooks Shortcodes emojify "},{"id":163,"href":"/hugo/contentmanagement/menus/","title":"菜单","section":"内容管理","content":" Menus - 菜单 # https://gohugo.io/content-management/menus/\n​\t通过定义条目、本地化每个条目以及渲染结果数据结构来创建菜单。\n概述 # ​\t要为您的站点创建菜单步骤如下：\n定义菜单条目 本地化每个条目 使用模板渲染菜单 ​\t创建多个菜单，可以是平面或嵌套的。例如，创建一个用于页眉的主菜单，以及一个用于页脚的单独菜单。\n​\t有三种方法可以定义菜单条目：\n自动定义 在前置元数据中定义 在站点配置中定义 ​\t虽然可以在定义菜单时结合使用这些方法，但如果在整个站点中使用一种方法，则更容易理解和维护菜单。\n自动定义 # ​\t要为站点的每个顶级章节自动定义菜单条目，请在站点配置中启用section pages menu。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml sectionPagesMenu: main ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml sectionPagesMenu = 'main' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;sectionPagesMenu\u0026quot;: \u0026quot;main\u0026quot; } ``` ​\t这将创建一个菜单结构，您可以在模板中使用 site.Menus.main 访问它。有关详细信息，请参阅菜单模板。\n在前置元数据中定义 # ​\t要将一个页面添加到\u0026quot;main\u0026quot;菜单中：\ncontent/about.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- menu: main title: About --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ menu = 'main' title = 'About' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;menu\u0026quot;: \u0026quot;main\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;About\u0026quot; } ``` ​\t您可以在模板中使用 site.Menus.main 访问该条目。有关详细信息，请参阅菜单模板。\n​\t要将一个页面添加到\u0026quot;main\u0026quot;和\u0026quot;footer\u0026quot;菜单中：\ncontent/contact.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- menu: - main - footer title: Contact --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ menu = ['main', 'footer'] title = 'Contact' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;menu\u0026quot;: [ \u0026quot;main\u0026quot;, \u0026quot;footer\u0026quot; ], \u0026quot;title\u0026quot;: \u0026quot;Contact\u0026quot; } ``` ​\t您可以在模板中使用 site.Menus.main 和 site.Menus.footer 访问该条目。有关详细信息，请参阅菜单模板。\n属性 # ​\t在前置元数据中定义菜单条目时，请使用以下这些属性：\nidentifier\n（string）当两个或多个菜单条目具有相同name或者使用翻译表（translation tables）本地化name时，必填。必须以字母开头，后跟字母、数字或下划线。\nname\n（string）在渲染该菜单条目时要显示的文本。\nparams\n（map）该菜单条目的用户定义属性。\nparent\n（string）该父菜单条目的identifier。如果未定义identifier，请使用name。在嵌套菜单中的子菜单条目中必填。\npost\n（string）在渲染该菜单条目时追加的HTML。\npre\n（string）在渲染该菜单条目时前置的HTML。\ntitle\n（string）被渲染的该菜单条目的HTML的title属性。\nweight\n（int）非零整数，表示该条目相对于菜单根的位置，或者表示子条目相对于其父级的位置。较轻的条目上浮到顶部，较重的条目下沉到底部。\n示例 # ​\t此前置元数据菜单条目演示了一些可用属性：\ncontent/products/software.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- menu: main: params: class: center parent: Products pre: \u0026lt;i class=\u0026quot;fa-solid fa-code\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; weight: 20 title: Software --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ title = 'Software' [menu] [menu.main] parent = 'Products' pre = '\u0026lt;i class=\u0026quot;fa-solid fa-code\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;' weight = 20 [menu.main.params] class = 'center' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;menu\u0026quot;: { \u0026quot;main\u0026quot;: { \u0026quot;params\u0026quot;: { \u0026quot;class\u0026quot;: \u0026quot;center\u0026quot; }, \u0026quot;parent\u0026quot;: \u0026quot;Products\u0026quot;, \u0026quot;pre\u0026quot;: \u0026quot;\\u003ci class=\\\u0026quot;fa-solid fa-code\\\u0026quot;\\u003e\\u003c/i\\u003e\u0026quot;, \u0026quot;weight\u0026quot;: 20 } }, \u0026quot;title\u0026quot;: \u0026quot;Software\u0026quot; } ``` ​\t在模板中使用site.Menus.main访问该条目。有关详细信息，请参见菜单模板。\n在站点配置中定义 # ​\t要定义\u0026quot;main\u0026quot;菜单的条目：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml menu: main: - name: Home pageRef: / weight: 10 - name: Products pageRef: /products weight: 20 - name: Services pageRef: /services weight: 30 ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [menu] [[menu.main]] name = 'Home' pageRef = '/' weight = 10 [[menu.main]] name = 'Products' pageRef = '/products' weight = 20 [[menu.main]] name = 'Services' pageRef = '/services' weight = 30 ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;menu\u0026quot;: { \u0026quot;main\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;Home\u0026quot;, \u0026quot;pageRef\u0026quot;: \u0026quot;/\u0026quot;, \u0026quot;weight\u0026quot;: 10 }, { \u0026quot;name\u0026quot;: \u0026quot;Products\u0026quot;, \u0026quot;pageRef\u0026quot;: \u0026quot;/products\u0026quot;, \u0026quot;weight\u0026quot;: 20 }, { \u0026quot;name\u0026quot;: \u0026quot;Services\u0026quot;, \u0026quot;pageRef\u0026quot;: \u0026quot;/services\u0026quot;, \u0026quot;weight\u0026quot;: 30 } ] } } ``` ​\t这将创建一个菜单结构，您可以在模板中使用site.Menus.main访问。有关详细信息，请参见菜单模板。\n​\t要定义\u0026quot;footer\u0026quot;菜单的条目：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml menu: footer: - name: Terms pageRef: /terms weight: 10 - name: Privacy pageRef: /privacy weight: 20 ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [menu] [[menu.footer]] name = 'Terms' pageRef = '/terms' weight = 10 [[menu.footer]] name = 'Privacy' pageRef = '/privacy' weight = 20 ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;menu\u0026quot;: { \u0026quot;footer\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;Terms\u0026quot;, \u0026quot;pageRef\u0026quot;: \u0026quot;/terms\u0026quot;, \u0026quot;weight\u0026quot;: 10 }, { \u0026quot;name\u0026quot;: \u0026quot;Privacy\u0026quot;, \u0026quot;pageRef\u0026quot;: \u0026quot;/privacy\u0026quot;, \u0026quot;weight\u0026quot;: 20 } ] } } ``` ​\t这将创建一个菜单结构，您可以在模板中使用site.Menus.footer访问。有关详细信息，请参见菜单模板。\n属性 # ​\t在前置元数据中定义的条目可用的属性也适用于在站点配置中定义的条目。\n​\t在站点配置中定义的每个菜单条目都需要两个或多个属性：\n为内部链接指定name和pageRef\n为外部链接指定name和url\npageRef\n（string）目标页面的文件路径，相对于content目录。省略语言代码和文件扩展名。内部链接则必填。\nKind pageRef home / page /books/book-1 section /books taxonomy /tags term /tags/foo url\n（string）外部链接则必填。\n示例 # ​\t这个嵌套菜单演示了一些可用的属性：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml menu: main: - name: Products pageRef: /products weight: 10 - name: Hardware pageRef: /products/hardware parent: Products weight: 1 - name: Software pageRef: /products/software parent: Products weight: 2 - name: Services pageRef: /services weight: 20 - name: Hugo params: rel: external pre: \u0026lt;i class=\u0026quot;fa fa-heart\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; url: https://gohugo.io/ weight: 30 ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [menu] [[menu.main]] name = 'Products' pageRef = '/products' weight = 10 [[menu.main]] name = 'Hardware' pageRef = '/products/hardware' parent = 'Products' weight = 1 [[menu.main]] name = 'Software' pageRef = '/products/software' parent = 'Products' weight = 2 [[menu.main]] name = 'Services' pageRef = '/services' weight = 20 [[menu.main]] name = 'Hugo' pre = '\u0026lt;i class=\u0026quot;fa fa-heart\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;' url = 'https://gohugo.io/' weight = 30 [menu.main.params] rel = 'external' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;menu\u0026quot;: { \u0026quot;main\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;Products\u0026quot;, \u0026quot;pageRef\u0026quot;: \u0026quot;/products\u0026quot;, \u0026quot;weight\u0026quot;: 10 }, { \u0026quot;name\u0026quot;: \u0026quot;Hardware\u0026quot;, \u0026quot;pageRef\u0026quot;: \u0026quot;/products/hardware\u0026quot;, \u0026quot;parent\u0026quot;: \u0026quot;Products\u0026quot;, \u0026quot;weight\u0026quot;: 1 }, { \u0026quot;name\u0026quot;: \u0026quot;Software\u0026quot;, \u0026quot;pageRef\u0026quot;: \u0026quot;/products/software\u0026quot;, \u0026quot;parent\u0026quot;: \u0026quot;Products\u0026quot;, \u0026quot;weight\u0026quot;: 2 }, { \u0026quot;name\u0026quot;: \u0026quot;Services\u0026quot;, \u0026quot;pageRef\u0026quot;: \u0026quot;/services\u0026quot;, \u0026quot;weight\u0026quot;: 20 }, { \u0026quot;name\u0026quot;: \u0026quot;Hugo\u0026quot;, \u0026quot;params\u0026quot;: { \u0026quot;rel\u0026quot;: \u0026quot;external\u0026quot; }, \u0026quot;pre\u0026quot;: \u0026quot;\\u003ci class=\\\u0026quot;fa fa-heart\\\u0026quot;\\u003e\\u003c/i\\u003e\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://gohugo.io/\u0026quot;, \u0026quot;weight\u0026quot;: 30 } ] } } ``` ​\t这将创建一个菜单结构，您可以在模板中使用 site.Menus.main 访问。有关详细信息，请参阅菜单模板。\n本地化 # ​\tHugo提供了两种方法来本地化菜单条目。请参阅多语言。\n渲染 # ​\t请参阅菜单模板。\n另请参阅 # 菜单模板 .HasMenuCurrent .IsMenuCurrent 构建选项 菜单变量 "},{"id":164,"href":"/hugo/templ/menutemplates/","title":"菜单模板","section":"模板","content":" Menu Templates - 菜单模板 # https://gohugo.io/templates/menu-templates/\n​\t在您的模板中使用菜单变量和方法来渲染菜单。\n概述 # ​\t在定义菜单条目之后，使用菜单变量和方法来渲染菜单。\n​\t有三个因素决定如何渲染菜单：\n定义菜单条目的方法：自动定义、在前置元数据中定义或在站点配置中定义 菜单结构：平面或嵌套 用于本地化菜单条目的方法：站点配置或翻译表 ​\t下面的示例处理了每种组合。\n示例 # ​\t这个局部模板递归地\u0026quot;遍历\u0026quot;菜单结构，渲染本地化、可访问的嵌套列表。\nlayouts/partials/menu.html\n{{- $page := .page }} {{- $menuID := .menuID }} {{- with index site.Menus $menuID }} \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; {{- partial \u0026#34;inline/menu/walk.html\u0026#34; (dict \u0026#34;page\u0026#34; $page \u0026#34;menuEntries\u0026#34; .) }} \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; {{- end }} {{- define \u0026#34;partials/inline/menu/walk.html\u0026#34; }} {{- $page := .page }} {{- range .menuEntries }} {{- $attrs := dict \u0026#34;href\u0026#34; .URL }} {{- if $page.IsMenuCurrent .Menu . }} {{- $attrs = merge $attrs (dict \u0026#34;class\u0026#34; \u0026#34;active\u0026#34; \u0026#34;aria-current\u0026#34; \u0026#34;page\u0026#34;) }} {{- else if $page.HasMenuCurrent .Menu .}} {{- $attrs = merge $attrs (dict \u0026#34;class\u0026#34; \u0026#34;ancestor\u0026#34; \u0026#34;aria-current\u0026#34; \u0026#34;true\u0026#34;) }} {{- end }} \u0026lt;li\u0026gt; \u0026lt;a {{- range $k, $v := $attrs }} {{- with $v }} {{- printf \u0026#34; %s=%q\u0026#34; $k $v | safeHTMLAttr }} {{- end }} {{- end -}} \u0026gt;{{ or (T .Identifier) .Name | safeHTML }}\u0026lt;/a\u0026gt; {{- with .Children }} \u0026lt;ul\u0026gt; {{- partial \u0026#34;inline/menu/walk.html\u0026#34; (dict \u0026#34;page\u0026#34; $page \u0026#34;menuEntries\u0026#34; .) }} \u0026lt;/ul\u0026gt; {{- end }} \u0026lt;/li\u0026gt; {{- end }} {{- end }} ​\t调用上面的局部，传递一个菜单ID和当前页面的上下文。\nlayouts/_default/single.html\n{{ partial \u0026#34;menu.html\u0026#34; (dict \u0026#34;menuID\u0026#34; \u0026#34;main\u0026#34; \u0026#34;page\u0026#34; .) }} {{ partial \u0026#34;menu.html\u0026#34; (dict \u0026#34;menuID\u0026#34; \u0026#34;footer\u0026#34; \u0026#34;page\u0026#34; .) }} 页面引用 # ​\t无论您如何定义菜单条目，与页面相关联的条目都可以访问页面变量和方法。\n​\t这个简单的示例在每个条目的name旁边渲染一个名为version的页面参数。使用with或if来处理(a) 指向外部资源的条目，或者(b) version参数未定义的条目。\nlayouts/_default/single.html\n{{- range site.Menus.main }} \u0026lt;a href=\u0026#34;{{ .URL }}\u0026#34;\u0026gt; {{ .Name }} {{- with .Page }} {{- with .Params.version -}} ({{ . }}) {{- end }} {{- end }} \u0026lt;/a\u0026gt; {{- end }} 菜单条目参数 # 当您在站点配置或前置元数据中定义菜单条目时，可以包括params键，如以下示例所示：\n​\t当您在站点配置中定义菜单条目或在前置元数据中定义菜单条目时，您可以像这些示例中那样包含一个params键：\n在站点配置中定义菜单条目 在前置元数据中定义菜单条目 ​\t这个简单的示例为每个锚点元素呈现一个class属性。使用with或if来处理params.class未定义的条目。\nlayouts/partials/menu.html\n{{- range site.Menus.main }} \u0026lt;a {{ with .Params.class -}} class=\u0026#34;{{ . }}\u0026#34; {{ end -}} href=\u0026#34;{{ .URL }}\u0026#34;\u0026gt; {{ .Name }} \u0026lt;/a\u0026gt; {{- end }} 本地化 # ​\tHugo提供了两种本地化菜单条目的方法。详见多语言。\n另请参阅 # 菜单 .GetPage 内容章节 内容类型 Hugo中的内容列表 "},{"id":165,"href":"/hugo/functions/append/","title":"append","section":"函数","content":"将以下英文翻译为中文：\nappend # https://gohugo.io/functions/append/\nappend appends one or more values to a slice and returns the resulting slice.\n语法 # COLLECTION | append VALUE [VALUE]... COLLECTION | append COLLECTION An example appending single values:\n{{ $s := slice \u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34; }} {{ $s = $s | append \u0026#34;d\u0026#34; \u0026#34;e\u0026#34; }} {{/* $s now contains a []string with elements \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, and \u0026#34;e\u0026#34; */}} The same example appending a slice to a slice:\n{{ $s := slice \u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34; }} {{ $s = $s | append (slice \u0026#34;d\u0026#34; \u0026#34;e\u0026#34;) }} The append function works for all types, including Pages.\n另请参阅 # complement group intersect symdiff union "},{"id":166,"href":"/hugo/templ/pagination/","title":"分页","section":"模板","content":" Pagination - 分页 # ​\tHugo支持对主页、章节页面和分类目录进行分页。\n​\tHugo分页功能真正的强大之处在于与where函数及其类似SQL的操作符：first、last和after相结合使用。您甚至可以按照Hugo中熟悉的方式对内容进行排序。\n配置分页 # ​\t可以在站点配置中配置分页：\npaginate\n默认值为10。这个设置可以在模板中被覆盖。\npaginatePath\n默认值为page。允许您为您的分页页面设置不同的路径。\n​\t将paginate设置为正值将把主页、章节和分类列表页面拆分为这个大小的块。但是请注意，对于章节、分类和主页的分页页面的生成是惰性的——如果没有通过.Paginator引用，这些页面将不会被创建（见下文）。\n​\tpaginatePath用于调整分页器中页面的URL（默认设置会生成这样的URL形式/page/1/）。\n列出分页器页面 # ​\t提供.Paginator帮助您构建分页器菜单。此功能目前仅在主页和列表页面（即分类和章节列表）上受支持。\n​\t有两种配置和使用.Paginator的方法：\n最简单的方法是只需从模板中调用.Paginator.Pages。它将包含该页面的页面。 使用可用的模板函数和排序选项选择另一组页面，并将切片传递给.Paginate，例如 {{ range (.Paginate ( first 50 .Pages.ByTitle )).Pages }} 或 {{ range (.Paginate .RegularPagesRecursive).Pages }}. ​\t对于给定的页面，它是上面选项之一。.Paginator是静态的，一旦创建就不能更改。\n​\t如果在同一页中多次调用 .Paginator 或 .Paginate，您应该确保所有调用都是相同的。一旦在生成页面时调用了 .Paginator 或 .Paginate，其结果就会被缓存，任何后续相似的调用都将重用缓存的结果。这意味着任何不符合第一个调用的这种调用都不会按预期行事。\n（请记住，函数参数是急切地求值的，因此像 $paginator := cond x .Paginator (.Paginate .RegularPagesRecursive) 这样的调用就是您不应该做的事情。请使用 if/else 确保恰好有一个求值。）\n​\t全局页面大小设置（Paginate）可以通过提供正整数作为最后一个参数来覆盖。下面的示例将每页显示五个项：\n{{ range (.Paginator 5).Pages }} {{ $paginator := .Paginate (where .Pages \u0026quot;Type\u0026quot; \u0026quot;posts\u0026quot;) 5 }} 也可以将 GroupBy 函数与分页结合使用：\n{{ range (.Paginate (.Pages.GroupByDate \u0026#34;2006\u0026#34;)).PageGroups }} 构建导航 # ​\t.Paginator 包含构建分页界面所需的足够信息。\n​\t将内置模板（具有与 Bootstrap 兼容的样式）包含到您的页面中是添加此内容的最简单方法：\n{{ template \u0026#34;_internal/pagination.html\u0026#34; . }} ​\t如果使用任何过滤器或排序函数来创建您的 .Paginator，并且您希望在显示页面列表之前显示导航按钮，则必须在使用之前创建 .Paginator。\n​\t以下示例显示如何在使用 .Paginator 之前创建 .Paginator：\n{{ $paginator := .Paginate (where .Pages \u0026#34;Type\u0026#34; \u0026#34;posts\u0026#34;) }} {{ template \u0026#34;_internal/pagination.html\u0026#34; . }} {{ range $paginator.Pages }} {{ .Title }} {{ end }} ​\t如果没有 where 过滤器，则上面的示例更加简单：\n{{ template \u0026#34;_internal/pagination.html\u0026#34; . }} {{ range .Paginator.Pages }} {{ .Title }} {{ end }} ​\t如果您想要构建自定义的导航菜单，您可以使用.Paginator对象，它包括以下属性：\nPageNumber\n当前页面在页面序列中的页码\nURL\n当前页面器的相对URL\nPages\n当前页面器中的页面\nNumberOfElements\n此页面中的元素数量\nHasPrev\n当前页之前是否有页\nPrev\n前一页的分页器\nHasNext\n当前页之后是否有页\nNext\n下一页的分页器\nFirst\n第一页的分页器\nLast\n最后一页的分页器\nPagers\n可用于构建分页菜单的分页器列表\nPageSize\n每个分页器的大小\nTotalPages\n分页器中的页面数\nTotalNumberOfElements\n此分页器中所有页面上的元素数\n附加信息 # ​\t页面按以下形式构建（BLANK表示没有值）：\n[SECTION/TAXONOMY/BLANK]/index.html [SECTION/TAXONOMY/BLANK]/page/1/index.html =\u0026gt; redirect to [SECTION/TAXONOMY/BLANK]/index.html [SECTION/TAXONOMY/BLANK]/page/2/index.html .... 另请参阅 # .GetPage 内容章节 内容类型 在Hugo中的内容列表 菜单模板 "},{"id":167,"href":"/hugo/contentmanagement/staticfiles/","title":"静态文件","section":"内容管理","content":" Static Files - 静态文件 # https://gohugo.io/content-management/static-files/\n​\t这些文件以静态方式（原样、无修改）在站点根目录上提供服务。\n​\t默认情况下，站点项目中的 static/ 目录用于所有静态文件（例如样式表、JavaScript、图像）。这些静态文件将在站点根路径上提供服务（例如，如果您有 static/image.png 文件，则可以使用 http://{server-url}/image.png 访问它，在文档中包含它可以使用![Example image](/image.png) )。\n​\tHugo 可以通过在站点配置中配置 staticDir 参数来查找不同的目录，甚至多个目录以获取这些静态文件。所有静态目录中的所有文件将组成一个联合文件系统。\n​\t这个联合文件系统将从您的站点根目录提供服务。因此，\u0026lt;SITE PROJECT\u0026gt;/static/me.png 文件将作为 \u0026lt;MY_BASEURL\u0026gt;/me.png 文件访问。\n​\t这里是一个为多语言站点设置 staticDir 和 staticDir2 的示例：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml languages: en: baseURL: https://example.com languageName: English staticDir2: static_en title: In English weight: 2 \u0026quot;no\u0026quot;: baseURL: https://example.no languageName: Norsk staticDir: - staticDir_override - static_no title: På norsk weight: 1 staticDir: - static1 - static2 ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml staticDir = ['static1', 'static2'] [languages] [languages.en] baseURL = 'https://example.com' languageName = 'English' staticDir2 = 'static_en' title = 'In English' weight = 2 [languages.no] baseURL = 'https://example.no' languageName = 'Norsk' staticDir = ['staticDir_override', 'static_no'] title = 'På norsk' weight = 1 ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;languages\u0026quot;: { \u0026quot;en\u0026quot;: { \u0026quot;baseURL\u0026quot;: \u0026quot;https://example.com\u0026quot;, \u0026quot;languageName\u0026quot;: \u0026quot;English\u0026quot;, \u0026quot;staticDir2\u0026quot;: \u0026quot;static_en\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;In English\u0026quot;, \u0026quot;weight\u0026quot;: 2 }, \u0026quot;no\u0026quot;: { \u0026quot;baseURL\u0026quot;: \u0026quot;https://example.no\u0026quot;, \u0026quot;languageName\u0026quot;: \u0026quot;Norsk\u0026quot;, \u0026quot;staticDir\u0026quot;: [ \u0026quot;staticDir_override\u0026quot;, \u0026quot;static_no\u0026quot; ], \u0026quot;title\u0026quot;: \u0026quot;På norsk\u0026quot;, \u0026quot;weight\u0026quot;: 1 } }, \u0026quot;staticDir\u0026quot;: [ \u0026quot;static1\u0026quot;, \u0026quot;static2\u0026quot; ] } ``` ​\t在上面的示例中，未使用任何主题：\n英文站点将其静态文件作为\u0026quot;static1\u0026quot;、\u0026ldquo;static2\u0026quot;和\u0026quot;static_en\u0026quot;的联合体。对于文件重复，右边的版本将获胜。\n挪威站点将其静态文件作为\u0026quot;staticDir_override\u0026quot;和\u0026quot;static_no\u0026quot;的联合体。\nNote 1\nstaticDir2 中的 2（可以是 0 到 10 的数字）被添加以告诉 Hugo 您想将此目录添加到使用 staticDir 定义的全局静态目录集合中。在语言级别上使用 staticDir 将替换全局值（如挪威站点案例所示）。\nNote 2\n上面的示例是一个multihost设置。在常规设置中，所有静态目录将对所有站点都可用。\n另请参阅 # 配置模块 目录结构 主题组件 使用 Hugo 模块 本地文件模板 "},{"id":168,"href":"/hugo/functions/apply/","title":"apply","section":"函数","content":"将以下英文翻译为中文：\napply # https://gohugo.io/functions/apply/\nGiven a map, array, or slice, apply returns a new slice with a function applied over it.\n语法 # apply COLLECTION FUNCTION [PARAM...] apply expects at least three parameters, depending on the function being applied.\nThe first parameter is the sequence to operate on. The second parameter is the name of the function as a string, which must be the name of a valid Hugo function. After that, the parameters to the applied function are provided, with the string \u0026quot;.\u0026quot; standing in for each element of the sequence the function is to be applied against. Here is an example of a content file with names: as a front matter field:\ncontent/example.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- names: - Derek Perkins - Joe Bergevin - Tanner Linsley title: Example --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ names = ['Derek Perkins', 'Joe Bergevin', 'Tanner Linsley'] title = 'Example' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;names\u0026quot;: [ \u0026quot;Derek Perkins\u0026quot;, \u0026quot;Joe Bergevin\u0026quot;, \u0026quot;Tanner Linsley\u0026quot; ], \u0026quot;title\u0026quot;: \u0026quot;Example\u0026quot; } ``` You can then use apply as follows:\n{{ apply .Params.names \u0026#34;urlize\u0026#34; \u0026#34;.\u0026#34; }} Which will result in the following:\n\u0026#34;derek-perkins\u0026#34;, \u0026#34;joe-bergevin\u0026#34;, \u0026#34;tanner-linsley\u0026#34; This is roughly equivalent to using the following with range:\n{{ range .Params.names }}{{ . | urlize }}{{ end }} However, it is not possible to provide the output of a range to the delimit function, so you need to apply it.\nIf you have post-tag-list.html and post-tag-link.html as partials, you could use the following snippets, respectively:\nlayouts/partials/post-tag-list.html\n{{ with .Params.tags }} \u0026lt;div class=\u0026#34;tags-list\u0026#34;\u0026gt; Tags: {{ $len := len . }} {{ if eq $len 1 }} {{ partial \u0026#34;post-tag-link.html\u0026#34; (index . 0) }} {{ else }} {{ $last := sub $len 1 }} {{ range first $last . }} {{ partial \u0026#34;post-tag-link.html\u0026#34; . }}, {{ end }} {{ partial \u0026#34;post-tag-link.html\u0026#34; (index . $last) }} {{ end }} \u0026lt;/div\u0026gt; {{ end }} layouts/partials/post-tag-link.html\n\u0026lt;a class=\u0026#34;post-tag post-tag-{{ . | urlize }}\u0026#34; href=\u0026#34;/tags/{{ . | urlize }}\u0026#34;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; This works, but the complexity of post-tag-list.html is fairly high. The Hugo template needs to perform special behavior for the case where there’s only one tag, and it has to treat the last tag as special. Additionally, the tag list will be rendered something like Tags: tag1 , tag2 , tag3 because of the way that the HTML is generated and then interpreted by a browser.\nThis first version of layouts/partials/post-tag-list.html separates all of the operations for ease of reading. The combined and DRYer version is shown next:\n{{ with .Params.tags }} \u0026lt;div class=\u0026#34;tags-list\u0026#34;\u0026gt; Tags: {{ $sort := sort . }} {{ $links := apply $sort \u0026#34;partial\u0026#34; \u0026#34;post-tag-link.html\u0026#34; \u0026#34;.\u0026#34; }} {{ $clean := apply $links \u0026#34;chomp\u0026#34; \u0026#34;.\u0026#34; }} {{ delimit $clean \u0026#34;, \u0026#34; }} \u0026lt;/div\u0026gt; {{ end }} Now in the completed version, you can sort the tags, convert the tags to links with layouts/partials/post-tag-link.html, chomp off stray newlines, and join the tags together in a delimited list for presentation. Here is an even DRYer version of the preceding example:\nlayouts/partials/post-tag-list.html\n{{ with .Params.tags }} \u0026lt;div class=\u0026#34;tags-list\u0026#34;\u0026gt; Tags: {{ delimit (apply (apply (sort .) \u0026#34;partial\u0026#34; \u0026#34;post-tag-link.html\u0026#34; \u0026#34;.\u0026#34;) \u0026#34;chomp\u0026#34; \u0026#34;.\u0026#34;) \u0026#34;, \u0026#34; }} \u0026lt;/div\u0026gt; {{ end }} apply does not work when receiving the sequence as an argument through a pipeline.\n"},{"id":169,"href":"/hugo/templ/rsstemplates/","title":"RSS模板","section":"模板","content":" RSS Templates - RSS模板 # https://gohugo.io/templates/rss/\n​\tHugo 自带 RSS 2.0 模板，几乎不需要配置，或者您可以创建自己的 RSS 模板。\nRSS模板查找顺序 # ​\t有关完整参考，请参见 Template Lookup Order。\n​\tHugo 自带了 RSS 2.0 模板。嵌入式模板对于大多数用例已经足够了。\n​\tRSS 页面属于 Page 类型，并且在模板中可以使用所有 页面变量。\nSection RSS # ​\tsection 的 RSS 将在 /\u0026lt;SECTION\u0026gt;/index.xml（例如，https://spf13.com/project/index.xml）处被渲染。\n​\tHugo 提供了定义任何 RSS 类型的功能，并且可以为每个章节和分类法设置不同的 RSS 文件。\nRSS模板查找顺序表 # ​\t下表显示了不同页面类型的 RSS 模板查找顺序。第一个列表显示了在使用某一主题（demoTheme）运行时的查找顺序。\nExample OutputFormat 后缀 Template Lookup Order RSS home RSS xml 1. layouts/index.rss.xml2. layouts/home.rss.xml3. layouts/rss.xml4. layouts/list.rss.xml5. layouts/index.xml6. layouts/home.xml7. layouts/list.xml8. layouts/_default/index.rss.xml9. layouts/_default/home.rss.xml10. layouts/_default/rss.xml11. layouts/_default/list.rss.xml12. layouts/_default/index.xml13. layouts/_default/home.xml14. layouts/_default/list.xml15. layouts/_internal/_default/rss.xml RSS section posts RSS xml 1. layouts/posts/section.rss.xml2. layouts/posts/rss.xml3. layouts/posts/list.rss.xml4. layouts/posts/section.xml5. layouts/posts/list.xml6. layouts/section/section.rss.xml7. layouts/section/rss.xml8. layouts/section/list.rss.xml9. layouts/section/section.xml10. layouts/section/list.xml11. layouts/_default/section.rss.xml12. layouts/_default/rss.xml13. layouts/_default/list.rss.xml14. layouts/_default/section.xml15. layouts/_default/list.xml16. layouts/_internal/_default/rss.xml Taxonomy in categories RSS xml 1. layouts/categories/category.terms.rss.xml2. layouts/categories/terms.rss.xml3. layouts/categories/taxonomy.rss.xml4. layouts/categories/rss.xml5. layouts/categories/list.rss.xml6. layouts/categories/category.terms.xml7. layouts/categories/terms.xml8. layouts/categories/taxonomy.xml9. layouts/categories/list.xml10. layouts/category/category.terms.rss.xml11. layouts/category/terms.rss.xml12. layouts/category/taxonomy.rss.xml13. layouts/category/rss.xml14. layouts/category/list.rss.xml15. layouts/category/category.terms.xml16. layouts/category/terms.xml17. layouts/category/taxonomy.xml18. layouts/category/list.xml19. layouts/taxonomy/category.terms.rss.xml20. layouts/taxonomy/terms.rss.xml21. layouts/taxonomy/taxonomy.rss.xml22. layouts/taxonomy/rss.xml23. layouts/taxonomy/list.rss.xml24. layouts/taxonomy/category.terms.xml25. layouts/taxonomy/terms.xml26. layouts/taxonomy/taxonomy.xml27. layouts/taxonomy/list.xml28. layouts/_default/category.terms.rss.xml29. layouts/_default/terms.rss.xml30. layouts/_default/taxonomy.rss.xml31. layouts/_default/rss.xml32. layouts/_default/list.rss.xml33. layouts/_default/category.terms.xml34. layouts/_default/terms.xml35. layouts/_default/taxonomy.xml36. layouts/_default/list.xml37. layouts/_internal/_default/rss.xml Term in categories RSS xml 1. layouts/categories/term.rss.xml2. layouts/categories/category.rss.xml3. layouts/categories/taxonomy.rss.xml4. layouts/categories/rss.xml5. layouts/categories/list.rss.xml6. layouts/categories/term.xml7. layouts/categories/category.xml8. layouts/categories/taxonomy.xml9. layouts/categories/list.xml10. layouts/term/term.rss.xml11. layouts/term/category.rss.xml12. layouts/term/taxonomy.rss.xml13. layouts/term/rss.xml14. layouts/term/list.rss.xml15. layouts/term/term.xml16. layouts/term/category.xml17. layouts/term/taxonomy.xml18. layouts/term/list.xml19. layouts/taxonomy/term.rss.xml20. layouts/taxonomy/category.rss.xml21. layouts/taxonomy/taxonomy.rss.xml22. layouts/taxonomy/rss.xml23. layouts/taxonomy/list.rss.xml24. layouts/taxonomy/term.xml25. layouts/taxonomy/category.xml26. layouts/taxonomy/taxonomy.xml27. layouts/taxonomy/list.xml28. layouts/category/term.rss.xml29. layouts/category/category.rss.xml30. layouts/category/taxonomy.rss.xml31. layouts/category/rss.xml32. layouts/category/list.rss.xml33. layouts/category/term.xml34. layouts/category/category.xml35. layouts/category/taxonomy.xml36. layouts/category/list.xml37. layouts/_default/term.rss.xml38. layouts/_default/category.rss.xml39. layouts/_default/taxonomy.rss.xml40. layouts/_default/rss.xml41. layouts/_default/list.rss.xml42. layouts/_default/term.xml43. layouts/_default/category.xml44. layouts/_default/taxonomy.xml45. layouts/_default/list.xml46. layouts/_internal/_default/rss.xml 配置RSS # ​\t默认情况下，Hugo 将创建无限数量的 RSS 条目。您可以通过在项目的 config 文件 中分配数值给 rssLimit: 字段来限制内置 RSS 模板中包含的文章数量。\n​\t如果指定以下值，它们也将包含在 RSS 输出中：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml author: name: My Name Here copyright: This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. languageCode: en-us ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml copyright = 'This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.' languageCode = 'en-us' [author] name = 'My Name Here' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;author\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;My Name Here\u0026quot; }, \u0026quot;copyright\u0026quot;: \u0026quot;This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\u0026quot;, \u0026quot;languageCode\u0026quot;: \u0026quot;en-us\u0026quot; } ``` 内嵌的rss.xml # ​\t以下是 Hugo 自带的默认 RSS 模板：\nhttps://github.com/gohugoio/hugo/blob/master/tpl/tplimpl/embedded/templates/_default/rss.xml\n在\u0026lt;head\u0026gt;中引用RSS 订阅 # ​\t在您的 header.html 模板中，您可以使用 Hugo 的 输出格式 在 \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; 标签中指定您的 RSS 订阅，如下所示：\n{{ range .AlternativeOutputFormats -}} {{ printf `\u0026lt;link rel=\u0026#34;%s\u0026#34; type=\u0026#34;%s\u0026#34; href=\u0026#34;%s\u0026#34; title=\u0026#34;%s\u0026#34; /\u0026gt;` .Rel .MediaType.Type .Permalink $.Site.Title | safeHTML }} {{ end -}} ​\t如果您只想要 RSS 链接，则可以查询该格式：\n{{ with .OutputFormats.Get \u0026#34;rss\u0026#34; -}} {{ printf `\u0026lt;link rel=\u0026#34;%s\u0026#34; type=\u0026#34;%s\u0026#34; href=\u0026#34;%s\u0026#34; title=\u0026#34;%s\u0026#34; /\u0026gt;` .Rel .MediaType.Type .Permalink $.Site.Title | safeHTML }} {{ end -}} ​\t上述两个片段中的任何一个都将为站点首页生成以下 link 标记以用于 RSS 输出：\n\u0026lt;link rel=\u0026#34;alternate\u0026#34; type=\u0026#34;application/rss+xml\u0026#34; href=\u0026#34;https://example.com/index.xml\u0026#34; title=\u0026#34;Site Title\u0026#34;\u0026gt; ​\t在本示例中，我们假设 BaseURL 为 https://example.com/，$.Site.Title 为 \u0026quot;Site Title\u0026quot;。\n另请参阅 # Sitemap模板 创建自己的简码 自定义输出格式 数据模板 Hugo的查找顺序 "},{"id":170,"href":"/hugo/contentmanagement/tableofcontents/","title":"目录","section":"内容管理","content":" Table of Contents - 目录 # https://gohugo.io/content-management/toc/\n​\tHugo可以自动解析Markdown内容并创建一个目录，您可以在模板中使用它。\n​\t以前，没有开箱即用的方法来指定要渲染TOC的标题级别。请参见相关的GitHub讨论(#1778)。因此，从{{ .Content }}中提取时，生成的\u0026lt;nav id=\u0026quot;TableOfContents\u0026quot;\u0026gt;\u0026lt;ul\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;/nav\u0026gt;将从\u0026lt;h1\u0026gt;开始。\n​\tHugo v0.60.0切换到了Goldmark作为Markdown的默认库，该库具有改进和可配置的TOC实现。请看如何为Goldmark渲染器配置TOC。\n用法 # ​\t以通常的标题方式创建您的Markdown。以下是一些示例内容：\n\u0026lt;!-- Your 前置元数据 up here --\u0026gt; ## Introduction One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. ## My Heading He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly domed and divided by arches into stiff sections. The bedding was hardly able to cover it and seemed ready to slide off any moment. ### My Subheading A collection of textile samples lay spread out on the table - Samsa was a travelling salesman - and above it there hung a picture that he had recently cut out of an illustrated magazine and housed in a nice, gilded frame. It showed a lady fitted out with a fur hat and fur boa who sat upright, raising a heavy fur muff that covered the whole of her lower arm towards the viewer. Gregor then turned to look out the window at the dull weather. Drops ​\tHugo将从##Introduction、##My Heading和###My Subheading创建一个目录，然后将其存储在页面变量.TableOfContents中。\n​\t内置的.TableOfContents变量输出一个带有子\u0026lt;ul\u0026gt;元素的\u0026lt;nav id=\u0026quot;TableOfContents\u0026quot;\u0026gt;，其子\u0026lt;li\u0026gt;元素以适当的HTML标题开头。请查看可用设置，以配置要在TOC中包含哪些标题级别。\n模板示例：基本TOC # ​\t以下是一个非常基本的单页面模板示例：\nlayout/_default/single.html\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;main\u0026gt; \u0026lt;article\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; {{ .Content }} \u0026lt;/article\u0026gt; \u0026lt;aside\u0026gt; {{ .TableOfContents }} \u0026lt;/aside\u0026gt; \u0026lt;/main\u0026gt; {{ end }} 模板示例：TOC Partial # ​\t以下是一个部分模板，它为页面级别控制目录添加了稍微更多的逻辑。它假定您在内容的前置元数据中使用toc字段，除非将其特别设置为false，否则会将TOC添加到具有大于400的.WordCount（请参见页面变量）的任何页面。此示例还演示了如何在模板中使用条件语句：\nlayouts/partials/toc.html\n{{ if and (gt .WordCount 400 ) (.Params.toc) }} \u0026lt;aside\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h2\u0026gt;{{ .Title }}\u0026lt;/h2\u0026gt; \u0026lt;/header\u0026gt; {{ .TableOfContents }} \u0026lt;/aside\u0026gt; {{ end }} ​\t通过前面的示例，即使页面中有\u0026gt; 400个单词且toc未设置为false，如果页面中没有标题可以被{{ .TableOfContents }}变量提取，也不会渲染目录。\n使用AsciiDoc # ​\tHugo支持使用AsciiDoc内容格式的目录。\n​\t在内容文件的头部，指定AsciiDoc TOC指令，以确保生成目录。Hugo将使用生成的TOC来填充页面变量.TableOfContents，方式与Markdown描述的相同。请参见以下示例：\n// \u0026lt;!-- Your 前置元数据 up here --\u0026gt; :toc: // Set toclevels to be at least your hugo [markup.tableOfContents.endLevel] config key :toclevels: 4 == Introduction One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. == My Heading He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly domed and divided by arches into stiff sections. The bedding was hardly able to cover it and seemed ready to slide off any moment. === My Subheading A collection of textile samples lay spread out on the table - Samsa was a travelling salesman - and above it there hung a picture that he had recently cut out of an illustrated magazine and housed in a nice, gilded frame. It showed a lady fitted out with a fur hat and fur boa who sat upright, raising a heavy fur muff that covered the whole of her lower arm towards the viewer. Gregor then turned to look out the window at the dull weather. Drops ​\tHugo将获取此AsciiDoc并创建目录，并将其存储在页面变量.TableOfContents中，与Markdown描述的相同。\n另请参阅 # Babel Concat ExecuteAsTemplate Fingerprint FromString "},{"id":171,"href":"/hugo/functions/base64/","title":"base64","section":"函数","content":"将以下英文翻译为中文：\nbase64 # https://gohugo.io/functions/base64/\nbase64Encode and base64Decode let you easily decode content with a base64 encoding and vice versa through pipes.\n语法 # base64Decode INPUT base64Encode INPUT {{ \u0026#34;Hugo\u0026#34; | base64Encode }} → \u0026#34;SHVnbw==\u0026#34; {{ \u0026#34;SHVnbw==\u0026#34; | base64Decode }} → \u0026#34;Hugo\u0026#34; base64 with APIs # Using base64 to decode and encode becomes really powerful if we have to handle responses from APIs.\n{{ $resp := getJSON \u0026#34;https://api.github.com/repos/gohugoio/hugo/readme\u0026#34; }} {{ $resp.content | base64Decode | markdownify }} The response of the GitHub API contains the base64-encoded version of the README.md in the Hugo repository. Now we can decode it and parse the Markdown. The final output will look similar to the rendered version on GitHub.\n"},{"id":172,"href":"/hugo/templ/sitemaptemplates/","title":"Sitemap模板","section":"模板","content":" Sitemap Templates - Sitemap模板 # https://gohugo.io/templates/sitemap-template/\n​\tHugo提供了内置的站点地图（sitemap）模板。\n概述 # ​\tHugo的内置站点地图模板符合v0.9的站点地图协议。\n​\t对于单语言项目，Hugo将在根目录下使用内置的sitemap.xml模板生成一个sitemap.xml文件，该文件位于publishDir中。\n​\t对于多语言项目，Hugo会生成：\n使用内置的sitemap.xml模板，在每个站点（语言）的根目录中生成一个sitemap.xml文件。 使用内置的sitemapindex.xml模板，在publishDir的根目录中生成一个sitemap.xml文件。 配置 # ​\t在您的站点配置中设置更改频率、优先级和生成的文件名称的默认值。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml sitemap: changefreq: monthly filename: sitemap.xml priority: 0.5 ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [sitemap] changefreq = 'monthly' filename = 'sitemap.xml' priority = 0.5 ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;sitemap\u0026quot;: { \u0026quot;changefreq\u0026quot;: \u0026quot;monthly\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;sitemap.xml\u0026quot;, \u0026quot;priority\u0026quot;: 0.5 } } ``` changefreq\n页面更改频率的可能性有多大。有效的值包括always、hourly、daily、weekly、monthly、yearly和never。默认值为\u0026quot;\u0026quot;（从渲染的站点地图中省略更改频率）。\nfilename\n生成的文件名称。默认值为sitemap.xml。\npriority\n相对于站点中的其他页面，该页面的优先级。有效值范围为0.0到1.0。默认值为-1（渲染站点地图时省略优先级）。\n覆盖默认值 # ​\t在前置元数据中覆盖给定页面的默认值。\nnews.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- sitemap: changefreq: weekly priority: 0.8 title: News --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ title = 'News' [sitemap] changefreq = 'weekly' priority = 0.8 +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;sitemap\u0026quot;: { \u0026quot;changefreq\u0026quot;: \u0026quot;weekly\u0026quot;, \u0026quot;priority\u0026quot;: 0.8 }, \u0026quot;title\u0026quot;: \u0026quot;News\u0026quot; } ``` 覆盖内置模板 # ​\t要覆盖内置的sitemap.xml模板，请在以下任一位置创建一个新文件：\nlayouts/sitemap.xml layouts/_default/sitemap.xml ​\t在对页面集合进行排列时，可以使用.Sitemap.ChangeFreq和.Sitemap.Priority分别访问更改频率和优先级。\n​\t要覆盖内置的sitemapindex.xml模板，请在以下任一位置创建一个新文件：\nlayouts/sitemapindex.xml layouts/_default/sitemapindex.xml 禁用Sitemap生成 # ​\t您可以在站点配置中禁用站点地图生成：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml disableKinds: - sitemap ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml disableKinds = ['sitemap'] ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;disableKinds\u0026quot;: [ \u0026quot;sitemap\u0026quot; ] } ``` 另请参阅 # RSS模板 创建自己的简码 数据模板 Hugo的查找顺序 菜单模板 "},{"id":173,"href":"/hugo/contentmanagement/comments/","title":"评论","section":"内容管理","content":" Comments - 评论 # ​\tHugo内置了Disqus模板，但这不是唯一能够与您的新Hugo站点配合使用的评论系统。\n​\tHugo支持Disqus，这是一个第三方服务，通过JavaScript为站点提供评论和社区功能。\n​\t您的主题可能已经支持Disqus，但如果没有，可以通过Hugo内置的Disqus partial轻松添加到您的模板中。\n添加Disqus # ​\tHugo已经为您的模板提供了加载Disqus所需的所有代码。在将Disqus添加到您的站点之前，您需要设置一个帐户。\n配置Disqus # ​\tDisqus评论要求您在站点的配置文件中设置单个值，如下所示：\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml disqusShortname: yourDisqusShortname ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml disqusShortname = 'yourDisqusShortname' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;disqusShortname\u0026quot;: \u0026quot;yourDisqusShortname\u0026quot; } ``` ​\t对于许多站点来说，这样的配置已经足够。但是，您还可以在单个内容文件的前置元数据中设置以下内容：\ndisqus_identifier disqus_title disqus_url 渲染Hugo内置的Disqus部分模板 # ​\tDisqus有其自己的内部模板可用，要渲染它，请在要出现评论的位置添加以下代码：\n{{ template \u0026#34;_internal/disqus.html\u0026#34; . }} 替代方案 # 以下是Disqus的一些替代方案：\nCactus Comments（开源，Matrix appservice，Docker安装） Commento（开源，可用作服务，本地安装或docker映像） Graph Comment Hyvor Talk（可用作服务） IntenseDebate Isso（自托管，Python）（tutorial） Muut Remark42（开源，Golang，易于运行docker） ReplyBox Staticman Talkyard（开源，无服务器托管） Utterances（开源，基于GitHub问题构建的GitHub评论小部件） 另请参阅 # 内容组织 内容章节 内容类型 .GetPage 构建选项 "},{"id":174,"href":"/hugo/functions/chomp/","title":"chomp","section":"函数","content":"将以下英文翻译为中文：\nchomp # https://gohugo.io/functions/chomp/\nRemoves any trailing newline characters.\n语法 # chomp INPUT strings.Chomp INPUT Useful in a pipeline to remove newlines added by other processing (e.g., markdownify).\n{{ chomp \u0026#34;\u0026lt;p\u0026gt;Blockhead\u0026lt;/p\u0026gt;\\n\u0026#34; }} → \u0026#34;\u0026lt;p\u0026gt;Blockhead\u0026lt;/p\u0026gt;\u0026#34; "},{"id":175,"href":"/hugo/templ/robots_txt/","title":"Robots.txt","section":"模板","content":" Robots.txt File - Robots.txt 文件 # https://gohugo.io/templates/robots/\n​\tHugo 可以像任何其他模板一样生成自定义的 robots.txt 文件。\n​\t要从模板生成 robots.txt 文件，请更改站点配置：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml enableRobotsTXT: true ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml enableRobotsTXT = true ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;enableRobotsTXT\u0026quot;: true } ``` ​\t默认情况下，Hugo使用内置模板生成 robots.txt。\nUser-agent: * ​\t遵守Robots Exclusion Protocol的搜索引擎将把这个文件解释为允许爬取站点上的所有内容。\nRobots.txt 模板查找顺序 # ​\t您可以使用自定义模板覆盖内置模板。Hugo使用以下查找顺序选择模板：\n/layouts/robots.txt /themes/\u0026lt;THEME\u0026gt;/layouts/robots.txt Robots.txt 模板示例 # layouts/robots.txt\nUser-agent: * {{ range .Pages }} Disallow: {{ .RelPermalink }} {{ end }} ​\t该模板将为站点上的每个页面创建一个 robots.txt 文件，使用Disallow指令。遵守Robots Exclusion Protocol的搜索引擎将不会爬取站点上的任何页面。\n​\t要创建一个不使用模板的 robots.txt 文件：\n在站点配置中将 enableRobotsTXT 设置为 false。 在 static 目录中创建一个 robots.txt 文件。 ​\t请记住，Hugo在构建站点时将 static 目录 中的所有内容复制到 publishDir (通常为 public) 的根目录。\n"},{"id":176,"href":"/hugo/functions/complement/","title":"complement","section":"函数","content":"将以下英文翻译为中文：\ncomplement # https://gohugo.io/functions/complement/\nReturns the elements of the last collection that are not in any of the others.\n语法 # complement COLLECTION [COLLECTION]... collections.Complement COLLECTION [COLLECTION]... To find the elements within $c3 that do not exist in $c1 or $c2:\n{{ $c1 := slice 3 }} {{ $c2 := slice 4 5 }} {{ $c3 := slice 1 2 3 4 5 }} {{ complement $c1 $c2 $c3 }} → [1 2] Make your code simpler to understand by using a chained pipeline:\n{{ $c3 | complement $c1 $c2 }} → [1 2] You can also use the complement function with page collections. Let’s say your site has five content types:\ncontent/ ├── blog/ ├── books/ ├── faqs/ ├── films/ └── songs/ To list everything except blog articles (blog) and frequently asked questions (faqs):\n{{ $blog := where site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;blog\u0026#34; }} {{ $faqs := where site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;faqs\u0026#34; }} {{ range site.RegularPages | complement $blog $faqs }} \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt; {{ end }} Although the example above demonstrates the complement function, you could use the where function as well:\n{{ range where site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;not in\u0026#34; (slice \u0026#34;blog\u0026#34; \u0026#34;faqs\u0026#34;) }} \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt; {{ end }} In this example we use the complement function to remove stop words from a sentence:\n{{ $text := \u0026#34;The quick brown fox jumps over the lazy dog\u0026#34; }} {{ $stopWords := slice \u0026#34;a\u0026#34; \u0026#34;an\u0026#34; \u0026#34;in\u0026#34; \u0026#34;over\u0026#34; \u0026#34;the\u0026#34; \u0026#34;under\u0026#34; }} {{ $filtered := split $text \u0026#34; \u0026#34; | complement $stopWords }} {{ delimit $filtered \u0026#34; \u0026#34; }} → The quick brown fox jumps lazy dog 另请参阅 # append group intersect symdiff union "},{"id":177,"href":"/hugo/contentmanagement/multilingual/","title":"多语言模式","section":"内容管理","content":" Multilingual Mode - 多语言模式 # https://gohugo.io/content-management/multilingual/\n​\tHugo支持创建并排展示多种语言的站点。\n​\t您应该在站点配置中的languages部分定义可用的语言。\n​\t另请参阅Hugo多语言第一部分：内容翻译。\n配置语言 # ​\t以下是多语言Hugo项目的站点配置示例：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml copyright: Everything is mine defaultContentLanguage: en languages: ar: languagedirection: rtl title: مدونتي weight: 2 en: params: linkedin: https://linkedin.com/whoever title: My blog weight: 1 fr: params: linkedin: https://linkedin.com/fr/whoever navigation: help: Aide title: Mon blogue weight: 2 pt-pt: title: O meu blog weight: 3 params: navigation: help: Help ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml copyright = 'Everything is mine' defaultContentLanguage = 'en' [languages] [languages.ar] languagedirection = 'rtl' title = 'مدونتي' weight = 2 [languages.en] title = 'My blog' weight = 1 [languages.en.params] linkedin = 'https://linkedin.com/whoever' [languages.fr] title = 'Mon blogue' weight = 2 [languages.fr.params] linkedin = 'https://linkedin.com/fr/whoever' [languages.fr.params.navigation] help = 'Aide' [languages.pt-pt] title = 'O meu blog' weight = 3 [params] [params.navigation] help = 'Help' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;copyright\u0026quot;: \u0026quot;Everything is mine\u0026quot;, \u0026quot;defaultContentLanguage\u0026quot;: \u0026quot;en\u0026quot;, \u0026quot;languages\u0026quot;: { \u0026quot;ar\u0026quot;: { \u0026quot;languagedirection\u0026quot;: \u0026quot;rtl\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;مدونتي\u0026quot;, \u0026quot;weight\u0026quot;: 2 }, \u0026quot;en\u0026quot;: { \u0026quot;params\u0026quot;: { \u0026quot;linkedin\u0026quot;: \u0026quot;https://linkedin.com/whoever\u0026quot; }, \u0026quot;title\u0026quot;: \u0026quot;My blog\u0026quot;, \u0026quot;weight\u0026quot;: 1 }, \u0026quot;fr\u0026quot;: { \u0026quot;params\u0026quot;: { \u0026quot;linkedin\u0026quot;: \u0026quot;https://linkedin.com/fr/whoever\u0026quot;, \u0026quot;navigation\u0026quot;: { \u0026quot;help\u0026quot;: \u0026quot;Aide\u0026quot; } }, \u0026quot;title\u0026quot;: \u0026quot;Mon blogue\u0026quot;, \u0026quot;weight\u0026quot;: 2 }, \u0026quot;pt-pt\u0026quot;: { \u0026quot;title\u0026quot;: \u0026quot;O meu blog\u0026quot;, \u0026quot;weight\u0026quot;: 3 } }, \u0026quot;params\u0026quot;: { \u0026quot;navigation\u0026quot;: { \u0026quot;help\u0026quot;: \u0026quot;Help\u0026quot; } } } ``` ​\t任何未在languages块中定义的内容都将回退到该键的全局值（例如英语en语言的copyright）。这也适用于params，如上面的示例所示：您将在法语中获得Aide的值，并在所有没有设置此参数的语言中获得Help。\n​\t使用上述配置，所有内容、站点地图、RSS源、分页和分类页将在英语（默认内容语言）下的/目录下渲染，然后在法语的/fr目录下渲染。\n​\t在单页模板中使用前置元数据 Params时，忽略翻译的键中的params。\n​\tdefaultContentLanguage设置项目的默认语言。如果未设置，则默认语言为en。\n​\t如果需要将默认语言渲染在其自己的语言代码（/en）下，像其他语言一样，请设置defaultContentLanguageInSubdir：true。\n​\t只有明显的非全局选项可以按语言覆盖。全局选项的示例包括baseURL、buildDrafts等。\n请注意：使用小写语言代码，即使是使用区域性语言（例如使用pt-pt而不是pt-PT）。当前Hugo语言内部将语言代码转换为小写字母，这可能会与未转换为小写字母的defaultContentLanguage等设置发生冲突。请在Hugo存储库问题跟踪器中跟踪此问题的演变。\n禁用语言 # ​\t您可以禁用一个或多个语言。这在进行新翻译时非常有用。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml disableLanguages: - fr - ja ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml disableLanguages = ['fr', 'ja'] ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;disableLanguages\u0026quot;: [ \u0026quot;fr\u0026quot;, \u0026quot;ja\u0026quot; ] } ``` ​\t请注意，您不能禁用默认内容语言。\n​\t我们将其保留为一个独立的设置，以便更容易通过操作系统环境进行设置：\nHUGO_DISABLELANGUAGES=\u0026#34;fr ja\u0026#34; hugo ​\t如果您已经在config.toml中有禁用的语言列表，可以像这样在开发环境中启用它们：\nHUGO_DISABLELANGUAGES=\u0026#34; \u0026#34; hugo server 配置多语言Multihost # ​\t从Hugo 0.31开始，我们支持多语言multihost配置。详见此问题的说明。\n​\t这意味着现在可以为每种language配置一个baseURL：\n如果在language级别上设置了 baseURL，则所有语言都必须具有一个，且它们必须全部不同。\n例如：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml languages: en: baseURL: https://example.com languageName: English title: In English weight: 2 fr: baseURL: https://example.fr languageName: Français title: En Français weight: 1 ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [languages] [languages.en] baseURL = 'https://example.com' languageName = 'English' title = 'In English' weight = 2 [languages.fr] baseURL = 'https://example.fr' languageName = 'Français' title = 'En Français' weight = 1 ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;languages\u0026quot;: { \u0026quot;en\u0026quot;: { \u0026quot;baseURL\u0026quot;: \u0026quot;https://example.com\u0026quot;, \u0026quot;languageName\u0026quot;: \u0026quot;English\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;In English\u0026quot;, \u0026quot;weight\u0026quot;: 2 }, \u0026quot;fr\u0026quot;: { \u0026quot;baseURL\u0026quot;: \u0026quot;https://example.fr\u0026quot;, \u0026quot;languageName\u0026quot;: \u0026quot;Français\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;En Français\u0026quot;, \u0026quot;weight\u0026quot;: 1 } } } ``` ​\t有了上面的配置，这两个站点将生成到带有自己根目录的 public 中：\npublic ├── en └── fr ​\t所有的URL（例如.Permalink等）都将从该根目录生成。因此，上面的英文主页的.Permalink将设置为https://example.com/。\n​\t当您运行hugo server时，我们将启动多个HTTP服务器。您通常会在控制台中看到以下内容：\nWeb Server is available at 127.0.0.1:1313 (bind address 127.0.0.1) Web Server is available at 127.0.0.1:1314 (bind address 127.0.0.1) Press Ctrl+C to stop ​\t实时重新加载和在服务器之间使用--navigateToChanged会按预期工作。\n翻译您的内容 # ​\t有两种管理内容翻译的方式。两种方式都可以确保每个页面都被分配了一种语言，并与其对应的翻译链接在一起。\n按文件名翻译 # ​\t考虑以下示例：\n/content/about.en.md /content/about.fr.md ​\t第一个文件分配了英语语言，并链接到第二个文件。第二个文件分配了法语语言，并链接到第一个文件。\n​\t它们的语言是根据文件名后缀添加的语言代码分配的。\n​\t通过具有相同的路径和基本文件名，将内容部分链接在一起作为翻译页面。\n​\t如果文件没有语言代码，它将被分配为默认语言。\n按内容目录翻译 # ​\t该系统使用不同的内容目录来处理每种语言。每种语言的内容目录都是使用 contentDir 参数设置的。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml languages: en: contentDir: content/english languageName: English weight: 10 fr: contentDir: content/french languageName: Français weight: 20 ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [languages] [languages.en] contentDir = 'content/english' languageName = 'English' weight = 10 [languages.fr] contentDir = 'content/french' languageName = 'Français' weight = 20 ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;languages\u0026quot;: { \u0026quot;en\u0026quot;: { \u0026quot;contentDir\u0026quot;: \u0026quot;content/english\u0026quot;, \u0026quot;languageName\u0026quot;: \u0026quot;English\u0026quot;, \u0026quot;weight\u0026quot;: 10 }, \u0026quot;fr\u0026quot;: { \u0026quot;contentDir\u0026quot;: \u0026quot;content/french\u0026quot;, \u0026quot;languageName\u0026quot;: \u0026quot;Français\u0026quot;, \u0026quot;weight\u0026quot;: 20 } } } ``` ​\tcontentDir 的值可以是任何有效的路径，甚至是绝对路径引用。唯一的限制是内容目录不能重叠。\n​\t考虑以下示例与上述配置一起使用：\n/content/english/about.md /content/french/about.md ​\t第一个文件被分配为英语，并与第二个文件链接。第二个文件被分配为法语，并与第一个文件链接。\n​\t它们的语言是根据它们放置所在的内容目录分配的。\n​\t通过具有相同的路径和基名（相对于其语言内容目录），内容片段将作为翻译页面相互链接。\n绕过默认链接 # ​\t任何在前置元数据中设置相同翻译键（translationKey）的页面将被链接为翻译页面，而不考虑基名或位置。\n​\t考虑以下示例：\n/content/about-us.en.md /content/om.nn.md /content/presentation/a-propos.fr.md === \u0026ldquo;yaml\u0026rdquo;\n``` yaml translationKey: about ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml translationKey = 'about' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;translationKey\u0026quot;: \u0026quot;about\u0026quot; } ``` ​\t通过在所有三个页面的前置元数据参数中设置翻译键（translationKey）为 about，它们将被链接为翻译页面。\n本地化永久链接 # ​\t因为路径和文件名用于处理链接，所有翻译页面将共享相同的URL（除了语言子目录）。\n​\t为了本地化URL：\n对于常规页面，在前置元数据中设置slug或url 对于章节页面，在前置元数据中设置url ​\t例如，法语翻译可以有自己本地化的slug。\ncontent/about.fr.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- slug: a-propos title: A Propos --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ slug = 'a-propos' title = 'A Propos' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;slug\u0026quot;: \u0026quot;a-propos\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;A Propos\u0026quot; } ``` At render, Hugo will build both /about/ and /fr/a-propos/ without affecting the translation link.\n​\t在渲染时，Hugo将同时构建/about/和/fr/a-propos/，而不影响翻译链接。\n页面 Bundles # To avoid the burden of having to duplicate files, each Page Bundle inherits the resources of its linked translated pages’ bundles except for the content files (Markdown files, HTML files etc…).\n为了避免重复文件的负担，每个页面包继承其链接的翻译页面包的资源，除了内容文件（Markdown文件，HTML文件等）。\nTherefore, from within a template, the page will have access to the files from all linked pages’ bundles.\n因此，在模板内，页面将可以访问所有链接页面包的文件。\nIf, across the linked bundles, two or more files share the same basename, only one will be included and chosen as follows:\n如果在链接的包中，两个或多个文件具有相同的基名，则只包括一个，并按以下方式选择：\nFile from current language bundle, if present. 当前语言包中的文件（如果存在）。 First file found across bundles by order of language Weight. 按语言权重顺序在所有包中找到的第一个文件。 Page Bundle resources follow the same language assignment logic as content files, both by filename (image.jpg, image.fr.jpg) and by directory (english/about/header.jpg, french/about/header.jpg).\n页面包资源遵循与内容文件相同的语言分配逻辑，包括文件名（image.jpg，image.fr.jpg）和目录（english/about/header.jpg，french/about/header.jpg）。\n引用翻译内容 # To create a list of links to translated content, use a template similar to the following:\n要创建链接到翻译内容的链接列表，请使用类似以下的模板：\nlayouts/partials/i18nlist.html\n{{ if .IsTranslated }} \u0026lt;h4\u0026gt;{{ i18n \u0026#34;translations\u0026#34; }}\u0026lt;/h4\u0026gt; \u0026lt;ul\u0026gt; {{ range .Translations }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Lang }}: {{ .Title }}{{ if .IsPage }} ({{ i18n \u0026#34;wordCount\u0026#34; . }}){{ end }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} The above can be put in a partial (i.e., inside layouts/partials/) and included in any template, whether a single content page or the homepage. It will not print anything if there are no translations for a given page.\n上述内容可以放在partial中（即layouts/partials/文件夹中），并包含在任何模板中，无论是单个内容页面还是主页。如果没有给定页面的翻译，它将不会打印任何内容。\nThe above also uses the i18n function described in the next section.\n上述内容还使用了下一节中描述的i18n函数。\n列出所有可用语言 # .AllTranslations on a Page can be used to list all translations, including the page itself. On the home page it can be used to build a language navigator:\n在页面上使用.AllTranslations可以列出所有翻译，包括页面本身。在主页上，它可用于构建语言导航器：\nlayouts/partials/allLanguages.html\n\u0026lt;ul\u0026gt; {{ range $.Site.Home.AllTranslations }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Language.LanguageName }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 字符串翻译 # Hugo uses go-i18n to support string translations. See the project’s source repository to find tools that will help you manage your translation workflows.\nHugo使用go-i18n支持字符串翻译。请参见该项目的源存储库，以查找可帮助您管理翻译工作流程的工具。\nTranslations are collected from the themes/\u0026lt;THEME\u0026gt;/i18n/ folder (built into the theme), as well as translations present in i18n/ at the root of your project. In the i18n, the translations will be merged and take precedence over what is in the theme folder. Language files should be named according to RFC 5646 with names such as en-US.toml, fr.toml, etc.\n从themes//i18n/文件夹（内置于主题中）以及位于项目根目录的i18n/文件夹中收集翻译。在i18n中，翻译将合并并优先于主题文件夹中的内容。语言文件应根据RFC 5646命名，例如en-US.toml、fr.toml等。\nArtificial languages with private use subtags as defined in RFC 5646 § 2.2.7 are also supported. You may omit the art-x- prefix for brevity. For example:\nRFC 5646§2.2.7中定义的带有私有使用子标记的人工语言也受支持。为简洁起见，您可以省略art-x-前缀。例如：\nart-x-hugolang hugolang Private use subtags must not exceed 8 alphanumeric characters.\n私有使用子标记不得超过8个字母数字字符。\n查询基本翻译 # From within your templates, use the i18n function like this:\n在您的模板中，可以像这样使用i18n函数：\n{{ i18n \u0026#34;home\u0026#34; }} The function will search for the \u0026quot;home\u0026quot; id:\n该函数将搜索\u0026quot;home\u0026quot;id：\ni18n/en-US.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml home: other: Home ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [home] other = 'Home' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;home\u0026quot;: { \u0026quot;other\u0026quot;: \u0026quot;Home\u0026quot; } } ``` The result will be\n结果将是\nHome 查询带有变量的灵活翻译 # Often you will want to use the page variables in the translation strings. To do so, pass the . context when calling i18n:\n通常，您会想在翻译字符串中使用页面变量。要这样做，请在调用i18n时传递上下文。\n{{ i18n \u0026#34;wordCount\u0026#34; . }} The function will pass the . context to the \u0026quot;wordCount\u0026quot; id:\n该函数将把上下文传递给\u0026quot;wordCount\u0026quot;id：\ni18n/en-US.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml wordCount: other: This article has {{ .WordCount }} words. ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [wordCount] other = 'This article has {{ .WordCount }} words.' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;wordCount\u0026quot;: { \u0026quot;other\u0026quot;: \u0026quot;This article has {{ .WordCount }} words.\u0026quot; } } ``` Assume .WordCount in the context has value is 101. The result will be:\n假设上下文中的 .WordCount 值为 101。结果将是：\nThis article has 101 words. 查询单数/复数翻译 # In other to meet singular/plural requirement, you must pass a dictionary (map) with a numeric .Count property to the i18n function. The below example uses .ReadingTime variable which has a built-in .Count property.\n为了满足单数/复数要求，您必须将具有数字 .Count 属性的字典（map）传递给 i18n 函数。下面的示例使用内置的 .ReadingTime 变量，它具有一个 .Count 属性。\n{{ i18n \u0026#34;readingTime\u0026#34; .ReadingTime }} The function will read .Count from .ReadingTime and evaluate whether the number is singular (one) or plural (other). After that, it will pass to readingTime id in i18n/en-US.toml file:\n函数将从 .ReadingTime 中读取 .Count 并评估数字是单数（one）还是复数（other）。之后，它将传递给 i18n/en-US.toml 文件中的 readingTime id：\ni18n/en-US.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml readingTime: one: One minute to read other: '{{ .Count }} minutes to read' ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [readingTime] one = 'One minute to read' other = '{{ .Count }} minutes to read' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;readingTime\u0026quot;: { \u0026quot;one\u0026quot;: \u0026quot;One minute to read\u0026quot;, \u0026quot;other\u0026quot;: \u0026quot;{{ .Count }} minutes to read\u0026quot; } } ``` Assuming .ReadingTime.Count in the context has value is 525600. The result will be:\n假设上下文中的 .ReadingTime.Count 值为 525600。结果将是：\n525600 minutes to read If .ReadingTime.Count in the context has value is 1. The result is:\n如果上下文中的 .ReadingTime.Count 值为1。结果是：\nOne minute to read In case you need to pass a custom data: ((dict \u0026quot;Count\u0026quot; numeric_value_only) is minimum requirement)\n如果您需要传递自定义数据：((dict \u0026ldquo;Count\u0026rdquo; numeric_value_only) 是最小要求)\n{{ i18n \u0026#34;readingTime\u0026#34; (dict \u0026#34;Count\u0026#34; 25 \u0026#34;FirstArgument\u0026#34; true \u0026#34;SecondArgument\u0026#34; false \u0026#34;Etc\u0026#34; \u0026#34;so on, so far\u0026#34;) }} 本地化 # The following localization examples assume your site’s primary language is English, with translations to French and German.\n以下本地化示例假定您站点的主要语言为英语，并提供了法语和德语的翻译。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml defaultContentLanguage: en languages: de: contentDir: content/de languageName: Deutsch weight: 3 en: contentDir: content/en languageName: English weight: 1 fr: contentDir: content/fr languageName: Français weight: 2 ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml defaultContentLanguage = 'en' [languages] [languages.de] contentDir = 'content/de' languageName = 'Deutsch' weight = 3 [languages.en] contentDir = 'content/en' languageName = 'English' weight = 1 [languages.fr] contentDir = 'content/fr' languageName = 'Français' weight = 2 ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;defaultContentLanguage\u0026quot;: \u0026quot;en\u0026quot;, \u0026quot;languages\u0026quot;: { \u0026quot;de\u0026quot;: { \u0026quot;contentDir\u0026quot;: \u0026quot;content/de\u0026quot;, \u0026quot;languageName\u0026quot;: \u0026quot;Deutsch\u0026quot;, \u0026quot;weight\u0026quot;: 3 }, \u0026quot;en\u0026quot;: { \u0026quot;contentDir\u0026quot;: \u0026quot;content/en\u0026quot;, \u0026quot;languageName\u0026quot;: \u0026quot;English\u0026quot;, \u0026quot;weight\u0026quot;: 1 }, \u0026quot;fr\u0026quot;: { \u0026quot;contentDir\u0026quot;: \u0026quot;content/fr\u0026quot;, \u0026quot;languageName\u0026quot;: \u0026quot;Français\u0026quot;, \u0026quot;weight\u0026quot;: 2 } } } ``` 日期 # With this 前置元数据:\n有了这个前置元数据：\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml date: 2021-11-03T12:34:56+01:00 ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml date = 2021-11-03T12:34:56+01:00 ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;date\u0026quot;: \u0026quot;2021-11-03T12:34:56+01:00\u0026quot; } ``` And this template code:\n以及这个模板代码：\n{{ .Date | time.Format \u0026#34;:date_full\u0026#34; }} The rendered page displays:\n渲染的页面显示：\nLanguage Value English Wednesday, November 3, 2021 Français mercredi 3 novembre 2021 Deutsch Mittwoch, 3. November 2021 See time.Format for details.\n​\t详细信息请参见time.Format。\n货币 Currency # With this template code:\n使用此模板代码：\n{{ 512.5032 | lang.FormatCurrency 2 \u0026#34;USD\u0026#34; }} The rendered page displays:\n渲染的页面显示：\nLanguage Value English $512.50 Français 512,50 $US Deutsch 512,50 $ See lang.FormatCurrency and lang.FormatAccounting for details.\n数字 # With this template code:\n使用此模板代码：\n{{ 512.5032 | lang.FormatNumber 2 }} The rendered page displays:\n渲染的页面显示：\nLanguage Value English 512.50 Français 512,50 Deutsch 512,50 See lang.FormatNumber and lang.FormatNumberCustom for details.\n请参考lang.FormatNumber和lang.FormatNumberCustom了解详情。\n百分数 # With this template code:\n使用此模板代码：\n{{ 512.5032 | lang.FormatPercent 2 }} ---\u0026gt; 512.50% The rendered page displays:\n渲染的页面显示：\nLanguage Value English 512.50% Français 512,50 % Deutsch 512,50 % See lang.FormatPercent for details.\n请参考lang.FormatPercent了解详情。\n菜单 # Localization of menu entries depends on the how you define them:\n菜单项的本地化取决于定义它们的方式：\nWhen you define menu entries automatically using the section pages menu, you must use translation tables to localize each entry. 当您使用部分页面菜单自动定义菜单项时，您必须使用翻译表来本地化每个菜单项。 When you define menu entries in 前置元数据, they are already localized based on the 前置元数据 itself. If the 前置元数据 values are insufficient, use translation tables to localize each entry. 当您在前置matter中定义菜单项时，它们已经基于前置matter本身进行了本地化。如果前置matter值不足，请使用翻译表来本地化每个菜单项。 When you define menu entries in site configuration, you can (a) use translation tables, or (b) create language-specific menu entries under each language key. 当您在站点配置中定义菜单项时，您可以（a）使用翻译表，或（b）在每个语言键下创建特定于语言的菜单项。 使用翻译表 # When rendering the text that appears in menu each entry, the example menu template does this:\n在渲染出现在菜单中的文本时，示例菜单模板执行以下操作：\n{{ or (T .Identifier) .Name | safeHTML }} It queries the translation table for the current language using the menu entry’s identifier and returns the translated string. If the translation table does not exist, or if the identifier key is not present in the translation table, it falls back to name.\n它使用菜单项的标识符查询当前语言的翻译表，并返回已翻译的字符串。如果翻译表不存在，或者标识符键不在翻译表中，则回退到名称。\nThe identifier depends on how you define menu entries:\n标识符取决于您如何定义菜单项：\nIf you define the menu entry automatically using the section pages menu, the identifier is the page’s .Section. 如果您使用部分页面菜单自动定义菜单项，则标识符是页面的.Section。 If you define the menu entry in site configuration or in 前置元数据, set the identifier property to the desired value. 如果您在站点配置或前置matter中定义菜单项，请将标识符属性设置为所需值。 For example, if you define menu entries in site configuration:\n例如，如果您在站点配置中定义菜单项：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml menu: main: - identifier: products name: Products pageRef: /products weight: 10 - identifier: services name: Services pageRef: /services weight: 20 ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [menu] [[menu.main]] identifier = 'products' name = 'Products' pageRef = '/products' weight = 10 [[menu.main]] identifier = 'services' name = 'Services' pageRef = '/services' weight = 20 ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;menu\u0026quot;: { \u0026quot;main\u0026quot;: [ { \u0026quot;identifier\u0026quot;: \u0026quot;products\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Products\u0026quot;, \u0026quot;pageRef\u0026quot;: \u0026quot;/products\u0026quot;, \u0026quot;weight\u0026quot;: 10 }, { \u0026quot;identifier\u0026quot;: \u0026quot;services\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Services\u0026quot;, \u0026quot;pageRef\u0026quot;: \u0026quot;/services\u0026quot;, \u0026quot;weight\u0026quot;: 20 } ] } } ``` Create corresponding entries in the translation tables:\n创建相应的翻译表条目：\ni18n/de.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml products: Produkte services: Leistungen ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml products = 'Produkte' services = 'Leistungen' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;products\u0026quot;: \u0026quot;Produkte\u0026quot;, \u0026quot;services\u0026quot;: \u0026quot;Leistungen\u0026quot; } ``` 创建语言特定的菜单条目 # 例如：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml languages: de: languageCode: de-DE languageName: Deutsch menu: main: - name: Produkte pageRef: /products weight: 10 - name: Leistungen pageRef: /services weight: 20 weight: 1 en: languageCode: en-US languageName: English menu: main: - name: Products pageRef: /products weight: 10 - name: Services pageRef: /services weight: 20 weight: 2 ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [languages] [languages.de] languageCode = 'de-DE' languageName = 'Deutsch' weight = 1 [languages.de.menu] [[languages.de.menu.main]] name = 'Produkte' pageRef = '/products' weight = 10 [[languages.de.menu.main]] name = 'Leistungen' pageRef = '/services' weight = 20 [languages.en] languageCode = 'en-US' languageName = 'English' weight = 2 [languages.en.menu] [[languages.en.menu.main]] name = 'Products' pageRef = '/products' weight = 10 [[languages.en.menu.main]] name = 'Services' pageRef = '/services' weight = 20 ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;languages\u0026quot;: { \u0026quot;de\u0026quot;: { \u0026quot;languageCode\u0026quot;: \u0026quot;de-DE\u0026quot;, \u0026quot;languageName\u0026quot;: \u0026quot;Deutsch\u0026quot;, \u0026quot;menu\u0026quot;: { \u0026quot;main\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;Produkte\u0026quot;, \u0026quot;pageRef\u0026quot;: \u0026quot;/products\u0026quot;, \u0026quot;weight\u0026quot;: 10 }, { \u0026quot;name\u0026quot;: \u0026quot;Leistungen\u0026quot;, \u0026quot;pageRef\u0026quot;: \u0026quot;/services\u0026quot;, \u0026quot;weight\u0026quot;: 20 } ] }, \u0026quot;weight\u0026quot;: 1 }, \u0026quot;en\u0026quot;: { \u0026quot;languageCode\u0026quot;: \u0026quot;en-US\u0026quot;, \u0026quot;languageName\u0026quot;: \u0026quot;English\u0026quot;, \u0026quot;menu\u0026quot;: { \u0026quot;main\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;Products\u0026quot;, \u0026quot;pageRef\u0026quot;: \u0026quot;/products\u0026quot;, \u0026quot;weight\u0026quot;: 10 }, { \u0026quot;name\u0026quot;: \u0026quot;Services\u0026quot;, \u0026quot;pageRef\u0026quot;: \u0026quot;/services\u0026quot;, \u0026quot;weight\u0026quot;: 20 } ] }, \u0026quot;weight\u0026quot;: 2 } } } ``` For a simple menu with two languages, these menu entries are easy to create and maintain. For a larger menu, or with more than two languages, using translation tables as described above is preferable.\n对于只包含两种语言的简单菜单，这些菜单条目易于创建和维护。对于更大的菜单或包含两种以上语言的菜单，最好使用上述描述的翻译表。\n缺少翻译 # If a string does not have a translation for the current language, Hugo will use the value from the default language. If no default value is set, an empty string will be shown.\n如果一个字符串在当前语言下没有翻译，Hugo 将使用默认语言的值。如果没有设置默认值，则显示为空字符串。\nWhile translating a Hugo website, it can be handy to have a visual indicator of missing translations. The enableMissingTranslationPlaceholders configuration option will flag all untranslated strings with the placeholder [i18n] identifier, where identifier is the id of the missing translation.\n在翻译 Hugo 站点时，有一个缺少翻译的可视化指示器会很方便。启用 enableMissingTranslationPlaceholders 配置选项会使用 [i18n] 占位符标记所有未翻译的字符串，其中 identifier 是缺失翻译的 id。\nHugo will generate your website with these missing translation placeholders. It might not be suitable for production environments.\nHugo 将生成带有这些缺失翻译占位符的站点。这可能不适合生产环境。\nFor merging of content from other languages (i.e. missing content translations), see lang.Merge.\n要合并其他语言的内容（即缺失的内容翻译），请参阅 lang.Merge。\nTo track down missing translation strings, run Hugo with the --printI18nWarnings flag:\n要追踪缺失的翻译字符串，请使用 \u0026ndash;printI18nWarnings 标志运行 Hugo：\nhugo --printI18nWarnings | grep i18n i18n|MISSING_TRANSLATION|en|wordCount 多语言主题支持 # To support Multilingual mode in your themes, some considerations must be taken for the URLs in the templates. If there is more than one language, URLs must meet the following criteria:\n要在主题中支持多语言模式，必须在模板中考虑 URL。如果有多种语言，则 URL 必须符合以下标准：\nCome from the built-in .Permalink or .RelPermalink 来自内置的 .Permalink 或 .RelPermalink Be constructed with the relLangURL template function or the absLangURL template function OR be prefixed with {{ .LanguagePrefix }} 使用 relLangURL 模板函数或 absLangURL 模板函数构造 URL，或在 URL 前加上 {{.LanguagePrefix}} If there is more than one language defined, the LanguagePrefix variable will equal /en (or whatever your CurrentLanguage is). If not enabled, it will be an empty string (and is therefore harmless for single-language Hugo websites).\n如果定义了多种语言，则 LanguagePrefix 变量将等于 /en（或您的 CurrentLanguage），如果未启用，则为空字符串（对于单语言 Hugo 站点是无害的）。\n使用 hugo new 生成多语言内容 # If you organize content with translations in the same directory:\n如果您将内容与翻译组织在同一个目录中：\nhugo new post/test.en.md hugo new post/test.de.md If you organize content with translations in different directories:\n如果您将翻译后的内容组织在不同的目录中：\nhugo new content/en/post/test.md hugo new content/de/post/test.md 另请参阅 # i18n absLangURL relLangURL uniq 0.65.0: Hugo Reloaded! "},{"id":178,"href":"/hugo/functions/cond/","title":"cond","section":"函数","content":"将以下英文翻译为中文：\ncond # https://gohugo.io/functions/cond/\nReturn one of two arguments, depending on the value of a third argument.\n语法 # cond CONTROL VAR1 VAR2 cond returns VAR1 if CONTROL is true, or VAR2 if it is not.\nExample:\n{{ cond (eq (len $geese) 1) \u0026#34;goose\u0026#34; \u0026#34;geese\u0026#34; }} Would emit \u0026ldquo;goose\u0026rdquo; if the $geese array has exactly 1 item, or \u0026ldquo;geese\u0026rdquo; otherwise.\nWhenever you use a cond function, both variable expressions are always evaluated. This means that a usage like cond false (div 1 0) 27 will throw an error because div 1 0 will be evaluated even though the condition is false.\nIn other words, the cond function does not provide short-circuit evaluation and does not work like a normal ternary operator that will pass over the first expression if the condition returns false.\n"},{"id":179,"href":"/hugo/functions/countrunes/","title":"countrunes","section":"函数","content":"将以下英文翻译为中文：\ncountrunes # https://gohugo.io/functions/countrunes/\nDetermines the number of runes in a string excluding any whitespace.\n语法 # countrunes INPUT strings.CountRunes INPUT In contrast with countwords function, which counts every word in a string, the countrunes function determines the number of runes in the content and excludes any whitespace. This has specific utility if you are dealing with CJK-like languages.\n{{ \u0026#34;Hello, 世界\u0026#34; | countrunes }} \u0026lt;!-- outputs a content length of 8 runes. --\u0026gt; 另请参阅 # countwords strings.Count strings.RuneCount "},{"id":180,"href":"/hugo/functions/countwords/","title":"countwords","section":"函数","content":"将以下英文翻译为中文：\ncountwords # https://gohugo.io/functions/countwords/\nCounts the number of words in a string.\n语法 # countwords INPUT The template function works similar to the .WordCount page variable.\n{{ \u0026#34;Hugo is a static site generator.\u0026#34; | countwords }} \u0026lt;!-- outputs a content length of 6 words. --\u0026gt; 另请参阅 # countrunes strings.Count strings.RuneCount "},{"id":181,"href":"/hugo/templ/internaltemplates/","title":"内置模板","section":"模板","content":" Internal Templates - 内置模板 # https://gohugo.io/templates/internal/\n​\tHugo自带一组样板模板，覆盖了静态站点最常见的用例。\n​\t虽然以下内置模板类似于局部模板，但它们不遵循局部模板查找顺序。\nGoogle Analytics # ​\tHugo自带内置模板支持Google Analytics，包括Google Analytics 4 (GA4)和Universal Analytics。\n注意: Universal Analytics已被弃用。有关详情，请参阅Universal Analytics将被取消。\nConfigure Google Analytics # ​\t在配置文件中提供您的跟踪ID：\nGoogle Analytics 4 (gtag.js)\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml googleAnalytics: G-MEASUREMENT_ID ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml googleAnalytics = 'G-MEASUREMENT_ID' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;googleAnalytics\u0026quot;: \u0026quot;G-MEASUREMENT_ID\u0026quot; } ``` Google Universal Analytics (analytics.js)\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml googleAnalytics: UA-PROPERTY_ID ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml googleAnalytics = 'UA-PROPERTY_ID' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;googleAnalytics\u0026quot;: \u0026quot;UA-PROPERTY_ID\u0026quot; } ``` 使用Google Analytics模板 # ​\t然后，您可以包含Google Analytics内置模板：\n{{ template \u0026#34;_internal/google_analytics_async.html\u0026#34; . }} 注意: 异步模板不适用于Google Analytics 4。\n{{ template \u0026#34;_internal/google_analytics.html\u0026#34; . }} ​\t如果您想创建自己的模板，可以使用 {{ site.Config.Services.GoogleAnalytics.ID }} 访问已配置的ID。\nDisqus # ​\tHugo还带有用于Disqus评论的内置模板，这是一种流行的静态和动态站点评论系统。要有效地使用Disqus，您需要通过注册免费服务来获得Disqus \u0026ldquo;shortname\u0026rdquo;。\n配置Disqus # ​\t要使用Hugo的Disqus模板，您首先需要设置一个配置值：\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml disqusShortname: your-disqus-shortname ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml disqusShortname = 'your-disqus-shortname' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;disqusShortname\u0026quot;: \u0026quot;your-disqus-shortname\u0026quot; } ``` ​\t您还可以选择在给定篇的内容的前置元数据中设置以下值：\ndisqus_identifier disqus_title disqus_url 使用Disqus模板 # ​\t要添加Disqus，请在要显示评论的模板中包含以下行：\n{{ template \u0026#34;_internal/disqus.html\u0026#34; . }} ​\t还有一个暴露在配置中的 .Site.DisqusShortname 变量。\nDisqus评论的条件加载 # ​\t用户已经注意到，在运行Hugo Web服务器（即通过hugo server）时启用Disqus评论会导致在关联的Disqus帐户上创建不必要的讨论。\n​\t您可以创建以下 layouts/partials/disqus.html ：\nlayouts/partials/disqus.html\n\u0026lt;div id=\u0026#34;disqus_thread\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; (function() { // Don\u0026#39;t ever inject Disqus on localhost--it creates unwanted // discussions from \u0026#39;localhost:1313\u0026#39; on your Disqus account... if (window.location.hostname == \u0026#34;localhost\u0026#34;) return; var dsq = document.createElement(\u0026#39;script\u0026#39;); dsq.type = \u0026#39;text/javascript\u0026#39;; dsq.async = true; var disqus_shortname = \u0026#39;{{ .Site.DisqusShortname }}\u0026#39;; dsq.src = \u0026#39;//\u0026#39; + disqus_shortname + \u0026#39;.disqus.com/embed.js\u0026#39;; (document.getElementsByTagName(\u0026#39;head\u0026#39;)[0] || document.getElementsByTagName(\u0026#39;body\u0026#39;)[0]).appendChild(dsq); })(); \u0026lt;/script\u0026gt; \u0026lt;noscript\u0026gt;Please enable JavaScript to view the \u0026lt;a href=\u0026#34;https://disqus.com/?ref_noscript\u0026#34;\u0026gt;comments powered by Disqus.\u0026lt;/a\u0026gt;\u0026lt;/noscript\u0026gt; \u0026lt;a href=\u0026#34;https://disqus.com/\u0026#34; class=\u0026#34;dsq-brlink\u0026#34;\u0026gt;comments powered by \u0026lt;span class=\u0026#34;logo-disqus\u0026#34;\u0026gt;Disqus\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; ​\t当您在本地主机上运行时，if 语句将跳过Disqus评论注入的初始化。\n​\t然后可以按以下方式渲染自定义Disqus局部模板：\n{{ partial \u0026#34;disqus.html\u0026#34; . }} Open Graph # ​\tHugo提供了一个内置模板用于Open Graph协议，这是一种元数据，可使页面成为社交图中的丰富对象。此格式用于Facebook和其他一些站点。\n配置Open Graph # ​\tHugo的Open Graph模板使用配置变量和个别页面的front-matter的混合来配置。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml params: description: Text about my cool site images: - site-feature-image.jpg title: My cool site taxonomies: series: series ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [params] description = 'Text about my cool site' images = ['site-feature-image.jpg'] title = 'My cool site' [taxonomies] series = 'series' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;params\u0026quot;: { \u0026quot;description\u0026quot;: \u0026quot;Text about my cool site\u0026quot;, \u0026quot;images\u0026quot;: [ \u0026quot;site-feature-image.jpg\u0026quot; ], \u0026quot;title\u0026quot;: \u0026quot;My cool site\u0026quot; }, \u0026quot;taxonomies\u0026quot;: { \u0026quot;series\u0026quot;: \u0026quot;series\u0026quot; } } ``` content/blog/my-post.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml audio: [] date: \u0026quot;2006-01-02\u0026quot; description: Text about this post images: - post-cover.png series: [] tags: [] title: Post title videos: [] ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml audio = [] date = '2006-01-02' description = 'Text about this post' images = ['post-cover.png'] series = [] tags = [] title = 'Post title' videos = [] ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;audio\u0026quot;: [], \u0026quot;date\u0026quot;: \u0026quot;2006-01-02\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Text about this post\u0026quot;, \u0026quot;images\u0026quot;: [ \u0026quot;post-cover.png\u0026quot; ], \u0026quot;series\u0026quot;: [], \u0026quot;tags\u0026quot;: [], \u0026quot;title\u0026quot;: \u0026quot;Post title\u0026quot;, \u0026quot;videos\u0026quot;: [] } ``` ​\tHugo使用页面标题和描述作为标题和描述元数据。从 images 数组中取前6个URL用于图像元数据。如果使用页面 bundles，并且 images 数组为空或未定义，则使用与 *feature* 或 *cover*,*thumbnail* 匹配的文件名的图像用于图像元数据。\n​\t还可以设置各种可选的元数据：\n日期、发布日期和最后修改日期用于设置发布时间元数据（如果指定）。 audio and videos are URL arrays like images for the audio and video metadata tags, respectively. audio 和 video 是与音频和视频元数据标签对应的（与 images 类似） URL 数组。 该页面上前 6 个 tags 用于标签（tags）元数据。 series 分类法用于将相关的 \u0026ldquo;see also\u0026quot;页面放入同一系列。 ​\t如果使用 YouTube，这将生成一个类似于 \u0026lt;meta property=\u0026quot;og:video\u0026quot; content=\u0026quot;url\u0026quot;\u0026gt; 的 og:video 标签。在 YouTube 视频中使用 https://youtu.be/\u0026lt;id\u0026gt; 格式（例如：https://youtu.be/qtIqKaDlqXo）。\n使用 Open Graph 模板 # ​\t要添加 Open Graph 元数据，请在模板的 \u0026lt;head\u0026gt; 标签之间包含以下行：\n{{ template \u0026#34;_internal/opengraph.html\u0026#34; . }} Twitter Cards # ​\t一个内置的模板，用于为链接到您的站点的推文附加丰富的媒体的Twitter Cards元数据。\n配置 Twitter Cards # ​\tHugo 的 Twitter Card 模板使用一些配置变量和个别页面的 front-matter 进行混合配置。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml params: description: Text about my cool site images: - site-feature-image.jpg ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [params] description = 'Text about my cool site' images = ['site-feature-image.jpg'] ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;params\u0026quot;: { \u0026quot;description\u0026quot;: \u0026quot;Text about my cool site\u0026quot;, \u0026quot;images\u0026quot;: [ \u0026quot;site-feature-image.jpg\u0026quot; ] } } ``` content/blog/my-post.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml description: Text about this post images: - post-cover.png title: Post title ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml description = 'Text about this post' images = ['post-cover.png'] title = 'Post title' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;description\u0026quot;: \u0026quot;Text about this post\u0026quot;, \u0026quot;images\u0026quot;: [ \u0026quot;post-cover.png\u0026quot; ], \u0026quot;title\u0026quot;: \u0026quot;Post title\u0026quot; } ``` ​\t如果页面的前置元数据中没有指定 images，则 Hugo 会搜索具有 feature、cover 或 thumbnail 名称的 图像页面资源。如果找不到具有这些名称的图像资源，则使用在 站点配置 中定义的图像。如果根本找不到图像，则使用不带图像的 Twitter summary 卡，而不是 summary_large_image。\n​\tHugo 使用该页面标题和描述作为卡片的标题和描述字段。如果没有给出描述，则使用该页面摘要。\n​\t.Site.Social.twitter 变量从配置中暴露，作为 twitter:site 的值。\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml social: twitter: GoHugoIO ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [social] twitter = 'GoHugoIO' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;social\u0026quot;: { \u0026quot;twitter\u0026quot;: \u0026quot;GoHugoIO\u0026quot; } } ``` 注意：@ 将会自动为您添加。\n\u0026lt;meta name=\u0026#34;twitter:site\u0026#34; content=\u0026#34;@GoHugoIO\u0026#34;/\u0026gt; 使用 Twitter Cards 模板 # ​\t要添加 Twitter 卡片元数据，请在您的模板的 \u0026lt;head\u0026gt; 元素之后立即包含以下行：\n{{ template \u0026#34;_internal/twitter_cards.html\u0026#34; . }} 内置模板 # ​\t这些模板的代码位于这里。\n_internal/disqus.html _internal/google_analytics.html _internal/google_analytics_async.html _internal/opengraph.html _internal/pagination.html _internal/schema.html _internal/twitter_cards.html 另请参阅 # 评论 "},{"id":182,"href":"/hugo/functions/crypto_fnv32a/","title":"crypto.FNV32a","section":"函数","content":"将以下英文翻译为中文：\ncrypto.FNV32a # https://gohugo.io/functions/crypto.fnv32a/\nReturns the FNV (Fowler–Noll–Vo) 32 bit hash of a given string.\n语法 # crypto.FNV32a STRING This function calculates the 32 bit FNV1a hash of a given string according to the specification:\n{{ crypto.FNV32a \u0026#34;Hello world\u0026#34; }} → 1498229191 "},{"id":183,"href":"/hugo/templ/templatedebugging/","title":"模板调试","section":"模板","content":" Template Debugging - 模板调试 # https://gohugo.io/templates/template-debugging/\n​\t您可以使用 Go 模板的 printf 函数来调试 Hugo 模板。这些代码片段提供了一种快速简便的方式来可视化不同上下文中可用的变量。\n​\t以下是一些可以添加到您的模板中以回答一些常见问题的代码片段。\n​\t这些代码片段使用 Go 模板中的 printf 函数。这个函数是 Go 函数 fmt.Printf 的别名。\n此上下文中有哪些变量可用？ # ​\t您可以使用模板语法 $. 来获取该模板的顶层上下文。这将打印出.Site下的所有值。\n{{ printf \u0026#34;%#v\u0026#34; $.Site }} ​\t这将打印出.Permalink的值：\n{{ printf \u0026#34;%#v\u0026#34; .Permalink }} ​\t这将打印出当前上下文（.，也称为\u0026quot;the dot\u0026quot;）的所有变量的列表。\n{{ printf \u0026#34;%#v\u0026#34; . }} ​\t在开发 homepage 时，您正在遍历的页面之一是什么样子的？\n{{ range .Pages }} {{/* The context, \u0026#34;.\u0026#34;, is now each one of the pages as it goes through the loop */}} {{ printf \u0026#34;%#v\u0026#34; . }} {{ end }} 为什么我没有显示定义的变量？ # ​\t检查是否在 partial 函数中传递了变量：\n{{ partial \u0026#34;header.html\u0026#34; }} ​\t这个例子将渲染 header partial，但 header partial 将没有访问任何上下文变量的权限。您需要显式地传递变量。例如，注意添加了 \u0026ldquo;the dot\u0026rdquo;。\n{{ partial \u0026#34;header.html\u0026#34; . }} ​\t点（.）被认为是理解 Hugo 模板的基础。更多信息，请参见 Introduction to Hugo Templating。\n"},{"id":184,"href":"/hugo/functions/default/","title":"default","section":"函数","content":"将以下英文翻译为中文：\ndefault # https://gohugo.io/functions/default/\n​\tdefault函数用于当第一个值未被设置时，返回可以被返回的默认值。\n语法 # default DEFAULT INPUT ​\tdefault函数检查给定值是否被设置，如果没有被设置，则返回默认值。在此上下文中，“设置”意味着不同的事情，具体取决于数据类型：\n对于数字类型和时间类型，为非零值 对于字符串、数组、切片和映射，为非零长度 对于布尔或结构体值，为任何值 对于任何其他类型，为非nil值 ​\tdefault函数示例引用以下内容页面：\ncontent/posts/default-function-example.md\n--- title: Sane Defaults seo_title: date: 2017-02-18 font: oldparam: The default function helps make your templating DRYer. newparam: --- ​\tdefault可以以多种方式编写：\n{{ .Params.font | default \u0026#34;Roboto\u0026#34; }} {{ default \u0026#34;Roboto\u0026#34; .Params.font }} ​\t上述两个 default函数调用都返回Roboto。\n​\t但是，default值不需要像上面的例子一样被硬编码。default值可以是变量或直接使用点符号从前置元数据中提取：\n{{ $old := .Params.oldparam }} \u0026lt;p\u0026gt;{{ .Params.newparam | default $old }}\u0026lt;/p\u0026gt; 它将返回：\n\u0026lt;p\u0026gt;The default function helps make your templating DRYer.\u0026lt;/p\u0026gt; 然后使用点符号：\n\u0026lt;title\u0026gt;{{ .Params.seo_title | default .Title }}\u0026lt;/title\u0026gt; 它将返回：\n\u0026lt;title\u0026gt;Sane Defaults\u0026lt;/title\u0026gt; ​\t以下内容具有等效的返回值，但default更为简洁。这演示了default的实用性：\n使用if:\n\u0026lt;title\u0026gt;{{ if .Params.seo_title }}{{ .Params.seo_title }}{{ else }}{{ .Title }}{{ end }}\u0026lt;/title\u0026gt; =\u0026gt; Sane Defaults 使用with:\n\u0026lt;title\u0026gt;{{ with .Params.seo_title }}{{ . }}{{ else }}{{ .Title }}{{ end }}\u0026lt;/title\u0026gt; =\u0026gt; Sane Defaults "},{"id":185,"href":"/hugo/contentmanagement/syntaxhighlighting/","title":"语法高亮","section":"内容管理","content":" Syntax Highlighting- 语法高亮 # https://gohugo.io/content-management/syntax-highlighting/\n​\tHugo 使用来自 Chroma 的非常快速的语法高亮功能。\n​\tHugo 使用 Chroma作为其代码高亮器；它是使用 Go 构建的，非常非常快。\n配置语法高亮器 # ​\t参见 配置高亮。\n生成语法高亮器 CSS # ​\t如果在站点配置中运行时使用了 markup.highlight.noClasses=false，则需要一个样式表。\n​\t您可以使用Hugo生成样式表：\nhugo gen chromastyles --style=monokai \u0026gt; syntax.css ​\t运行hugo gen chromastyles -h以获取更多选项。请参阅https://xyproto.github.io/splash/docs/以获取可用样式的库。\n高亮简码 # ​\t通过内置的highlight shortcode进行高亮显示。它需要一个必需的参数来指定编程语言，并需要一个闭合shortcode。\n选项：\nlinenos：配置行号。有效值为 true、false、table 或 inline。如果在站点配置中配置了行号，则 false 将关闭行号。table 将提供可复制和粘贴的代码块。 hl_lines：列出要高亮显示的一组行号或行号范围。 linenostart=199：从 199 开始计数行号。 anchorlinenos：配置行号上的锚点。有效值为 true 或 false； lineanchors：为行号配置前缀。将添加后缀-，因此在选项lineanchors=prefix下将第1行链接到页面时，将向页面添加锚prefix-1。 hl_inline 在 \u0026lt;code\u0026gt;（内联 HTML 元素）标记内部进行高亮。有效值为 true 或 false。code 标记将获得一个名为 code-inline 的类。v0.101.0 中新增。 示例：Highlight Shortcode # \\{\\{\\\u0026lt; highlight go \u0026#34;linenos=table,hl_lines=8 15-17,linenostart=199\u0026#34; \\\u0026gt;\\}\\} // ... code \\{\\{\\\u0026lt; / highlight \\\u0026gt;\\}\\} 得到的结果如下：\n高亮 Hugo/GO 模板代码 # ​\t为了在页面上突出显示Hugo/GO模板代码，在双大括号的开头添加/*，在右大括号前添加*/。\n\\{\\{\\\u0026lt;/* myshortcode */\\\u0026gt;\\}\\} 得到的结果如下：\n\\{\\{\\\u0026lt; myshortcode \\\u0026gt;\\}\\} 高亮模板函数 # ​\t请参见Highlight。\nHighlighting in Code Fences # ​\t默认情况下，代码框中的高亮显示已启用。\n```go {linenos=table,hl_lines=[8,\u0026#34;15-17\u0026#34;],linenostart=199} // ... code ``` 得到的结果如下：\n​\t这些选项与高亮简码中的选项相同，包括 linenos=false，但请注意略有不同的 Markdown 属性语法。\nChroma 高亮显示语言列表 # ​\t以下是Chroma词法分析器及其别名的完整列表（这些别名是在highlight模板函数或在代码框中使用的标识符）：\nABAP\nabap\nABNF\nabnf\nActionScript\nas, actionscript\nActionScript 3\nas3, actionscript3\nAda\nada, ada95, ada2005\nAL\nal\nAngular2\nng2\nANTLR\nantlr\nApacheConf\napacheconf, aconf, apache\nAPL\napl\nAppleScript\napplescript\nArduino\narduino\nArmAsm\narmasm\nAwk\nawk, gawk, mawk, nawk\nBallerina\nballerina\nBash\nbash, sh, ksh, zsh, shell\nBashSession\nbash-session, console, shell-session\nBatchfile\nbat, batch, dosbatch, winbatch\nBibTeX\nbib, bibtex\nBicep\nbicep\nBlitzBasic\nblitzbasic, b3d, bplus\nBNF\nbnf\nBQN\nbqn\nBrainfuck\nbrainfuck, bf\nC\nc\nC#\ncsharp, c#\nC++\ncpp, c++\nCaddyfile\ncaddyfile, caddy\nCaddyfile Directives\ncaddyfile-directives, caddyfile-d, caddy-d\nCap\u0026rsquo;n Proto\ncapnp\nCassandra CQL\ncassandra, cql\nCeylon\nceylon\nCFEngine3\ncfengine3, cf3\ncfstatement\ncfs\nChaiScript\nchai, chaiscript\nChapel\nchapel, chpl\nCheetah\ncheetah, spitfire\nClojure\nclojure, clj\nCMake\ncmake\nCOBOL\ncobol\nCoffeeScript\ncoffee-script, coffeescript, coffee\nCommon Lisp\ncommon-lisp, cl, lisp\nCommon Lisp\ncommon-lisp, cl, lisp\nCoq\ncoq\nCrystal\ncr, crystal\nCSS\ncss\nCython\ncython, pyx, pyrex\nD\nd\nDart\ndart\nDiff\ndiff, udiff\nDjango/Jinja\ndjango, jinja\ndns\nzone, bind\nDocker\ndocker, dockerfile\nDTD\ndtd\nDylan\ndylan\nEBNF\nebnf\nElixir\nelixir, ex, exs\nElm\nelm\nEmacsLisp\nemacs, elisp, emacs-lisp\nEmacsLisp\nemacs, elisp, emacs-lisp\nErlang\nerlang\nFactor\nfactor\nFennel\nfennel, fnl\nFish\nfish, fishshell\nForth\nforth\nFortran\nfortran, f90\nFortranFixed\nfortranfixed\nFSharp\nfsharp\nGAS\ngas, asm\nGDScript\ngdscript, gd\nGenshi\ngenshi, kid, xml+genshi, xml+kid\nGenshi HTML\nhtml+genshi, html+kid\nGenshi Text\ngenshitext\nGherkin\ncucumber, Cucumber, gherkin, Gherkin\nGLSL\nglsl\nGnuplot\ngnuplot\nGo\ngo, golang\nGo HTML Template\ngo-html-template\nGo HTML Template\ngo-html-template\nGo Text Template\ngo-text-template\nGraphQL\ngraphql, graphqls, gql\nGroff\ngroff, nroff, man\nGroovy\ngroovy\nHandlebars\nhandlebars, hbs\nHaskell\nhaskell, hs\nHaxe\nhx, haxe, hxsl\nHCL\nhcl\nHexdump\nhexdump\nHLB\nhlb\nHLSL\nhlsl\nHTML\nhtml\nHTTP\nhttp\nHy\nhylang\nIdris\nidris, idr\nIgor\nigor, igorpro\nINI\nini, cfg, dosini\nIo\nio\nJ\nj\nJava\njava\nJavaScript\njs, javascript\nJSON\njson\nJulia\njulia, jl\nJungle\njungle\nKotlin\nkotlin\nLighttpd configuration file\nlighty, lighttpd\nLLVM\nllvm\nLua\nlua\nMakefile\nmake, makefile, mf, bsdmake\nMako\nmako\nmarkdown\nmd, mkd\nMason\nmason\nMathematica\nmathematica, mma, nb\nMatlab\nmatlab\nmcfunction\nmcfunction\nMeson\nmeson, meson.build\nMetal\nmetal\nMiniZinc\nminizinc, MZN, mzn\nMLIR\nmlir\nModula-2\nmodula2, m2\nMonkeyC\nmonkeyc\nMorrowindScript\nmorrowind, mwscript\nMyghty\nmyghty\nMySQL\nmysql, mariadb\nNASM\nnasm\nNewspeak\nnewspeak\nNginx configuration file\nnginx\nNim\nnim, nimrod\nNix\nnixos, nix\nObjective-C\nobjective-c, objectivec, obj-c, objc\nOCaml\nocaml\nOctave\noctave\nOnesEnterprise\nones, onesenterprise, 1S, 1S:Enterprise\nOpenEdge ABL\nopenedge, abl, progress, openedgeabl\nOpenSCAD\nopenscad\nOrg Mode\norg, orgmode\nPacmanConf\npacmanconf\nPerl\nperl, pl\nPHP\nphp, php3, php4, php5\nPHTML\nphtml\nPig\npig\nPkgConfig\npkgconfig\nPL/pgSQL\nplpgsql\nplaintext\ntext, plain, no-highlight\nPlutus Core\nplutus-core, plc\nPony\npony\nPostgreSQL SQL dialect\npostgresql, postgres\nPostScript\npostscript, postscr\nPOVRay\npov\nPowerQuery\npowerquery, pq\nPowerShell\npowershell, posh, ps1, psm1, psd1, pwsh\nProlog\nprolog\nPromQL\npromql\nproperties\njava-properties\nProtocol Buffer\nprotobuf, proto\nPSL\npsl\nPuppet\npuppet\nPython\npython, py, sage, python3, py3\nPython 2\npython2, py2\nQBasic\nqbasic, basic\nQML\nqml, qbs\nR\nsplus, s, r\nRacket\nracket, rkt\nRagel\nragel\nRaku\nperl6, pl6, raku\nreact\njsx, react\nReasonML\nreason, reasonml\nreg\nregistry\nreStructuredText\nrst, rest, restructuredtext\nRexx\nrexx, arexx\nRuby\nrb, ruby, duby\nRust\nrust, rs\nSAS\nsas\nSass\nsass\nScala\nscala\nScheme\nscheme, scm\nScilab\nscilab\nSCSS\nscss\nSed\nsed, gsed, ssed\nSieve\nsieve\nSmalltalk\nsmalltalk, squeak, st\nSmarty\nsmarty\nSnobol\nsnobol\nSolidity\nsol, solidity\nSPARQL\nsparql\nSQL\nsql\nSquidConf\nsquidconf, squid.conf, squid\nStandard ML\nsml\nstas\nStylus\nstylus\nSvelte\nsvelte\nSwift\nswift\nSYSTEMD\nsystemd\nsystemverilog\nsystemverilog, sv\nTableGen\ntablegen\nTASM\ntasm\nTcl\ntcl\nTcsh\ntcsh, csh\nTermcap\ntermcap\nTerminfo\nterminfo\nTerraform\nterraform, tf\nTeX\ntex, latex\nThrift\nthrift\nTOML\ntoml\nTradingView\ntradingview, tv\nTransact-SQL\ntsql, t-sql\nTuring\nturing\nTurtle\nturtle\nTwig\ntwig\nTypeScript\nts, tsx, typescript\nTypoScript\ntyposcript\nTypoScriptCssData\ntyposcriptcssdata\nTypoScriptHtmlData\ntyposcripthtmldata\nV\nv, vlang\nV shell\nvsh, vshell\nVala\nvala, vapi\nVB.net\nvb.net, vbnet\nverilog\nverilog, v\nVHDL\nvhdl\nVHS\nvhs, tape, cassette\nVimL\nvim\nvue\nvue, vuejs\nWDTE\nWhiley\nwhiley\nXML\nxml\nXorg\nxorg.conf\nYAML\nyaml\nYANG\nyang\nZed\nzed\nZig\nzig\n另请参阅 # highlight 配置标记 "},{"id":186,"href":"/hugo/functions/delimit/","title":"delimit","section":"函数","content":"将以下英文翻译为中文：\ndelimit # https://gohugo.io/functions/delimit/\nLoops through any array, slice, or map and returns a string of all the values separated by a delimiter.\n语法 # delimit COLLECTION DELIMITER [LAST] Delimit a slice:\n{{ $s := slice \u0026#34;b\u0026#34; \u0026#34;a\u0026#34; \u0026#34;c\u0026#34; }} {{ delimit $s \u0026#34;, \u0026#34; }} → \u0026#34;b, a, c\u0026#34; {{ delimit $s \u0026#34;, \u0026#34; \u0026#34; and \u0026#34;}} → \u0026#34;b, a and c\u0026#34; Delimit a map:\nThe delimit function sorts maps by key, returning the values.\n{{ $m := dict \u0026#34;b\u0026#34; 2 \u0026#34;a\u0026#34; 1 \u0026#34;c\u0026#34; 3 }} {{ delimit $m \u0026#34;, \u0026#34; }} → \u0026#34;1, 2, 3\u0026#34; {{ delimit $m \u0026#34;, \u0026#34; \u0026#34; and \u0026#34;}} → \u0026#34;1, 2 and 3\u0026#34; 另请参阅 # .Scratch after first range "},{"id":187,"href":"/hugo/functions/dict/","title":"dict","section":"函数","content":"将以下英文翻译为中文：\ndict # https://gohugo.io/functions/dict/\nCreates a dictionary from a list of key and value pairs.\n语法 # dict KEY VALUE [KEY VALUE]... dict is especially useful for passing more than one value to a partial template.\nNote that the key can be either a string or a string slice. The latter is useful to create a deeply nested structure, e.g.:\n{{ $m := dict (slice \u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34;) \u0026#34;value\u0026#34; }} Example: Using dict to pass multiple values to a partial # The partial below creates an SVG and expects fill, height and width from the caller:\nPartial definition # layouts/partials/svgs/external-links.svg\n\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34; fill=\u0026#34;{{ .fill }}\u0026#34; width=\u0026#34;{{ .width }}\u0026#34; height=\u0026#34;{{ .height }}\u0026#34; viewBox=\u0026#34;0 0 32 32\u0026#34; aria-label=\u0026#34;External Link\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M25.152 16.576v5.696q0 2.144-1.504 3.648t-3.648 1.504h-14.848q-2.144 0-3.648-1.504t-1.504-3.648v-14.848q0-2.112 1.504-3.616t3.648-1.536h12.576q0.224 0 0.384 0.16t0.16 0.416v1.152q0 0.256-0.16 0.416t-0.384 0.16h-12.576q-1.184 0-2.016 0.832t-0.864 2.016v14.848q0 1.184 0.864 2.016t2.016 0.864h14.848q1.184 0 2.016-0.864t0.832-2.016v-5.696q0-0.256 0.16-0.416t0.416-0.16h1.152q0.256 0 0.416 0.16t0.16 0.416zM32 1.152v9.12q0 0.48-0.352 0.8t-0.8 0.352-0.8-0.352l-3.136-3.136-11.648 11.648q-0.16 0.192-0.416 0.192t-0.384-0.192l-2.048-2.048q-0.192-0.16-0.192-0.384t0.192-0.416l11.648-11.648-3.136-3.136q-0.352-0.352-0.352-0.8t0.352-0.8 0.8-0.352h9.12q0.48 0 0.8 0.352t0.352 0.8z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; Partial call # The fill, height and width values can be stored in one object with dict and passed to the partial:\nlayouts/_default/list.html\n{{ partial \u0026#34;svgs/external-links.svg\u0026#34; (dict \u0026#34;fill\u0026#34; \u0026#34;#01589B\u0026#34; \u0026#34;width\u0026#34; 10 \u0026#34;height\u0026#34; 20 ) }} 另请参阅 # merge "},{"id":188,"href":"/hugo/functions/duration/","title":"duration","section":"函数","content":"将以下英文翻译为中文：\nduration # https://gohugo.io/functions/duration/\nReturns a time.Duration structure, using the given time unit and duration number.\n语法 # duration TIME_UNIT DURATION_NUMBER time.Duration converts a given number into a time.Duration structure so you can access its fields. E.g. you can perform time operations on the returned time.Duration value:\n{{ printf \u0026#34;There are %.0f seconds in one day.\u0026#34; (duration \u0026#34;hour\u0026#34; 24).Seconds }} \u0026lt;!-- Output: There are 86400 seconds in one day. --\u0026gt; Make your code simpler to understand by using a chained pipeline:\n{{ mul 7.75 60 | duration \u0026#34;minute\u0026#34; }} → 7h45m0s {{ mul 120 60 | mul 1000 | duration \u0026#34;millisecond\u0026#34; }} → 2h0m0s You have to specify a time unit for the number given to the function. Valid time units are:\nDuration Valid time units hours hour, h minutes minute, m seconds second, s milliseconds millisecond, ms microseconds microsecond, us, µs nanoseconds nanosecond, ns "},{"id":189,"href":"/hugo/functions/echoparam/","title":"echoParam","section":"函数","content":"将以下英文翻译为中文：\nechoParam # https://gohugo.io/functions/echoparam/\nPrints a parameter if it is set.\n语法 # echoParam DICTIONARY KEY {{ echoParam .Params \u0026#34;project_url\u0026#34; }} "},{"id":190,"href":"/hugo/functions/emojify/","title":"emojify","section":"函数","content":"将以下英文翻译为中文：\nemojify # https://gohugo.io/functions/emojify/\nRuns a string through the Emoji emoticons processor.\n语法 # emojify INPUT emojify runs a passed string through the Emoji emoticons processor.\nSee the Emoji cheat sheet for available emoticons.\nThe emojify function can be called in your templates but not directly in your content files by default. For emojis in content files, set enableEmoji to true in your site’s configuration. Then you can write emoji shorthand directly into your content files; e.g. I :heart: Hugo!:\nI ❤️ Hugo!\n另请参阅 # anchorize errorf and warnf float htmlEscape humanize "},{"id":191,"href":"/hugo/functions/eq/","title":"eq","section":"函数","content":"将以下英文翻译为中文：\neq # https://gohugo.io/functions/eq/\nReturns the boolean truth of arg1 == arg2.\n语法 # eq ARG1 ARG2 {{ if eq .Section \u0026#34;blog\u0026#34; }}current{{ end }} 另请参阅 # ge gt le lt ne "},{"id":192,"href":"/hugo/functions/errorfandwarnf/","title":"errorf 和 warnf","section":"函数","content":"将以下英文翻译为中文：\nerrorf and warnf # https://gohugo.io/functions/errorf/\nLog ERROR or WARNING from the templates.\n语法 # errorf FORMAT INPUT errorf or warnf will evaluate a format string, then output the result to the ERROR or WARNING log (and only once per error message to avoid flooding the log).\nAny ERROR will also cause the build to fail (the hugo command will exit -1).\nBoth functions return an empty string, so the messages are only printed to the console.\n{{ errorf \u0026#34;Failed to handle page %q\u0026#34; .Path }} {{ warnf \u0026#34;You should update the shortcodes in %q\u0026#34; .Path }} Note that errorf, erroridf, and warnf support all the formatting verbs of the fmt package.\nSuppress errors # Sometimes it may make sense to let the user suppress an ERROR and make the build succeed.\nYou can do this by using the erroridf function. This functions takes an error ID as the first argument.\n{{ erroridf \u0026#34;my-custom-error\u0026#34; \u0026#34;You should consider fixing this.\u0026#34; }} This will produce:\nERROR 2021/06/07 17:47:38 You should consider fixing this. If you feel that this should not be logged as an ERROR, you can ignore it by adding this to your site config: ignoreErrors = [\u0026#34;my-custom-error\u0026#34;] 另请参阅 # anchorize emojify float htmlEscape humanize "},{"id":193,"href":"/hugo/functions/fileexists/","title":"fileExists","section":"函数","content":"将以下英文翻译为中文：\nfileExists # https://gohugo.io/functions/fileexists/\nChecks for file or directory existence.\n语法 # os.FileExists PATH fileExists PATH The os.FileExists function attempts to resolve the path relative to the root of your project directory. If a matching file or directory is not found, it will attempt to resolve the path relative to the contentDir. A leading path separator (/) is optional.\nWith this directory structure:\ncontent/ ├── about.md ├── contact.md └── news/ ├── article-1.md └── article-2.md The function returns these values:\n{{ os.FileExists \u0026#34;content\u0026#34; }} --\u0026gt; true {{ os.FileExists \u0026#34;content/news\u0026#34; }} --\u0026gt; true {{ os.FileExists \u0026#34;content/news/article-1\u0026#34; }} --\u0026gt; false {{ os.FileExists \u0026#34;content/news/article-1.md\u0026#34; }} --\u0026gt; true {{ os.FileExists \u0026#34;news\u0026#34; }} --\u0026gt; true {{ os.FileExists \u0026#34;news/article-1\u0026#34; }} --\u0026gt; false {{ os.FileExists \u0026#34;news/article-1.md\u0026#34; }} --\u0026gt; true "},{"id":194,"href":"/hugo/functions/findre/","title":"findRE","section":"函数","content":"将以下英文翻译为中文：\nfindRE # https://gohugo.io/functions/findre/\nReturns a slice of strings that match the regular expression.\n语法 # findRE PATTERN INPUT [LIMIT] strings.FindRE PATTERN INPUT [LIMIT] By default, findRE finds all matches. You can limit the number of matches with an optional LIMIT parameter.\nWhen specifying the regular expression, use a raw string literal (backticks) instead of an interpreted string literal (double quotes) to simplify the syntax. With an interpreted string literal you must escape backslashes.\nThis function uses the RE2 regular expression library. See the RE2 syntax documentation for details. Note that the RE2 \\C escape sequence is not supported.\nThe RE2 syntax is a subset of that accepted by PCRE, roughly speaking, and with various caveats.\nThis example returns a slice of all second level headings (h2 elements) within the rendered .Content:\n{{ findRE `(?s)\u0026lt;h2.*?\u0026gt;.*?\u0026lt;/h2\u0026gt;` .Content }} The s flag causes . to match \\n as well, allowing us to find an h2 element that contains newlines.\nTo limit the number of matches to one:\n{{ findRE `(?s)\u0026lt;h2.*?\u0026gt;.*?\u0026lt;/h2\u0026gt;` .Content 1 }} You can write and test your regular expression using regex101.com. Be sure to select the Go flavor before you begin.\n另请参阅 # findRESubmatch replaceRE "},{"id":195,"href":"/hugo/functions/findresubmatch/","title":"findRESubmatch","section":"函数","content":"将以下英文翻译为中文：\nfindRESubmatch # https://gohugo.io/functions/findresubmatch/\nReturns a slice of all successive matches of the regular expression. Each element is a slice of strings holding the text of the leftmost match of the regular expression and the matches, if any, of its subexpressions.\n语法 # findRESubmatch PATTERN INPUT [LIMIT] strings.FindRESubmatch PATTERN INPUT [LIMIT] By default, findRESubmatch finds all matches. You can limit the number of matches with an optional LIMIT parameter. A return value of nil indicates no match.\nWhen specifying the regular expression, use a raw string literal (backticks) instead of an interpreted string literal (double quotes) to simplify the syntax. With an interpreted string literal you must escape backslashes.\nThis function uses the RE2 regular expression library. See the RE2 syntax documentation for details. Note that the RE2 \\C escape sequence is not supported.\nThe RE2 syntax is a subset of that accepted by PCRE, roughly speaking, and with various caveats.\nDemonstrative examples # {{ findRESubmatch `a(x*)b` \u0026#34;-ab-\u0026#34; }} → [[\u0026#34;ab\u0026#34; \u0026#34;\u0026#34;]] {{ findRESubmatch `a(x*)b` \u0026#34;-axxb-\u0026#34; }} → [[\u0026#34;axxb\u0026#34; \u0026#34;xx\u0026#34;]] {{ findRESubmatch `a(x*)b` \u0026#34;-ab-axb-\u0026#34; }} → [[\u0026#34;ab\u0026#34; \u0026#34;\u0026#34;] [\u0026#34;axb\u0026#34; \u0026#34;x\u0026#34;]] {{ findRESubmatch `a(x*)b` \u0026#34;-axxb-ab-\u0026#34; }} → [[\u0026#34;axxb\u0026#34; \u0026#34;xx\u0026#34;] [\u0026#34;ab\u0026#34; \u0026#34;\u0026#34;]] {{ findRESubmatch `a(x*)b` \u0026#34;-axxb-ab-\u0026#34; 1 }} → [[\u0026#34;axxb\u0026#34; \u0026#34;xx\u0026#34;]] Practical example # This markdown:\n- [Example](https://example.org) - [Hugo](https://gohugo.io) Produces this HTML:\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://example.org\u0026#34;\u0026gt;Example\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://gohugo.io\u0026#34;\u0026gt;Hugo\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; To match the anchor elements, capturing the link destination and text:\n{{ $regex := `\u0026lt;a\\s*href=\u0026#34;(.+?)\u0026#34;\u0026gt;(.+?)\u0026lt;/a\u0026gt;` }} {{ $matches := findRESubmatch $regex .Content }} Viewed as JSON, the data structure of $matches in the code above is:\n[ [ \u0026#34;\u0026lt;a href=\\\u0026#34;https://example.org\\\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;Example\u0026lt;/a\u0026gt;\u0026#34;, \u0026#34;https://example.org\u0026#34;, \u0026#34;Example\u0026#34; ], [ \u0026#34;\u0026lt;a href=\\\u0026#34;https://gohugo.io\\\u0026#34;\u0026gt;Hugo\u0026lt;/a\u0026gt;\u0026#34;, \u0026#34;https://gohugo.io\u0026#34;, \u0026#34;Hugo\u0026#34; ] ] To render the href attributes:\n{{ range $matches }} {{ index . 1 }} {{ end }} Result:\nhttps://example.org https://gohugo.io You can write and test your regular expression using regex101.com. Be sure to select the Go flavor before you begin.\n另请参阅 # findRE replaceRE "},{"id":196,"href":"/hugo/functions/first/","title":"first","section":"函数","content":"将以下英文翻译为中文：\nfirst # https://gohugo.io/functions/first/\nSlices an array to only the first N elements.\n语法 # first LIMIT COLLECTION first works in a similar manner to the limit keyword in SQL. It reduces the array to only the first N elements. It takes the array and number of elements as input.\nfirst takes two arguments:\nnumber of elements array or slice of maps or structs layout/_default/section.html\n{{ range first 10 .Pages }} {{ .Render \u0026#34;summary\u0026#34; }} {{ end }} Note: Exclusive to first, LIMIT can be ‘0’ to return an empty array.\nfirst and where Together # Using first and where together can be very powerful. Below snippet gets a list of posts only from main sections, sorts it by the title parameter, and then ranges through only the first 5 posts in that list:\nfirst-and-where-together.html\n{{ range first 5 (where site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;in\u0026#34; site.Params.mainSections).ByTitle }} {{ .Content }} {{ end }} 另请参阅 # .Scratch after delimit range "},{"id":197,"href":"/hugo/functions/float/","title":"float","section":"函数","content":"将以下英文翻译为中文：\nfloat # https://gohugo.io/functions/float/\nCasts a value to a decimal (base 10) floating point value.\n语法 # float INPUT With a decimal (base 10) input:\n{{ float 11 }} → 11 (float64) {{ float \u0026#34;11\u0026#34; }} → 11 (float64) {{ float 11.1 }} → 11.1 (float64) {{ float \u0026#34;11.1\u0026#34; }} → 11.1 (float64) {{ float 11.9 }} → 11.9 (float64) {{ float \u0026#34;11.9\u0026#34; }} → 11.9 (float64) With a binary (base 2) input:\n{{ float 0b11 }} → 3 (float64) With an octal (base 8) input (use either notation):\n{{ float 011 }} → 9 (float64) {{ float \u0026#34;011\u0026#34; }} → 11 (float64) {{ float 0o11 }} → 9 (float64) With a hexadecimal (base 16) input:\n{{ float 0x11 }} → 17 (float64) 另请参阅 # int string anchorize emojify errorf and warnf "},{"id":198,"href":"/hugo/functions/ge/","title":"ge","section":"函数","content":"将以下英文翻译为中文：\nge # https://gohugo.io/functions/ge/\nReturns the boolean truth of arg1 \u0026gt;= arg2.\n语法 # ge ARG1 ARG2 {{ if ge 10 5 }}true{{ end }} 另请参阅 # eq gt le lt ne "},{"id":199,"href":"/hugo/functions/getenv/","title":"getenv","section":"函数","content":"将以下英文翻译为中文：\ngetenv # https://gohugo.io/functions/getenv/\nReturns the value of an environment variable, or an empty string if the environment variable is not set.\n语法 # os.Getenv VARIABLE getenv VARIABLE Examples:\n{{ os.Getenv \u0026#34;HOME\u0026#34; }} --\u0026gt; /home/victor {{ os.Getenv \u0026#34;USER\u0026#34; }} --\u0026gt; victor You can pass values when building your site:\nMY_VAR1=foo MY_VAR2=bar hugo OR export MY_VAR1=foo export MY_VAR2=bar hugo And then retrieve the values within a template:\n{{ os.Getenv \u0026#34;MY_VAR1\u0026#34; }} --\u0026gt; foo {{ os.Getenv \u0026#34;MY_VAR2\u0026#34; }} --\u0026gt; bar With Hugo v0.91.0 and later, you must explicitly allow access to environment variables. For details, review Hugo’s Security Policy. By default, environment variables beginning with HUGO_ are allowed when using the os.Getenv function.\n"},{"id":200,"href":"/hugo/functions/group/","title":"group","section":"函数","content":"将以下英文翻译为中文：\ngroup # https://gohugo.io/functions/group/\ngroup groups a list of pages.\n语法 # PAGES | group KEY layouts/partials/groups.html\n{{ $new := .Site.RegularPages | first 10 | group \u0026#34;New\u0026#34; }} {{ $old := .Site.RegularPages | last 10 | group \u0026#34;Old\u0026#34; }} {{ $groups := slice $new $old }} {{ range $groups }} \u0026lt;h3\u0026gt;{{ .Key }}{{/* Prints \u0026#34;New\u0026#34;, \u0026#34;Old\u0026#34; */}}\u0026lt;/h3\u0026gt; \u0026lt;ul\u0026gt; {{ range .Pages }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026#34;meta\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} The page group you get from group is of the same type you get from the built-in group methods in Hugo. The above example can even be paginated.\n另请参阅 # append complement intersect symdiff union "},{"id":201,"href":"/hugo/functions/gt/","title":"gt","section":"函数","content":"将以下英文翻译为中文：\ngt # https://gohugo.io/functions/gt/\nReturns the boolean truth of arg1 \u0026gt; arg2.\n语法 # gt ARG1 ARG2 {{ if gt 10 5 }}true{{ end }} 另请参阅 # eq ge le lt ne "},{"id":202,"href":"/hugo/functions/highlight/","title":"highlight","section":"函数","content":"将以下英文翻译为中文：\nhighlight # https://gohugo.io/functions/highlight/\nRenders code with a syntax highlighter.\n语法 # transform.Highlight INPUT LANG [OPTIONS] highlight INPUT LANG [OPTIONS] The highlight function uses the Chroma syntax highlighter, supporting over 200 languages with more than 40 available styles.\nParameters # INPUT\nThe code to highlight.\nLANG\nThe language of the code to highlight. Choose from one of the supported languages. Case-insensitive.\nOPTIONS\nAn optional, comma-separated list of zero or more options. Set default values in site configuration.\nOptions # lineNos\nBoolean. Default is false. Display a number at the beginning of each line.\nlineNumbersInTable\nBoolean. Default is true. Render the highlighted code in an HTML table with two cells. The left table cell contains the line numbers. The right table cell contains the code, allowing a user to select and copy the code without line numbers. Irrelevant if lineNos is false.\nanchorLineNos\nBoolean. Default is false. Render each line number as an HTML anchor element, and set the id attribute of the surrounding \u0026lt;span\u0026gt; to the line number. Irrelevant if lineNos is false.\nlineAnchors\nString. Default is \u0026quot;\u0026quot;. When rendering a line number as an HTML anchor element, prepend this value to the id attribute of the surrounding \u0026lt;span\u0026gt;. This provides unique id attributes when a page contains two or more code blocks. Irrelevant if lineNos or anchorLineNos is false.\nlineNoStart\nInteger. Default is 1. The number to display at the beginning of the first line. Irrelevant if lineNos is false.\nhl_Lines\nString. Default is \u0026quot;\u0026quot;. A space-separated list of lines to emphasize within the highlighted code. To emphasize lines 2, 3, 4, and 7, set this value to 2-4 7. This option is independent of the lineNoStart option.\nhl_inline\nBoolean. Default is false. Render the highlighted code without a wrapping container.\nstyle\nString. Default is monokai. The CSS styles to apply to the highlighted code. See the style gallery for examples. Case-sensitive.\nnoClasses\nBoolean. Default is true. Use inline CSS styles instead of an external CSS file. To use an external CSS file, set this value to false and generate the file with the hugo client.\ntabWidth\nInteger. Default is 4. Substitute this number of spaces for each tab character in your highlighted code. Irrelevant if noClasses is false.\nguessSyntax\nBoolean. Default is false. If the LANG parameter is blank or an unrecognized language, auto-detect the language if possible, otherwise use a fallback language.\nInstead of specifying both lineNos and lineNumbersInTable, you can use the following shorthand notation:\nlineNos=inline\nequivalent to lineNos=true and lineNumbersInTable=false\nlineNos=table\nequivalent to lineNos=true and lineNumbersInTable=true\nExamples # {{ $input := `fmt.Println(\u0026#34;Hello World!\u0026#34;)` }} {{ transform.Highlight $input \u0026#34;go\u0026#34; }} {{ $input := `console.log(\u0026#39;Hello World!\u0026#39;);` }} {{ $lang := \u0026#34;js\u0026#34; }} {{ transform.Highlight $input $lang \u0026#34;lineNos=table, style=api\u0026#34; }} {{ $input := `echo \u0026#34;Hello World!\u0026#34;` }} {{ $lang := \u0026#34;bash\u0026#34; }} {{ $options := slice \u0026#34;lineNos=table\u0026#34; \u0026#34;style=dracula\u0026#34; }} {{ transform.Highlight $input $lang (delimit $options \u0026#34;,\u0026#34;) }} 另请参阅 # Syntax Highlighting Babel js.Build Configure Markup File Variables "},{"id":203,"href":"/hugo/functions/hmac/","title":"hmac","section":"函数","content":"将以下英文翻译为中文：\nhmac # https://gohugo.io/functions/hmac/\nReturns a cryptographic hash that uses a key to sign a message.\n语法 # crypto.HMAC HASH_TYPE KEY MESSAGE [ENCODING] hmac HASH_TYPE KEY MESSAGE [ENCODING] Set the HASH_TYPE argument to md5, sha1, sha256, or sha512.\nSet the optional ENCODING argument to either hex (default) or binary.\n{{ hmac \u0026#34;sha256\u0026#34; \u0026#34;Secret key\u0026#34; \u0026#34;Secret message\u0026#34; }} 5cceb491f45f8b154e20f3b0a30ed3a6ff3027d373f85c78ffe8983180b03c84 {{ hmac \u0026#34;sha256\u0026#34; \u0026#34;Secret key\u0026#34; \u0026#34;Secret message\u0026#34; \u0026#34;hex\u0026#34; }} 5cceb491f45f8b154e20f3b0a30ed3a6ff3027d373f85c78ffe8983180b03c84 {{ hmac \u0026#34;sha256\u0026#34; \u0026#34;Secret key\u0026#34; \u0026#34;Secret message\u0026#34; \u0026#34;binary\u0026#34; | base64Encode }} XM60kfRfixVOIPOwow7Tpv8wJ9Nz+Fx4/+iYMYCwPIQ= 另请参阅 # sha "},{"id":204,"href":"/hugo/functions/htmlescape/","title":"htmlEscape","section":"函数","content":"将以下英文翻译为中文：\nhtmlEscape # https://gohugo.io/functions/htmlescape/\nReturns the given string with the reserved HTML codes escaped.\n语法 # htmlEscape INPUT In the result \u0026amp; becomes \u0026amp; and so on. It escapes only: \u0026lt;, \u0026gt;, \u0026amp;, ' and \u0026quot;.\n{{ htmlEscape \u0026#34;Hugo \u0026amp; Caddy \u0026gt; WordPress \u0026amp; Apache\u0026#34; }} → \u0026#34;Hugo \u0026amp;amp; Caddy \u0026amp;gt; WordPress \u0026amp;amp; Apache\u0026#34; 另请参阅 # anchorize emojify errorf and warnf float humanize "},{"id":205,"href":"/hugo/functions/htmlunescape/","title":"htmlUnescape","section":"函数","content":"将以下英文翻译为中文：\nhtmlUnescape # https://gohugo.io/functions/htmlunescape/\nReturns the given string with HTML escape codes un-escaped.\n语法 # htmlUnescape INPUT htmlUnescape returns the given string with HTML escape codes un-escaped.\nRemember to pass the output of this to safeHTML if fully un-escaped characters are desired. Otherwise, the output will be escaped again as normal.\n{{ htmlUnescape \u0026#34;Hugo \u0026amp;amp; Caddy \u0026amp;gt; WordPress \u0026amp;amp; Apache\u0026#34; }} → \u0026#34;Hugo \u0026amp; Caddy \u0026gt; WordPress \u0026amp; Apache\u0026#34; "},{"id":206,"href":"/hugo/functions/hugo/","title":"hugo","section":"函数","content":"将以下英文翻译为中文：\nhugo # https://gohugo.io/functions/hugo/\nThe hugo function provides easy access to Hugo-related data.\n语法 # hugo hugo returns an instance that contains the following functions:\nhugo.Generator\n\u0026lt;meta\u0026gt; tag for the version of Hugo that generated the site. hugo.Generator outputs a complete HTML tag; e.g. \u0026lt;meta name=\u0026quot;generator\u0026quot; content=\u0026quot;Hugo 0.63.2\u0026quot;\u0026gt;\nhugo.Version\nthe current version of the Hugo binary you are using e.g. 0.99.1\nhugo.GoVersion\nreturns the version of Go that the Hugo binary was built with. New in v0.101.0\nhugo.Environment\nthe current running environment as defined through the --environment cli tag\nhugo.CommitHash\nthe git commit hash of the current Hugo binary e.g. 0e8bed9ccffba0df554728b46c5bbf6d78ae5247\nhugo.BuildDate\nthe compile date of the current Hugo binary formatted with RFC 3339 e.g. 2002-10-02T10:00:00-05:00\nhugo.IsExtended\nwhether this is the extended Hugo binary.\nhugo.IsProduction\nreturns true if hugo.Environment is set to the production environment\nhugo.Deps\nSee hugo.Deps\nhugo.Deps # New in v0.92.0\nhugo.Deps returns a list of dependencies for a project (either Hugo Modules or local theme components).\nEach dependency contains:\nPath (string)\nReturns the path to this module. This will either be the module path, e.g. \u0026ldquo;github.com/gohugoio/myshortcodes\u0026rdquo;, or the path below your /theme folder, e.g. \u0026ldquo;mytheme\u0026rdquo;.\nVersion (string)\nThe module version.\nVendor (bool)\nWhether this dependency is vendored.\nTime (time.Time)\nTime version was created.\nOwner\nIn the dependency tree, this is the first module that defines this module as a dependency.\nReplace (*Dependency)\nReplaced by this dependency.\nAn example table listing the dependencies:\n\u0026lt;h2\u0026gt;Dependencies\u0026lt;/h2\u0026gt; \u0026lt;table class=\u0026#34;table table-dark\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;#\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Owner\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Path\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Version\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Time\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Vendor\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; {{ range $index, $element := hugo.Deps }} \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026#34;row\u0026#34;\u0026gt;{{ add $index 1 }}\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;{{ with $element.Owner }}{{ .Path }}{{ end }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; {{ $element.Path }} {{ with $element.Replace }} =\u0026gt; {{ .Path }} {{ end }} \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $element.Version }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ with $element.Time }}{{ . }}{{ end }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $element.Vendor }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; {{ end }} \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; "},{"id":207,"href":"/hugo/functions/humanize/","title":"humanize","section":"函数","content":"将以下英文翻译为中文：\nhumanize # https://gohugo.io/functions/humanize/\nReturns the humanized version of an argument with the first letter capitalized.\n语法 # humanize INPUT If the input is either an int64 value or the string representation of an integer, humanize returns the number with the proper ordinal appended.\n{{ humanize \u0026#34;my-first-post\u0026#34; }} → \u0026#34;My first post\u0026#34; {{ humanize \u0026#34;myCamelPost\u0026#34; }} → \u0026#34;My camel post\u0026#34; {{ humanize \u0026#34;52\u0026#34; }} → \u0026#34;52nd\u0026#34; {{ humanize 103 }} → \u0026#34;103rd\u0026#34; 另请参阅 # lower anchorize emojify errorf and warnf float "},{"id":208,"href":"/hugo/functions/i18n/","title":"i18n","section":"函数","content":"将以下英文翻译为中文：\ni18n # https://gohugo.io/functions/i18n/\nTranslates a piece of content based on your i18n configuration files.\n语法 # i18n KEY T KEY lang.Translate KEY This translates a piece of content based on your i18n/en-US.toml files. You can use the go-i18n tools to manage your translations. The translations can exist in both the theme and at the root of your repository.\n{{ i18n \u0026#34;translation_id\u0026#34; }} T is an alias to i18n. E.g. {{ T \u0026quot;translation_id\u0026quot; }}.\nQuery a flexible translation with variables # Often you will want to use the page variables in the translation strings. To do so, pass the . context when calling i18n:\n{{ i18n \u0026#34;wordCount\u0026#34; . }} The function will pass the . context to the \u0026quot;wordCount\u0026quot; id:\ni18n/en-US.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml wordCount: other: This article has {{ .WordCount }} words. ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [wordCount] other = 'This article has {{ .WordCount }} words.' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;wordCount\u0026quot;: { \u0026quot;other\u0026quot;: \u0026quot;This article has {{ .WordCount }} words.\u0026quot; } } ``` Assume .WordCount in the context has value is 101. The result will be:\nThis article has 101 words. For more information about string translations, see Translation of Strings in Multilingual Mode.\n另请参阅 # Multilingual Mode absLangURL relLangURL uniq lang.Merge "},{"id":209,"href":"/hugo/functions/i/","title":"index","section":"函数","content":"将以下英文翻译为中文：\nindex # https://gohugo.io/functions/index-function/\nLooks up the index(es) or key(s) of the data structure passed into it.\n语法 # index COLLECTION INDEXES index COLLECTION KEYS The index functions returns the result of indexing its first argument by the following arguments. Each indexed item must be a map or a slice, e.g.:\n{{ $slice := slice \u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34; }} {{ index $slice 1 }} =\u0026gt; b {{ $map := dict \u0026#34;a\u0026#34; 100 \u0026#34;b\u0026#34; 200 }} {{ index $map \u0026#34;b\u0026#34; }} =\u0026gt; 200 The function takes multiple indices as arguments, and this can be used to get nested values, e.g.:\n{{ $map := dict \u0026#34;a\u0026#34; 100 \u0026#34;b\u0026#34; 200 \u0026#34;c\u0026#34; (slice 10 20 30) }} {{ index $map \u0026#34;c\u0026#34; 1 }} =\u0026gt; 20 {{ $map := dict \u0026#34;a\u0026#34; 100 \u0026#34;b\u0026#34; 200 \u0026#34;c\u0026#34; (dict \u0026#34;d\u0026#34; 10 \u0026#34;e\u0026#34; 20) }} {{ index $map \u0026#34;c\u0026#34; \u0026#34;e\u0026#34; }} =\u0026gt; 20 You may write multiple indices as a slice:\n{{ $map := dict \u0026#34;a\u0026#34; 100 \u0026#34;b\u0026#34; 200 \u0026#34;c\u0026#34; (dict \u0026#34;d\u0026#34; 10 \u0026#34;e\u0026#34; 20) }} {{ $slice := slice \u0026#34;c\u0026#34; \u0026#34;e\u0026#34; }} {{ index $map $slice }} =\u0026gt; 20 Example: Load Data from a Path Based on Front Matter Params # Assume you want to add a location = \u0026quot;\u0026quot; field to your front matter for every article written in content/vacations/. You want to use this field to populate information about the location at the bottom of the article in your single.html template. You also have a directory in data/locations/ that looks like the following:\n. └── data └── locations ├── abilene.toml ├── chicago.toml ├── oslo.toml └── provo.toml Here is an example:\ndata/locations/oslo.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml pop_city: 658390 pop_metro: 1717900 website: https://www.oslo.kommune.no ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml pop_city = 658390 pop_metro = 1717900 website = 'https://www.oslo.kommune.no' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;pop_city\u0026quot;: 658390, \u0026quot;pop_metro\u0026quot;: 1717900, \u0026quot;website\u0026quot;: \u0026quot;https://www.oslo.kommune.no\u0026quot; } ``` The example we will use will be an article on Oslo, whose front matter should be set to exactly the same name as the corresponding file name in data/locations/:\ncontent/articles/oslo.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- location: oslo title: My Norwegian Vacation --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ location = 'oslo' title = 'My Norwegian Vacation' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;location\u0026quot;: \u0026quot;oslo\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;My Norwegian Vacation\u0026quot; } ``` The content of oslo.toml can be accessed from your template using the following node path: .Site.Data.locations.oslo. However, the specific file you need is going to change according to the front matter.\nThis is where the index function is needed. index takes 2 parameters in this use case:\nThe node path A string corresponding to the desired data; e.g.— {{ index .Site.Data.locations \u0026#34;oslo\u0026#34; }} The variable for .Params.location is a string and can therefore replace oslo in the example above:\n{{ index .Site.Data.locations .Params.location }} =\u0026gt; map[website:https://www.oslo.kommune.no pop_city:658390 pop_metro:1717900] Now the call will return the specific file according to the location specified in the content’s front matter, but you will likely want to write specific properties to the template. You can do this by continuing down the node path via dot notation (.):\n{{ (index .Site.Data.locations .Params.location).pop_city }} =\u0026gt; 658390 "},{"id":210,"href":"/hugo/functions/imagefilters/","title":"Image Filters","section":"函数","content":"将以下英文翻译为中文：\nImage Filters # https://gohugo.io/functions/images/\nThe images namespace provides a list of filters and other image related functions.\nSee images.Filter for how to apply these filters to an image.\nOverlay # Overlay creates a filter that overlays the source image at position x y, e.g:\n{{ $logoFilter := (images.Overlay $logo 50 50 ) }} {{ $img := $img | images.Filter $logoFilter }} A shorter version of the above, if you only need to apply the filter once:\n{{ $img := $img.Filter (images.Overlay $logo 50 50 )}} The above will overlay $logo in the upper left corner of $img (at position x=50, y=50).\nText # Using the Text filter, you can add text to an image.\nThe following example will add the text Hugo rocks! to the image with the specified color, size and position.\n{{ $img := resources.Get \u0026#34;/images/background.png\u0026#34; }} {{ $img = $img.Filter (images.Text \u0026#34;Hugo rocks!\u0026#34; (dict \u0026#34;color\u0026#34; \u0026#34;#ffffff\u0026#34; \u0026#34;size\u0026#34; 60 \u0026#34;linespacing\u0026#34; 2 \u0026#34;x\u0026#34; 10 \u0026#34;y\u0026#34; 20 ))}} You can load a custom font if needed. Load the font as a Hugo Resource and set it as an option:\n{{ $font := resources.GetRemote \u0026#34;https://github.com/google/fonts/raw/main/apache/roboto/static/Roboto-Black.ttf\u0026#34; }} {{ $img := resources.Get \u0026#34;/images/background.png\u0026#34; }} {{ $img = $img.Filter (images.Text \u0026#34;Hugo rocks!\u0026#34; (dict \u0026#34;font\u0026#34; $font ))}} Brightness # Brightness creates a filter that changes the brightness of an image. The percentage parameter must be in range (-100, 100).\nColorBalance # ColorBalance creates a filter that changes the color balance of an image. The percentage parameters for each color channel (red, green, blue) must be in range (-100, 500).\nColorize # Colorize creates a filter that produces a colorized version of an image. The hue parameter is the angle on the color wheel, typically in range (0, 360). The saturation parameter must be in range (0, 100). The percentage parameter specifies the strength of the effect, it must be in range (0, 100).\nContrast # Contrast creates a filter that changes the contrast of an image. The percentage parameter must be in range (-100, 100).\nGamma # Gamma creates a filter that performs a gamma correction on an image. The gamma parameter must be positive. Gamma = 1 gives the original image. Gamma less than 1 darkens the image and gamma greater than 1 lightens it.\nGaussianBlur # GaussianBlur creates a filter that applies a gaussian blur to an image.\nGrayscale # Grayscale creates a filter that produces a grayscale version of an image.\nHue # Hue creates a filter that rotates the hue of an image. The hue angle shift is typically in range -180 to 180.\nInvert # Invert creates a filter that negates the colors of an image.\nPixelate # Pixelate creates a filter that applies a pixelation effect to an image.\nSaturation # Saturation creates a filter that changes the saturation of an image.\nSepia # Sepia creates a filter that produces a sepia-toned version of an image.\nSigmoid # Sigmoid creates a filter that changes the contrast of an image using a sigmoidal function and returns the adjusted image. It’s a non-linear contrast change useful for photo adjustments as it preserves highlight and shadow detail.\nUnsharpMask # UnsharpMask creates a filter that sharpens an image. The sigma parameter is used in a gaussian function and affects the radius of effect. Sigma must be positive. Sharpen radius roughly equals 3 * sigma. The amount parameter controls how much darker and how much lighter the edge borders become. Typically between 0.5 and 1.5. The threshold parameter controls the minimum brightness change that will be sharpened. Typically between 0 and 0.05.\nOther Functions # Filter # Can be used to apply a set of filters to an image:\n{{ $img := $img | images.Filter (images.GaussianBlur 6) (images.Pixelate 8) }} Also see the Filter Method.\nImageConfig # Parses the image and returns the height, width, and color model.\nThe imageConfig function takes a single parameter, a file path (string) relative to the project’s root directory, with or without a leading slash.\n{{ with (imageConfig \u0026#34;favicon.ico\u0026#34;) }} favicon.ico: {{ .Width }} x {{ .Height }} {{ end }} 另请参阅 # Image Processing "},{"id":211,"href":"/hugo/functions/in/","title":"in","section":"函数","content":"将以下英文翻译为中文：\nin # https://gohugo.io/functions/in/\nChecks if an element is in an array or slice–or a substring in a string—and returns a boolean.\n语法 # in SET ITEM The elements supported are strings, integers and floats, although only float64 will match as expected.\nIn addition, in can also check if a substring exists in a string.\n{{ if in .Params.tags \u0026#34;Git\u0026#34; }}Follow me on GitHub!{{ end }} {{ if in \u0026#34;this string contains a substring\u0026#34; \u0026#34;substring\u0026#34; }}Substring found!{{ end }} 另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":212,"href":"/hugo/functions/int/","title":"int","section":"函数","content":"将以下英文翻译为中文：\nint # https://gohugo.io/functions/int/\nCasts a value to a decimal (base 10) integer.\n语法 # int INPUT With a decimal (base 10) input:\n{{ int 11 }} → 11 (int) {{ int \u0026#34;11\u0026#34; }} → 11 (int) {{ int 11.1 }} → 11 (int) {{ int 11.9 }} → 11 (int) With a binary (base 2) input:\n{{ int 0b11 }} → 3 (int) {{ int \u0026#34;0b11\u0026#34; }} → 3 (int) With an octal (base 8) input (use either notation):\n{{ int 011 }} → 9 (int) {{ int \u0026#34;011\u0026#34; }} → 9 (int) {{ int 0o11 }} → 9 (int) {{ int \u0026#34;0o11\u0026#34; }} → 9 (int) With a hexadecimal (base 16) input:\n{{ int 0x11 }} → 17 (int) {{ int \u0026#34;0x11\u0026#34; }} → 17 (int) Values with a leading zero are octal (base 8). When casting a string representation of a decimal (base 10) number, remove leading zeros:\n{{ strings.TrimLeft \u0026#34;0\u0026#34; \u0026#34;0011\u0026#34; | int }} → 11 另请参阅 # float string anchorize emojify errorf and warnf "},{"id":213,"href":"/hugo/functions/intersect/","title":"intersect","section":"函数","content":"将以下英文翻译为中文：\nintersect # https://gohugo.io/functions/intersect/\nReturns the common elements of two arrays or slices, in the same order as the first array.\n语法 # intersect SET1 SET2 A useful example is to use it as AND filters when combined with where:\nAND filter in where query # {{ $pages := where .Site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;not in\u0026#34; (slice \u0026#34;page\u0026#34; \u0026#34;about\u0026#34;) }} {{ $pages := $pages | union (where .Site.RegularPages \u0026#34;Params.pinned\u0026#34; true) }} {{ $pages := $pages | intersect (where .Site.RegularPages \u0026#34;Params.images\u0026#34; \u0026#34;!=\u0026#34; nil) }} The above fetches regular pages not of page or about type unless they are pinned. And finally, we exclude all pages with no images set in Page params.\nSee union for OR.\n另请参阅 # symdiff union append complement group "},{"id":214,"href":"/hugo/functions/isset/","title":"isset","section":"函数","content":"将以下英文翻译为中文：\nisset # https://gohugo.io/functions/isset/\nReturns true if the parameter is set.\n语法 # isset COLLECTION INDEX isset COLLECTION KEY Takes either a slice, array, or channel and an index or a map and a key as input.\n{{ if isset .Params \u0026#34;project_url\u0026#34; }} {{ index .Params \u0026#34;project_url\u0026#34; }}{{ end }} All site-level configuration keys are stored as lower case. Therefore, a myParam key-value set in your site configuration file needs to be accessed with {{ if isset .Site.Params \u0026quot;myparam\u0026quot; }} and not with {{ if isset .Site.Params \u0026quot;myParam\u0026quot; }}. Note that you can still access the same config key with .Site.Params.myParam or .Site.Params.myparam, for example, when using with. This restriction also applies when accessing page-level front matter keys from within shortcodes.\n"},{"id":215,"href":"/hugo/functions/jsonify/","title":"jsonify","section":"函数","content":"将以下英文翻译为中文：\njsonify # https://gohugo.io/functions/jsonify/\nEncodes a given object to JSON.\n语法 # jsonify INPUT jsonify OPTIONS INPUT Jsonify encodes a given object to JSON.\nTo customize the printing of the JSON, pass a dictionary of options as the first argument. Supported options are \u0026ldquo;prefix\u0026rdquo; and \u0026ldquo;indent\u0026rdquo;. Each JSON element in the output will begin on a new line beginning with prefix followed by one or more copies of indent according to the indentation nesting.\n{{ dict \u0026#34;title\u0026#34; .Title \u0026#34;content\u0026#34; .Plain | jsonify }} {{ dict \u0026#34;title\u0026#34; .Title \u0026#34;content\u0026#34; .Plain | jsonify (dict \u0026#34;indent\u0026#34; \u0026#34; \u0026#34;) }} {{ dict \u0026#34;title\u0026#34; .Title \u0026#34;content\u0026#34; .Plain | jsonify (dict \u0026#34;prefix\u0026#34; \u0026#34; \u0026#34; \u0026#34;indent\u0026#34; \u0026#34; \u0026#34;) }} Jsonify options # indent (\u0026quot;\u0026quot;)\nIndentation to use.\nprefix (\u0026quot;\u0026quot;)\nIndentation prefix.\nnoHTMLEscape (false)\nDisable escaping of problematic HTML characters inside JSON quoted strings. The default behavior is to escape \u0026amp;, \u0026lt;, and \u0026gt; to \\u0026, \\u003c, and \\u003e to avoid certain safety problems that can arise when embedding JSON in HTML.\nSee also the .PlainWords, .Plain, and .RawContent page variables.\n另请参阅 # Configure Hugo Data Templates Front Matter anchorize emojify "},{"id":216,"href":"/hugo/functions/lang/","title":"lang","section":"函数","content":"将以下英文翻译为中文：\nlang.FormatAccounting # https://gohugo.io/functions/lang/\nFormatAccounting returns the currency representation of number for the given currency and precision for the current language in accounting notation.\nThe return value is formatted with at least two decimal places.\n语法 # lang.FormatAccounting PRECISION, CURRENCY, NUMBER\nExamples # {{ 512.5032 | lang.FormatAccounting 2 \u0026#34;NOK\u0026#34; }} ---\u0026gt; NOK512.50 lang.FormatCurrency # FormatCurrency returns the currency representation of number for the given currency and precision for the current language.\nThe return value is formatted with at least two decimal places.\n语法 # lang.FormatCurrency PRECISION, CURRENCY, NUMBER\nExamples # {{ 512.5032 | lang.FormatCurrency 2 \u0026#34;USD\u0026#34; }} ---\u0026gt; $512.50 lang.FormatNumber # FormatNumber formats number with the given precision for the current language.\n语法 # lang.FormatNumber PRECISION, NUMBER\nExamples # {{ 512.5032 | lang.FormatNumber 2 }} ---\u0026gt; 512.50 lang.FormatNumberCustom # FormatNumberCustom formats a number with the given precision using the negative, decimal, and grouping options. The options parameter is a string consisting of \u0026lt;negative\u0026gt; \u0026lt;decimal\u0026gt; \u0026lt;grouping\u0026gt;. The default options value is - . ,.\nNote that numbers are rounded up at 5 or greater. So, with precision set to 0, 1.5 becomes 2, and 1.4 becomes 1.\nFor a simpler function that adapts to the current language, see FormatNumber.\n语法 # lang.FormatNumberCustom PRECISION, NUMBER, OPTIONS\nExamples # {{ lang.FormatNumberCustom 2 12345.6789 }} ---\u0026gt; 12,345.68 {{ lang.FormatNumberCustom 2 12345.6789 \u0026#34;- , .\u0026#34; }} ---\u0026gt; 12.345,68 {{ lang.FormatNumberCustom 6 -12345.6789 \u0026#34;- .\u0026#34; }} ---\u0026gt; -12345.678900 {{ lang.FormatNumberCustom 0 -12345.6789 \u0026#34;- . ,\u0026#34; }} ---\u0026gt; -12,346 {{ -98765.4321 | lang.FormatNumberCustom 2 }} ---\u0026gt; -98,765.43 lang.FormatPercent # FormatPercent formats number with the given precision for the current language. Note that the number is assumed to be a percentage.\n语法 # lang.FormatPercent PRECISION, NUMBER\nExamples # {{ 512.5032 | lang.FormatPercent 2 }} ---\u0026gt; 512.50% lang.Translate # Translate returns a translated string for id.\n语法 # lang.Translate ID, ARGS\nAliases # i18n, T\n"},{"id":217,"href":"/hugo/functions/lang_merge/","title":"lang.Merge","section":"函数","content":"将以下英文翻译为中文：\nlang.Merge # https://gohugo.io/functions/lang.merge/\nMerge missing translations from other languages.\n语法 # lang.Merge FROM TO As an example:\n{{ $pages := .Site.RegularPages | lang.Merge $frSite.RegularPages | lang.Merge $enSite.RegularPages }} Will \u0026ldquo;fill in the gaps\u0026rdquo; in the current site with, from left to right, content from the French site, and lastly the English.\nA more practical example is to fill in the missing translations from the other languages:\n{{ $pages := .Site.RegularPages }} {{ range .Site.Home.Translations }} {{ $pages = $pages | lang.Merge .Site.RegularPages }} {{ end }} 另请参阅 # Multilingual Mode absLangURL i18n relLangURL uniq "},{"id":218,"href":"/hugo/functions/last/","title":"last","section":"函数","content":"将以下英文翻译为中文：\nlast # https://gohugo.io/functions/last/\nslices an array to only the last Nth elements.\n语法 # last INDEX COLLECTION {{ range last 10 .Pages }} {{ .Render \u0026#34;summary\u0026#34; }} {{ end }} "},{"id":219,"href":"/hugo/functions/le/","title":"le","section":"函数","content":"将以下英文翻译为中文：\nle # https://gohugo.io/functions/le/\nReturns the boolean truth of arg1 \u0026lt;= arg2.\n语法 # le ARG1 ARG2 {{ if le 5 10 }}true{{ end }} 另请参阅 # eq ge gt lt ne "},{"id":220,"href":"/hugo/functions/len/","title":"len","section":"函数","content":"将以下英文翻译为中文：\nlen # https://gohugo.io/functions/len/\nReturns the length of a string, slice, map, or collection.\n语法 # len INPUT With a string:\n{{ \u0026#34;ab\u0026#34; | len }} → 2 {{ \u0026#34;\u0026#34; | len }} → 0 With a slice:\n{{ slice \u0026#34;a\u0026#34; \u0026#34;b\u0026#34; | len }} → 2 {{ slice | len }} → 0 With a map:\n{{ dict \u0026#34;a\u0026#34; 1 \u0026#34;b\u0026#34; 2 | len }} → 2 {{ dict | len }} → 0 With a collection:\n{{ site.RegularPages | len }} → 42 You may also determine the number of pages in a collection with:\n{{ site.RegularPages.Len }} → 42 另请参阅 # strings.RuneCount "},{"id":221,"href":"/hugo/functions/lower/","title":"lower","section":"函数","content":"将以下英文翻译为中文：\nlower # https://gohugo.io/functions/lower/\nConverts all characters in the provided string to lowercase.\n语法 # lower INPUT strings.ToLower INPUT Note that lower can be applied in your templates in more than one way:\n{{ lower \u0026#34;BatMan\u0026#34; }} → \u0026#34;batman\u0026#34; {{ \u0026#34;BatMan\u0026#34; | lower }} → \u0026#34;batman\u0026#34; 另请参阅 # humanize anchorize emojify errorf and warnf float "},{"id":222,"href":"/hugo/functions/lt/","title":"lt","section":"函数","content":"将以下英文翻译为中文：\nlt # https://gohugo.io/functions/lt/\nReturns the boolean truth of arg1 \u0026lt; arg2.\n语法 # lt ARG1 ARG2 {{ if lt 5 10 }}true{{ end }} 另请参阅 # eq ge gt le ne "},{"id":223,"href":"/hugo/functions/markdownify/","title":"markdownify","section":"函数","content":"将以下英文翻译为中文：\nmarkdownify # https://gohugo.io/functions/markdownify/\nRenders markdown to HTML.\n语法 # markdownify INPUT {{ .Title | markdownify }} If the resulting HTML is a single paragraph, Hugo removes the wrapping p tags to produce inline HTML as required per the example above.\nTo keep the wrapping p tags for a single paragraph, use the .Page.RenderString method, setting the display option to block.\nIf the resulting HTML is two or more paragraphs, Hugo leaves the wrapping p tags in place.\nAlthough the markdownify function honors markdown render hooks when rendering markdown to HTML, use the .Page.RenderString method instead of markdownify if a render hook accesses .Page context. See issue #9692 for details.\n另请参阅 # Shortcodes .RenderString Build Options Comments Content Formats "},{"id":224,"href":"/hugo/functions/math/","title":"Math","section":"函数","content":"将以下英文翻译为中文：\nMath # https://gohugo.io/functions/math/\nHugo provides mathematical operators in templates.\nFunction Description Example add Adds two or more numbers. {{ add 12 3 2 }} → 17 If one of the numbers is a float, the result is a float. {{ add 1.1 2 }} → 3.1 sub Subtracts one or more numbers from the first number. {{ sub 12 3 2 }} → 7 If one of the numbers is a float, the result is a float. {{ sub 3 2.5 }} → 0.5 mul Multiplies two or more numbers. {{ mul 12 3 2 }} → 72 If one of the numbers is a float, the result is a float. {{ mul 2 3.1 }} → 6.2 div Divides the first number by one or more numbers. {{ div 12 3 2 }} → 2 If one of the numbers is a float, the result is a float. {{ div 6 4.0 }} → 1.5 mod Modulus of two integers. {{ mod 15 3 }} → 0 modBool Boolean of modulus of two integers. Evaluates to true if result equals 0. {{ modBool 15 3 }} → true math.Ceil Returns the least integer value greater than or equal to the given number. {{ math.Ceil 2.1 }} → 3 math.Floor Returns the greatest integer value less than or equal to the given number. {{ math.Floor 1.9 }} → 1 math.Log Returns the natural logarithm of the given number. {{ math.Log 42 }} → 3.737 math.Max Returns the greater of two or more numbers. {{ math.Max 12 3 2 }} → 12 math.Min Returns the smaller of two or more numbers. {{ math.Min 12 3 2 }} → 2 math.Pow Returns the first number raised to the power of the second number. {{ math.Pow 2 3 }} → 8 math.Round Returns the nearest integer, rounding half away from zero. {{ math.Round 1.5 }} → 2 math.Sqrt Returns the square root of the given number. {{ math.Sqrt 81 }} → 9 另请参阅 # eq ge gt le lt "},{"id":225,"href":"/hugo/functions/md5/","title":"md5","section":"函数","content":"将以下英文翻译为中文：\nmd5 # https://gohugo.io/functions/md5/\nhashes the given input and returns its MD5 checksum.\n语法 # md5 INPUT {{ md5 \u0026#34;Hello world, gophers!\u0026#34; }} \u0026lt;!-- returns the string \u0026#34;b3029f756f98f79e7f1b7f1d1f0dd53b\u0026#34; --\u0026gt; This can be useful if you want to use Gravatar for generating a unique avatar:\n\u0026lt;img src=\u0026#34;https://www.gravatar.com/avatar/{{ md5 \u0026#34;your@email.com\u0026#34; }}?s=100\u0026amp;d=identicon\u0026#34;\u0026gt; "},{"id":226,"href":"/hugo/functions/merge/","title":"merge","section":"函数","content":"将以下英文翻译为中文：\nmerge # https://gohugo.io/functions/merge/\nReturns the result of merging two or more maps.\n语法 # collections.Merge MAP MAP... merge MAP MAP... Returns the result of merging two or more maps from left to right. If a key already exists, merge updates its value. If a key is absent, merge inserts the value under the new key.\nKey handling is case-insensitive.\nThe following examples use these map definitions:\n{{ $m1 := dict \u0026#34;x\u0026#34; \u0026#34;foo\u0026#34; }} {{ $m2 := dict \u0026#34;x\u0026#34; \u0026#34;bar\u0026#34; \u0026#34;y\u0026#34; \u0026#34;wibble\u0026#34; }} {{ $m3 := dict \u0026#34;x\u0026#34; \u0026#34;baz\u0026#34; \u0026#34;y\u0026#34; \u0026#34;wobble\u0026#34; \u0026#34;z\u0026#34; (dict \u0026#34;a\u0026#34; \u0026#34;huey\u0026#34;) }} Example 1\n{{ $merged := merge $m1 $m2 $m3 }} {{ $merged.x }} --\u0026gt; baz {{ $merged.y }} --\u0026gt; wobble {{ $merged.z.a }} --\u0026gt; huey Example 2\n{{ $merged := merge $m3 $m2 $m1 }} {{ $merged.x }} --\u0026gt; foo {{ $merged.y }} --\u0026gt; wibble {{ $merged.z.a }} --\u0026gt; huey Example 3\n{{ $merged := merge $m2 $m3 $m1 }} {{ $merged.x }} --\u0026gt; foo {{ $merged.y }} --\u0026gt; wobble {{ $merged.z.a }} --\u0026gt; huey Example 4\n{{ $merged := merge $m1 $m3 $m2 }} {{ $merged.x }} --\u0026gt; bar {{ $merged.y }} --\u0026gt; wibble {{ $merged.z.a }} --\u0026gt; huey Regardless of depth, merging only applies to maps. For slices, use append.\n另请参阅 # dict "},{"id":227,"href":"/hugo/functions/ne/","title":"ne","section":"函数","content":"将以下英文翻译为中文：\nne # https://gohugo.io/functions/ne/\nReturns the boolean truth of arg1 != arg2.\n语法 # ne ARG1 ARG2 {{ if ne .Section \u0026#34;blog\u0026#34; }}current{{ end }} 另请参阅 # eq ge gt le lt "},{"id":228,"href":"/hugo/functions/now/","title":"now","section":"函数","content":"将以下英文翻译为中文：\nnow # https://gohugo.io/functions/now/\nReturns the current local time\n语法 # now See time.Time.\nFor example, building your site on June 24, 2017, with the following templating:\n\u0026lt;div\u0026gt; \u0026lt;small\u0026gt;\u0026amp;copy; {{ now.Format \u0026#34;2006\u0026#34; }}\u0026lt;/small\u0026gt; \u0026lt;/div\u0026gt; would produce the following:\n\u0026lt;div\u0026gt; \u0026lt;small\u0026gt;\u0026amp;copy; 2017\u0026lt;/small\u0026gt; \u0026lt;/div\u0026gt; The above example uses the .Format function, which page includes a full listing of date formatting using Go’s layout string.\nOlder Hugo themes may still be using the obsolete Page’s .Now (uppercase with leading dot), which causes build error that looks like the following:\nERROR ... Error while rendering \u0026#34;...\u0026#34; in \u0026#34;...\u0026#34;: ... executing \u0026#34;...\u0026#34; at \u0026lt;.Now.Format\u0026gt;: can\u0026#39;t evaluate field Now in type *hugolib.PageOutput Be sure to use now (lowercase with no leading dot) in your templating.\n另请参阅 # .AddDate .Format .Unix time time.Format "},{"id":229,"href":"/hugo/functions/os_stat/","title":"os.Stat","section":"函数","content":"将以下英文翻译为中文：\nos.Stat # https://gohugo.io/functions/os.stat/\nReturns a FileInfo structure describing a file or directory.\n语法 # os.Stat PATH The os.Stat function attempts to resolve the path relative to the root of your project directory. If a matching file or directory is not found, it will attempt to resolve the path relative to the contentDir. A leading path separator (/) is optional.\n{{ $f := os.Stat \u0026#34;README.md\u0026#34; }} {{ $f.IsDir }} --\u0026gt; false (bool) {{ $f.ModTime }} --\u0026gt; 2021-11-25 10:06:49.315429236 -0800 PST (time.Time) {{ $f.Name }} --\u0026gt; README.md (string) {{ $f.Size }} --\u0026gt; 241 (int64) {{ $d := os.Stat \u0026#34;content\u0026#34; }} {{ $d.IsDir }} --\u0026gt; true (bool) Details of the FileInfo structure are available in the Go documentation.\n另请参阅 # File Variables Local File Templates readDir readFile "},{"id":230,"href":"/hugo/functions/partialcached/","title":"partialCached","section":"函数","content":"将以下英文翻译为中文：\npartialCached # https://gohugo.io/functions/partialcached/\nAllows for caching of partials that do not need to be re-rendered on every invocation.\n语法 # partialCached LAYOUT INPUT [VARIANT...] The partialCached template function can offer significant performance gains for complex templates that don’t need to be re-rendered on every invocation.\nNote: Each Site (or language) has its own partialCached cache, so each site will execute a partial once.\nNote: Hugo renders pages in parallel, and will render the partial more than once with concurrent calls to the partialCached function. After Hugo caches the rendered partial, new pages entering the build pipeline will use the cached result.\nHere is the simplest usage:\n{{ partialCached \u0026#34;footer.html\u0026#34; . }} You can also pass additional parameters to partialCached to create variants of the cached partial. For example, if you have a complex partial that should be identical when rendered for pages within the same section, you could use a variant based upon section so that the partial is only rendered once per section:\npartial-cached-example.html\n{{ partialCached \u0026#34;footer.html\u0026#34; . .Section }} If you need to pass additional parameters to create unique variants, you can pass as many variant parameters as you need:\n{{ partialCached \u0026#34;footer.html\u0026#34; . .Params.country .Params.province }} Note that the variant parameters are not made available to the underlying partial template. They are only use to create a unique cache key. Since Hugo 0.61.0 you can use any object as cache key(s), not just strings.\nSee also The Full Partial Series Part 1: Caching!.\n另请参阅 # The Benefits of Static Site Generators "},{"id":231,"href":"/hugo/functions/path_base/","title":"path.Base","section":"函数","content":"将以下英文翻译为中文：\npath.Base # https://gohugo.io/functions/path.base/\nBase returns the last element of a path.\n语法 # path.Base PATH path.Base returns the last element of PATH.\nIf PATH is empty, . is returned.\nNote: On Windows, PATH is converted to slash (/) separators.\n{{ path.Base \u0026#34;a/news.html\u0026#34; }} → \u0026#34;news.html\u0026#34; {{ path.Base \u0026#34;news.html\u0026#34; }} → \u0026#34;news.html\u0026#34; {{ path.Base \u0026#34;a/b/c\u0026#34; }} → \u0026#34;c\u0026#34; {{ path.Base \u0026#34;/x/y/z/\u0026#34; }} → \u0026#34;z\u0026#34; 另请参阅 # path.BaseName Base Templates and Blocks path.Clean path.Dir path.Ext "},{"id":232,"href":"/hugo/functions/path_basename/","title":"path.BaseName","section":"函数","content":"将以下英文翻译为中文：\npath.BaseName # https://gohugo.io/functions/path.basename/\nBaseName returns the last element of a path, removing the extension if present.\n语法 # path.BaseName PATH If PATH is empty, . is returned.\nNote: On Windows, PATH is converted to slash (/) separators.\n{{ path.BaseName \u0026#34;a/news.html\u0026#34; }} → \u0026#34;news\u0026#34; {{ path.BaseName \u0026#34;news.html\u0026#34; }} → \u0026#34;news\u0026#34; {{ path.BaseName \u0026#34;a/b/c\u0026#34; }} → \u0026#34;c\u0026#34; {{ path.BaseName \u0026#34;/x/y/z/\u0026#34; }} → \u0026#34;z\u0026#34; 另请参阅 # path.Base Base Templates and Blocks path.Clean path.Dir path.Ext "},{"id":233,"href":"/hugo/functions/path_clean/","title":"path.Clean","section":"函数","content":"将以下英文翻译为中文：\npath.Clean # https://gohugo.io/functions/path.clean/\nReplaces path separators with slashes (/) and removes extraneous separators.\n语法 # path.Clean PATH path.Clean replaces path separators with slashes (/) and removes extraneous separators, including trailing separators.\n{{ path.Clean \u0026#34;foo//bar\u0026#34; }} → \u0026#34;foo/bar\u0026#34; {{ path.Clean \u0026#34;/foo/bar/\u0026#34; }} → \u0026#34;/foo/bar\u0026#34; On a Windows system, if .File.Path is foo\\bar.md, then:\n{{ path.Clean .File.Path }} → \u0026#34;foo/bar.md\u0026#34; 另请参阅 # path.Base path.BaseName path.Dir path.Ext path.Join "},{"id":234,"href":"/hugo/functions/path_dir/","title":"path.Dir","section":"函数","content":"将以下英文翻译为中文：\npath.Dir # https://gohugo.io/functions/path.dir/\nDir returns all but the last element of a path.\n语法 # path.Dir PATH path.Dir returns all but the last element of PATH, typically PATH’s directory.\nThe returned path will never end in a slash. If PATH is empty, . is returned.\nNote: On Windows, PATH is converted to slash (/) separators.\n{{ path.Dir \u0026#34;a/news.html\u0026#34; }} → \u0026#34;a\u0026#34; {{ path.Dir \u0026#34;news.html\u0026#34; }} → \u0026#34;.\u0026#34; {{ path.Dir \u0026#34;a/b/c\u0026#34; }} → \u0026#34;a/b\u0026#34; {{ path.Dir \u0026#34;/x/y/z\u0026#34; }} → \u0026#34;/x/y\u0026#34; 另请参阅 # path.Base path.BaseName path.Clean path.Ext path.Join "},{"id":235,"href":"/hugo/functions/path_ext/","title":"path.Ext","section":"函数","content":"将以下英文翻译为中文：\npath.Ext # https://gohugo.io/functions/path.ext/\nExt returns the file name extension of a path.\n语法 # path.Ext PATH path.Ext returns the file name extension PATH.\nThe extension is the suffix beginning at the final dot in the final slash-separated element PATH; it is empty if there is no dot.\nNote: On Windows, PATH is converted to slash (/) separators.\n{{ path.Ext \u0026#34;a/b/c/news.html\u0026#34; }} → \u0026#34;.html\u0026#34; 另请参阅 # path.Base path.BaseName path.Clean path.Dir path.Join "},{"id":236,"href":"/hugo/functions/path_join/","title":"path.Join","section":"函数","content":"将以下英文翻译为中文：\npath.Join # https://gohugo.io/functions/path.join/\nJoin path elements into a single path.\n语法 # path.Join ELEMENT... path.Join joins path elements into a single path, adding a separating slash if necessary. All empty strings are ignored.\nNote: All path elements on Windows are converted to slash (’/’) separators.\n{{ path.Join \u0026#34;partial\u0026#34; \u0026#34;news.html\u0026#34; }} → \u0026#34;partial/news.html\u0026#34; {{ path.Join \u0026#34;partial/\u0026#34; \u0026#34;news.html\u0026#34; }} → \u0026#34;partial/news.html\u0026#34; {{ path.Join \u0026#34;foo/baz\u0026#34; \u0026#34;bar\u0026#34; }} → \u0026#34;foo/baz/bar\u0026#34; 另请参阅 # path.Base path.BaseName path.Clean path.Dir path.Ext "},{"id":237,"href":"/hugo/functions/path_split/","title":"path.Split","section":"函数","content":"将以下英文翻译为中文：\npath.Split # https://gohugo.io/functions/path.split/\nSplit path immediately following the final slash.\n语法 # path.Split PATH path.Split splits PATH immediately following the final slash, separating it into a directory and a base component.\nThe returned values have the property that PATH = DIR+BASE. If there is no slash in PATH, it returns an empty directory and the base is set to PATH.\nNote: On Windows, PATH is converted to slash (/) separators.\n{{ $dirFile := path.Split \u0026#34;a/news.html\u0026#34; }} → $dirFile.Dir → \u0026#34;a/\u0026#34;, $dirFile.File → \u0026#34;news.html\u0026#34; {{ $dirFile := path.Split \u0026#34;news.html\u0026#34; }} → $dirFile.Dir → \u0026#34;\u0026#34;, $dirFile.File → \u0026#34;news.html\u0026#34; {{ $dirFile := path.Split \u0026#34;a/b/c\u0026#34; }} → $dirFile.Dir → \u0026#34;a/b/\u0026#34;, $dirFile.File → \u0026#34;c\u0026#34; 另请参阅 # path.Base path.BaseName path.Clean path.Dir path.Ext "},{"id":238,"href":"/hugo/functions/plainify/","title":"plainify","section":"函数","content":"将以下英文翻译为中文：\nplainify # https://gohugo.io/functions/plainify/\nStrips any HTML and returns the plain text version of the provided string.\n语法 # plainify INPUT {{ \u0026#34;\u0026lt;b\u0026gt;BatMan\u0026lt;/b\u0026gt;\u0026#34; | plainify }} → \u0026#34;BatMan\u0026#34; See also the .PlainWords, .Plain, and .RawContent page variables.\n另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":239,"href":"/hugo/functions/pluralize/","title":"pluralize","section":"函数","content":"将以下英文翻译为中文：\npluralize # https://gohugo.io/functions/pluralize/\nPluralizes the given word according to a set of common English pluralization rules\n语法 # pluralize INPUT {{ \u0026#34;cat\u0026#34; | pluralize }} → \u0026#34;cats\u0026#34; 另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":240,"href":"/hugo/functions/print/","title":"print","section":"函数","content":"将以下英文翻译为中文：\nprint # https://gohugo.io/functions/print/\nPrints the default representation of the given arguments using the standard fmt.Print function.\n语法 # print INPUT See the go doc for additional information.\n{{ print \u0026#34;foo\u0026#34; }} → \u0026#34;foo\u0026#34; {{ print \u0026#34;foo\u0026#34; \u0026#34;bar\u0026#34; }} → \u0026#34;foobar\u0026#34; {{ print (slice 1 2 3) }} → [1 2 3] 另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":241,"href":"/hugo/functions/printf/","title":"printf","section":"函数","content":"将以下英文翻译为中文：\nprintf # https://gohugo.io/functions/printf/\nFormats a string using the standard fmt.Sprintf function.\n语法 # printf FORMAT INPUT See the go doc for additional information.\n{{ i18n ( printf \u0026#34;combined_%s\u0026#34; $var ) }} {{ printf \u0026#34;formatted %.2f\u0026#34; 3.1416 }} 另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":242,"href":"/hugo/functions/println/","title":"println","section":"函数","content":"将以下英文翻译为中文：\nprintln # https://gohugo.io/functions/println/\nPrints the default representation of the given argument using the standard fmt.Print function and enforces a linebreak.\n语法 # println INPUT See the go doc for additional information. \\n denotes the linebreak but isn’t printed in the templates as seen below:\n{{ println \u0026#34;foo\u0026#34; }} → \u0026#34;foo\\n\u0026#34; 另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":243,"href":"/hugo/functions/querify/","title":"querify","section":"函数","content":"将以下英文翻译为中文：\nquerify # https://gohugo.io/functions/querify/\nTakes a set or slice of key-value pairs and returns a query string to be appended to URLs.\n语法 # querify KEY VALUE [KEY VALUE]... querify COLLECTION querify takes a set or slice of key-value pairs and returns a query string that can be appended to a URL.\nThe following examples create a link to a search results page on Google.\n\u0026lt;a href=\u0026#34;https://www.google.com?{{ (querify \u0026#34;q\u0026#34; \u0026#34;test\u0026#34; \u0026#34;page\u0026#34; 3) | safeURL }}\u0026#34;\u0026gt;Search\u0026lt;/a\u0026gt; {{ $qs := slice \u0026#34;q\u0026#34; \u0026#34;test\u0026#34; \u0026#34;page\u0026#34; 3 }} \u0026lt;a href=\u0026#34;https://www.google.com?{{ (querify $qs) | safeURL }}\u0026#34;\u0026gt;Search\u0026lt;/a\u0026gt; Both of these examples render the following HTML:\n\u0026lt;a href=\u0026#34;https://www.google.com?page=3\u0026amp;q=test\u0026#34;\u0026gt;Search\u0026lt;/a\u0026gt; 另请参阅 # Links and Cross References URL Management absLangURL absURL relLangURL "},{"id":244,"href":"/hugo/functions/range/","title":"range","section":"函数","content":"将以下英文翻译为中文：\nrange # https://gohugo.io/functions/range/\nIterates over a map, array, or slice.\n语法 # range COLLECTION Just like in the Go programming language, Go and Hugo templates make heavy use of range to iterate over a map, array or slice. Other templating languages use a foreach for the equivalent functionality.\nrange is fundamental to templating in Hugo. (See the Introduction to Hugo Templates for more examples.)\n另请参阅 # .Scratch after delimit first "},{"id":245,"href":"/hugo/functions/readdir/","title":"readDir","section":"函数","content":"将以下英文翻译为中文：\nreadDir # https://gohugo.io/functions/readdir/\nReturns an array of FileInfo structures sorted by filename, one element for each directory entry.\n语法 # os.ReadDir PATH readDir PATH The os.ReadDir function resolves the path relative to the root of your project directory. A leading path separator (/) is optional.\nWith this directory structure:\ncontent/ ├── about.md ├── contact.md └── news/ ├── article-1.md └── article-2.md This template code:\n{{ range os.ReadDir \u0026#34;content\u0026#34; }} {{ .Name }} --\u0026gt; {{ .IsDir }} {{ end }} Produces:\nabout.md --\u0026gt; false contact.md --\u0026gt; false news --\u0026gt; true Note that os.ReadDir is not recursive.\nDetails of the FileInfo structure are available in the Go documentation.\nFor more information on using readDir and readFile in your templates, see Local File Templates.\n另请参阅 # File Variables Local File Templates os.Stat readFile "},{"id":246,"href":"/hugo/functions/readfile/","title":"readFile","section":"函数","content":"将以下英文翻译为中文：\nreadFile # https://gohugo.io/functions/readfile/\nReturns the contents of a file.\n语法 # os.ReadFile PATH readFile PATH The os.ReadFile function attempts to resolve the path relative to the root of your project directory. If a matching file is not found, it will attempt to resolve the path relative to the contentDir. A leading path separator (/) is optional.\nWith a file named README.md in the root of your project directory:\nThis is **bold** text. This template code:\n{{ os.ReadFile \u0026#34;README.md\u0026#34; }} Produces:\nThis is **bold** text. Note that os.ReadFile returns raw (uninterpreted) content.\nFor more information on using readDir and readFile in your templates, see Local File Templates.\n另请参阅 # File Variables Local File Templates os.Stat readDir "},{"id":247,"href":"/hugo/functions/ref/","title":"ref","section":"函数","content":"将以下英文翻译为中文：\nref # https://gohugo.io/functions/ref/\nReturns the absolute permalink to a page.\n语法 # ref . PAGE This function takes two parameters:\nThe context of the page from which to resolve relative paths, typically the current page (.) The path to a page, with or without a file extension, with or without an anchor. A path without a leading / is first resolved relative to the given context, then to the remainder of the site. {{ ref . \u0026#34;about\u0026#34; }} {{ ref . \u0026#34;about#anchor\u0026#34; }} {{ ref . \u0026#34;about.md\u0026#34; }} {{ ref . \u0026#34;about.md#anchor\u0026#34; }} {{ ref . \u0026#34;#anchor\u0026#34; }} {{ ref . \u0026#34;/blog/my-post\u0026#34; }} {{ ref . \u0026#34;/blog/my-post.md\u0026#34; }} To return the absolute permalink to another language version of a page:\n{{ ref . (dict \u0026#34;path\u0026#34; \u0026#34;about.md\u0026#34; \u0026#34;lang\u0026#34; \u0026#34;fr\u0026#34;) }} To return the absolute permalink to another Output Format of a page:\n{{ ref . (dict \u0026#34;path\u0026#34; \u0026#34;about.md\u0026#34; \u0026#34;outputFormat\u0026#34; \u0026#34;rss\u0026#34;) }} Hugo emits an error or warning if the page cannot be uniquely resolved. The error behavior is configurable; see Ref and RelRef Configuration.\nThis function is used by Hugo’s built-in ref shortcode. For a detailed explanation of how to leverage this shortcode for content management, see Links and Cross References.\n另请参阅 # Links and Cross References relref "},{"id":248,"href":"/hugo/functions/reflect_ismap/","title":"reflect.IsMap","section":"函数","content":"将以下英文翻译为中文：\nreflect.IsMap # https://gohugo.io/functions/reflect.ismap/\nReports if a value is a map.\n语法 # reflect.IsMap INPUT reflect.IsMap reports if VALUE is a map. Returns a boolean.\n{{ reflect.IsMap (dict \u0026#34;key\u0026#34; \u0026#34;value\u0026#34;) }} → true {{ reflect.IsMap \u0026#34;yo\u0026#34; }} → false 另请参阅 # reflect.IsSlice "},{"id":249,"href":"/hugo/functions/reflect_isslice/","title":"reflect.IsSlice","section":"函数","content":"将以下英文翻译为中文：\nreflect.IsSlice # https://gohugo.io/functions/reflect.isslice/\nReports if a value is a slice.\n语法 # reflect.IsSlice INPUT reflect.IsSlice reports if VALUE is a slice. Returns a boolean.\n{{ reflect.IsSlice (slice 1 2 3) }} → true {{ reflect.IsSlice \u0026#34;yo\u0026#34; }} → false 另请参阅 # reflect.IsMap "},{"id":250,"href":"/hugo/functions/rellangurl/","title":"relLangURL","section":"函数","content":"将以下英文翻译为中文：\nrelLangURL # https://gohugo.io/functions/rellangurl/\nReturns a relative URL with a language prefix, if any.\n语法 # relLangURL INPUT Use this function with both monolingual and multilingual configurations. The URL returned by this function depends on:\nWhether the input begins with a slash The baseURL in site configuration The language prefix, if any In examples that follow, the project is multilingual with content in both Español (es) and English (en). The default language is Español. The returned values are from the English site.\nInput does not begin with a slash # If the input does not begin with a slash, the resulting URL will be correct regardless of the baseURL.\nWith baseURL = https://example.org/\n{{ relLangURL \u0026#34;\u0026#34; }} → /en/ {{ relLangURL \u0026#34;articles\u0026#34; }} → /en/articles {{ relLangURL \u0026#34;style.css\u0026#34; }} → /en/style.css With baseURL = https://example.org/docs/\n{{ relLangURL \u0026#34;\u0026#34; }} → /docs/en/ {{ relLangURL \u0026#34;articles\u0026#34; }} → /docs/en/articles {{ relLangURL \u0026#34;style.css\u0026#34; }} → /docs/en/style.css Input begins with a slash # If the input begins with a slash, the resulting URL will be incorrect when the baseURL includes a subdirectory. With a leading slash, the function returns a URL relative to the protocol+host section of the baseURL.\nWith baseURL = https://example.org/\n{{ relLangURL \u0026#34;/\u0026#34; }} → /en/ {{ relLangURL \u0026#34;/articles\u0026#34; }} → /en/articles {{ relLangURL \u0026#34;/style.css\u0026#34; }} → /en/style.css With baseURL = https://example.org/docs/\n{{ relLangURL \u0026#34;/\u0026#34; }} → /en/ {{ relLangURL \u0026#34;/articles\u0026#34; }} → /en/articles {{ relLangURL \u0026#34;/style.css\u0026#34; }} → /en/style.css The last three examples are not desirable in most situations. As a best practice, never include a leading slash when using this function.\n另请参阅 # absLangURL absURL relURL uniq Multilingual Mode "},{"id":251,"href":"/hugo/functions/relref/","title":"relref","section":"函数","content":"将以下英文翻译为中文：\nrelref # https://gohugo.io/functions/relref/\nReturns the relative permalink to a page.\n语法 # relref . PAGE This function takes two parameters:\nThe context of the page from which to resolve relative paths, typically the current page (.) The path to a page, with or without a file extension, with or without an anchor. A path without a leading / is first resolved relative to the given context, then to the remainder of the site. {{ relref . \u0026#34;about\u0026#34; }} {{ relref . \u0026#34;about#anchor\u0026#34; }} {{ relref . \u0026#34;about.md\u0026#34; }} {{ relref . \u0026#34;about.md#anchor\u0026#34; }} {{ relref . \u0026#34;#anchor\u0026#34; }} {{ relref . \u0026#34;/blog/my-post\u0026#34; }} {{ relref . \u0026#34;/blog/my-post.md\u0026#34; }} The permalink returned is relative to the protocol+host portion of the baseURL specified in the site configuration. For example:\nCode baseURL Permalink {{ relref . \u0026quot;/about\u0026quot; }} http://example.org/ /about/ {{ relref . \u0026quot;/about\u0026quot; }} http://example.org/x/ /x/about/ To return the relative permalink to another language version of a page:\n{{ relref . (dict \u0026#34;path\u0026#34; \u0026#34;about.md\u0026#34; \u0026#34;lang\u0026#34; \u0026#34;fr\u0026#34;) }} To return the relative permalink to another Output Format of a page:\n{{ relref . (dict \u0026#34;path\u0026#34; \u0026#34;about.md\u0026#34; \u0026#34;outputFormat\u0026#34; \u0026#34;rss\u0026#34;) }} Hugo emits an error or warning if the page cannot be uniquely resolved. The error behavior is configurable; see Ref and RelRef Configuration.\nThis function is used by Hugo’s built-in relref shortcode. For a detailed explanation of how to leverage this shortcode for content management, see Links and Cross References.\n另请参阅 # Links and Cross References ref "},{"id":252,"href":"/hugo/functions/relurl/","title":"relURL","section":"函数","content":"将以下英文翻译为中文：\nrelURL # https://gohugo.io/functions/relurl/\nReturns a relative URL.\n语法 # relURL INPUT With multilingual configurations, use the relLangURL function instead. The URL returned by this function depends on:\nWhether the input begins with a slash The baseURL in site configuration Input does not begin with a slash # If the input does not begin with a slash, the resulting URL will be correct regardless of the baseURL.\nWith baseURL = https://example.org/\n{{ relURL \u0026#34;\u0026#34; }} → / {{ relURL \u0026#34;articles\u0026#34; }} → /articles {{ relURL \u0026#34;style.css\u0026#34; }} → /style.css With baseURL = https://example.org/docs/\n{{ relURL \u0026#34;\u0026#34; }} → /docs/ {{ relURL \u0026#34;articles\u0026#34; }} → /docs/articles {{ relURL \u0026#34;style.css\u0026#34; }} → /docs/style.css Input begins with a slash # If the input begins with a slash, the resulting URL will be incorrect when the baseURL includes a subdirectory. With a leading slash, the function returns a URL relative to the protocol+host section of the baseURL.\nWith baseURL = https://example.org/\n{{ relURL \u0026#34;/\u0026#34; }} → / {{ relURL \u0026#34;/articles\u0026#34; }} → /articles {{ relURL \u0026#34;style.css\u0026#34; }} → /style.css With baseURL = https://example.org/docs/\n{{ relURL \u0026#34;/\u0026#34; }} → / {{ relURL \u0026#34;/articles\u0026#34; }} → /articles {{ relURL \u0026#34;/style.css\u0026#34; }} → /style.css The last three examples are not desirable in most situations. As a best practice, never include a leading slash when using this function.\n另请参阅 # absLangURL absURL relLangURL Links and Cross References URL Management "},{"id":253,"href":"/hugo/functions/replace/","title":"replace","section":"函数","content":"将以下英文翻译为中文：\nreplace # https://gohugo.io/functions/replace/\nReplaces all occurrences of the search string with the replacement string.\n语法 # replace INPUT OLD NEW [LIMIT] strings.Replace INPUT OLD NEW [LIMIT] Replace returns a copy of INPUT with all occurrences of OLD replaced with NEW. The number of replacements can be limited with an optional LIMIT parameter.\n`{{ replace \u0026#34;Batman and Robin\u0026#34; \u0026#34;Robin\u0026#34; \u0026#34;Catwoman\u0026#34; }}` → \u0026#34;Batman and Catwoman\u0026#34; {{ replace \u0026#34;aabbaabb\u0026#34; \u0026#34;a\u0026#34; \u0026#34;z\u0026#34; 2 }} → \u0026#34;zzbbaabb\u0026#34; "},{"id":254,"href":"/hugo/functions/replacere/","title":"replaceRE","section":"函数","content":"将以下英文翻译为中文：\nreplaceRE # https://gohugo.io/functions/replacere/\nReturns a string, replacing all occurrences of a regular expression with a replacement pattern.\n语法 # replaceRE PATTERN REPLACEMENT INPUT [LIMIT] strings.ReplaceRE PATTERN REPLACEMENT INPUT [LIMIT] By default, replaceRE replaces all matches. You can limit the number of matches with an optional LIMIT parameter.\nWhen specifying the regular expression, use a raw string literal (backticks) instead of an interpreted string literal (double quotes) to simplify the syntax. With an interpreted string literal you must escape backslashes.\nThis function uses the RE2 regular expression library. See the RE2 syntax documentation for details. Note that the RE2 \\C escape sequence is not supported.\nThe RE2 syntax is a subset of that accepted by PCRE, roughly speaking, and with various caveats.\nThis example replaces two or more consecutive hyphens with a single hyphen:\n{{ $s := \u0026#34;a-b--c---d\u0026#34; }} {{ replaceRE `(-{2,})` \u0026#34;-\u0026#34; $s }} → a-b-c-d To limit the number of replacements to one:\n{{ $s := \u0026#34;a-b--c---d\u0026#34; }} {{ replaceRE `(-{2,})` \u0026#34;-\u0026#34; $s 1 }} → a-b-c---d You can use $1, $2, etc. within the replacement string to insert the groups captured within the regular expression:\n{{ $s := \u0026#34;http://gohugo.io/docs\u0026#34; }} {{ replaceRE \u0026#34;^https?://([^/]+).*\u0026#34; \u0026#34;$1\u0026#34; $s }} → gohugo.io You can write and test your regular expression using regex101.com. Be sure to select the Go flavor before you begin.\n另请参阅 # findRE findRESubmatch "},{"id":255,"href":"/hugo/functions/safecss/","title":"safeCSS","section":"函数","content":"将以下英文翻译为中文：\nsafeCSS # https://gohugo.io/functions/safecss/\nDeclares the provided string as a known \u0026ldquo;safe\u0026rdquo; CSS string.\n语法 # safeCSS INPUT In this context, safe means CSS content that matches any of the following:\nThe CSS3 stylesheet production, such as p { color: purple }. The CSS3 rule production, such as a[href=~\u0026quot;https:\u0026quot;].foo#bar. CSS3 declaration productions, such as color: red; margin: 2px. The CSS3 value production, such as rgba(0, 0, 255, 127). Example: Given style = \u0026quot;color: red;\u0026quot; defined in the front matter of your .md file:\n\u0026lt;p style=\u0026quot;{{ .Params.style | safeCSS }}\u0026quot;\u0026gt;…\u0026lt;/p\u0026gt; → \u0026lt;p style=\u0026quot;color: red;\u0026quot;\u0026gt;…\u0026lt;/p\u0026gt; \u0026lt;p style=\u0026quot;{{ .Params.style }}\u0026quot;\u0026gt;…\u0026lt;/p\u0026gt; → \u0026lt;p style=\u0026quot;ZgotmplZ\u0026quot;\u0026gt;…\u0026lt;/p\u0026gt; \u0026ldquo;ZgotmplZ\u0026rdquo; is a special value that indicates that unsafe content reached a CSS or URL context.\n另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":256,"href":"/hugo/functions/safehtml/","title":"safeHTML","section":"函数","content":"将以下英文翻译为中文：\nsafeHTML # https://gohugo.io/functions/safehtml/\nDeclares a provided string as a \u0026ldquo;safe\u0026rdquo; HTML document to avoid escaping by Go templates.\n语法 # safeHTML INPUT It should not be used for HTML from a third-party, or HTML with unclosed tags or comments.\nGiven a site-wide config.toml with the following copyright value:\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml copyright: © 2015 Jane Doe. \u0026lt;a href=\u0026quot;https://creativecommons.org/licenses/by/4.0/\u0026quot;\u0026gt;Some rights reserved\u0026lt;/a\u0026gt;. ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml copyright = '© 2015 Jane Doe. \u0026lt;a href=\u0026quot;https://creativecommons.org/licenses/by/4.0/\u0026quot;\u0026gt;Some rights reserved\u0026lt;/a\u0026gt;.' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;copyright\u0026quot;: \u0026quot;© 2015 Jane Doe. \\u003ca href=\\\u0026quot;https://creativecommons.org/licenses/by/4.0/\\\u0026quot;\\u003eSome rights reserved\\u003c/a\\u003e.\u0026quot; } ``` {{ .Site.Copyright | safeHTML }} in a template would then output:\n© 2015 Jane Doe. \u0026lt;a href=\u0026#34;https://creativecommons.org/licenses/by/4.0/\u0026#34;\u0026gt;Some rights reserved\u0026lt;/a\u0026gt;. However, without the safeHTML function, html/template assumes .Site.Copyright to be unsafe and therefore escapes all HTML tags and renders the whole string as plain text:\n\u0026lt;p\u0026gt;© 2015 Jane Doe. \u0026amp;lt;a href=\u0026amp;#34;https://creativecommons.org/licenses by/4.0/\u0026amp;#34;\u0026amp;gt;Some rights reserved\u0026amp;lt;/a\u0026amp;gt;.\u0026lt;/p\u0026gt; 另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":257,"href":"/hugo/functions/safehtmlattr/","title":"safeHTMLAttr","section":"函数","content":"将以下英文翻译为中文：\nsafeHTMLAttr # https://gohugo.io/functions/safehtmlattr/\nDeclares the provided string as a safe HTML attribute.\n语法 # safeHTMLAttr INPUT Given a site configuration that contains this menu entry:\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml menu: main: - name: IRC url: irc://irc.freenode.net/#golang ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [menu] [[menu.main]] name = 'IRC' url = 'irc://irc.freenode.net/#golang' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;menu\u0026quot;: { \u0026quot;main\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;IRC\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;irc://irc.freenode.net/#golang\u0026quot; } ] } } ``` Attempting to use the url value directly in an attribute:\n{{ range site.Menus.main }} \u0026lt;a href=\u0026#34;{{ .URL }}\u0026#34;\u0026gt;{{ .Name }}\u0026lt;/a\u0026gt; {{ end }} Will produce:\n\u0026lt;a href=\u0026#34;#ZgotmplZ\u0026#34;\u0026gt;IRC\u0026lt;/a\u0026gt; ZgotmplZ is a special value, inserted by Go’s template/html package, that indicates that unsafe content reached a CSS or URL context.\nTo override the safety check, use the safeHTMLAttr function:\n{{ range site.Menus.main }} \u0026lt;a {{ printf \u0026#34;href=%q\u0026#34; .URL | safeHTMLAttr }}\u0026gt;{{ .Name }}\u0026lt;/a\u0026gt; {{ end }} 另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":258,"href":"/hugo/functions/safejs/","title":"safeJS","section":"函数","content":"将以下英文翻译为中文：\nsafeJS # https://gohugo.io/functions/safejs/\nDeclares the provided string as a known safe JavaScript string.\n语法 # safeJS INPUT In this context, safe means the string encapsulates a known safe EcmaScript5 Expression (e.g., (x + y * z())).\nTemplate authors are responsible for ensuring that typed expressions do not break the intended precedence and that there is no statement/expression ambiguity as when passing an expression like { foo:bar() }\\n['foo'](), which is both a valid expression and a valid program with a very different meaning.\nExample: Given hash = \u0026quot;619c16f\u0026quot; defined in the front matter of your .md file:\n\u0026lt;script\u0026gt;var form_{{ .Params.hash | safeJS }};…\u0026lt;/script\u0026gt; → \u0026lt;script\u0026gt;var form_619c16f;…\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;var form_{{ .Params.hash }};…\u0026lt;/script\u0026gt; → \u0026lt;script\u0026gt;var form_\u0026quot;619c16f\u0026quot;;…\u0026lt;/script\u0026gt; 另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":259,"href":"/hugo/functions/safeurl/","title":"safeURL","section":"函数","content":"将以下英文翻译为中文：\nsafeURL # https://gohugo.io/functions/safeurl/\nDeclares the provided string as a safe URL or URL substring.\n语法 # safeURL INPUT safeURL declares the provided string as a \u0026ldquo;safe\u0026rdquo; URL or URL substring (see RFC 3986). A URL like javascript:checkThatFormNotEditedBeforeLeavingPage() from a trusted source should go in the page, but by default dynamic javascript: URLs are filtered out since they are a frequently exploited injection vector.\nWithout safeURL, only the URI schemes http:, https: and mailto: are considered safe by Go templates. If any other URI schemes (e.g., irc: and javascript:) are detected, the whole URL will be replaced with #ZgotmplZ. This is to \u0026ldquo;defang\u0026rdquo; any potential attack in the URL by rendering it useless.\nThe following examples use a site config.toml with the following menu entry:\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml menu: main: - name: 'IRC: #golang at freenode' url: irc://irc.freenode.net/#golang ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [menu] [[menu.main]] name = 'IRC: #golang at freenode' url = 'irc://irc.freenode.net/#golang' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;menu\u0026quot;: { \u0026quot;main\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;IRC: #golang at freenode\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;irc://irc.freenode.net/#golang\u0026quot; } ] } } ``` The following is an example of a sidebar partial that may be used in conjunction with the preceding front matter example:\nlayouts/partials/bad-url-sidebar-menu.html\n\u0026lt;!-- This unordered list may be part of a sidebar menu --\u0026gt; \u0026lt;ul\u0026gt; {{ range .Site.Menus.main }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .URL }}\u0026#34;\u0026gt;{{ .Name }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; This partial would produce the following HTML output:\n\u0026lt;!-- This unordered list may be part of a sidebar menu --\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#ZgotmplZ\u0026#34;\u0026gt;IRC: #golang at freenode\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; The odd output can be remedied by adding | safeURL to our .URL page variable:\nlayouts/partials/correct-url-sidebar-menu.html\n\u0026lt;!-- This unordered list may be part of a sidebar menu --\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .URL | safeURL }}\u0026#34;\u0026gt;{{ .Name }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; With the .URL page variable piped through safeURL, we get the desired output:\n\u0026lt;ul class=\u0026#34;sidebar-menu\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;irc://irc.freenode.net/#golang\u0026#34;\u0026gt;IRC: #golang at freenode\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; 另请参阅 # urlize Links and Cross References URL Management absLangURL absURL "},{"id":260,"href":"/hugo/functions/seq/","title":"seq","section":"函数","content":"将以下英文翻译为中文：\nseq # https://gohugo.io/functions/seq/\nReturns a slice of integers.\n语法 # seq LAST seq FIRST LAST seq FIRST INCREMENT LAST {{ seq 2 }} → [1 2] {{ seq 0 2 }} → [0 1 2] {{ seq -2 2 }} → [-2 -1 0 1 2] {{ seq -2 2 2 }} → [-2 0 2] Iterate over a sequence of integers:\n{{ $product := 1 }} {{ range seq 4 }} {{ $product = mul $product . }} {{ end }} {{ $product }} → 24 "},{"id":261,"href":"/hugo/functions/sha/","title":"sha","section":"函数","content":"将以下英文翻译为中文：\nsha # https://gohugo.io/functions/sha/\nHashes the given input and returns either an SHA1 or SHA256 checksum.\n语法 # sha1 INPUT sha256 INPUT sha1 hashes the given input and returns its SHA1 checksum.\n{{ sha1 \u0026#34;Hello world, gophers!\u0026#34; }} \u0026lt;!-- returns the string \u0026#34;c8b5b0e33d408246e30f53e32b8f7627a7a649d4\u0026#34; --\u0026gt; sha256 hashes the given input and returns its SHA256 checksum.\n{{ sha256 \u0026#34;Hello world, gophers!\u0026#34; }} \u0026lt;!-- returns the string \u0026#34;6ec43b78da9669f50e4e422575c54bf87536954ccd58280219c393f2ce352b46\u0026#34; --\u0026gt; 另请参阅 # hmac "},{"id":262,"href":"/hugo/functions/shuffle/","title":"shuffle","section":"函数","content":"将以下英文翻译为中文：\nshuffle # https://gohugo.io/functions/shuffle/\nReturns a random permutation of a given array or slice.\n语法 # shuffle COLLECTION {{ shuffle (seq 1 2 3) }} → [3 1 2] {{ shuffle (slice \u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34;) }} → [b a c] The result will vary from one build to the next.\n另请参阅 # sort "},{"id":263,"href":"/hugo/functions/singularize/","title":"singularize","section":"函数","content":"将以下英文翻译为中文：\nsingularize # https://gohugo.io/functions/singularize/\nConverts a word according to a set of common English singularization rules.\n语法 # singularize INPUT {{ \u0026quot;cats\u0026quot; | singularize }} → \u0026ldquo;cat\u0026rdquo;\nSee also the .Data.Singular taxonomy variable for singularizing taxonomy names.\n另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":264,"href":"/hugo/functions/site/","title":"site","section":"函数","content":"将以下英文翻译为中文：\nsite # https://gohugo.io/functions/site/\nThe site function provides global access to the same data as the .Site page method.\n语法 # site site is a global function which returns the same data as the .Site page method. See: Site Variables.\n"},{"id":265,"href":"/hugo/functions/slice/","title":"slice","section":"函数","content":"将以下英文翻译为中文：\nslice # https://gohugo.io/functions/slice/\nCreates a slice (array) of all passed arguments.\n语法 # slice ITEM... One use case is the concatenation of elements in combination with the delimit function:\nslice.html\n{{ $sliceOfStrings := slice \u0026#34;foo\u0026#34; \u0026#34;bar\u0026#34; \u0026#34;buzz\u0026#34; }} \u0026lt;!-- returns the slice [ \u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, \u0026#34;buzz\u0026#34;] --\u0026gt; {{ delimit ($sliceOfStrings) \u0026#34;, \u0026#34; }} \u0026lt;!-- returns the string \u0026#34;foo, bar, buzz\u0026#34; --\u0026gt; "},{"id":266,"href":"/hugo/functions/slicestr/","title":"slicestr","section":"函数","content":"将以下英文翻译为中文：\nslicestr # https://gohugo.io/functions/slicestr/\nCreates a slice of a half-open range, including start and end indices.\n语法 # slicestr STRING START [END] strings.SliceString STRING START [END] For example, 1 and 4 creates a slice including elements 1 through 3. The end index can be omitted; it defaults to the string’s length.\n{{ slicestr \u0026quot;BatMan\u0026quot; 3 }} → \u0026ldquo;Man\u0026rdquo; {{ slicestr \u0026quot;BatMan\u0026quot; 0 3 }} → \u0026ldquo;Bat\u0026rdquo; 另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":267,"href":"/hugo/functions/sort/","title":"sort","section":"函数","content":"将以下英文翻译为中文：\nsort # https://gohugo.io/functions/sort/\nSorts slices, maps, and page collections.\n语法 # sort COLLECTION [KEY] [ORDER] The KEY is optional when sorting slices in ascending order, otherwise it is required. When sorting slices, use the literal value in place of the KEY. See examples below.\nThe ORDER may be either asc (ascending) or desc (descending). The default sort order is ascending.\nSort a slice # The examples below assume this site configuration:\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml params: grades: - b - a - c ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [params] grades = ['b', 'a', 'c'] ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;params\u0026quot;: { \u0026quot;grades\u0026quot;: [ \u0026quot;b\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;c\u0026quot; ] } } ``` Ascending order # Sort slice elements in ascending order using either of these constructs:\nlayouts/_default/single.html\n{{ sort site.Params.grades }} → [a b c] {{ sort site.Params.grades \u0026#34;value\u0026#34; \u0026#34;asc\u0026#34; }} → [a b c] In the examples above, value is the KEY representing the value of the slice element.\nDescending order # Sort slice elements in descending order:\nlayouts/_default/single.html\n{{ sort site.Params.grades \u0026#34;value\u0026#34; \u0026#34;desc\u0026#34; }} → [c b a] In the example above, value is the KEY representing the value of the slice element.\nSort a map # The examples below assume this site configuration:\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml params: authors: a: firstName: Marius lastName: Pontmercy b: firstName: Victor lastName: Hugo c: firstName: Jean lastName: Valjean ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [params] [params.authors] [params.authors.a] firstName = 'Marius' lastName = 'Pontmercy' [params.authors.b] firstName = 'Victor' lastName = 'Hugo' [params.authors.c] firstName = 'Jean' lastName = 'Valjean' ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;params\u0026quot;: { \u0026quot;authors\u0026quot;: { \u0026quot;a\u0026quot;: { \u0026quot;firstName\u0026quot;: \u0026quot;Marius\u0026quot;, \u0026quot;lastName\u0026quot;: \u0026quot;Pontmercy\u0026quot; }, \u0026quot;b\u0026quot;: { \u0026quot;firstName\u0026quot;: \u0026quot;Victor\u0026quot;, \u0026quot;lastName\u0026quot;: \u0026quot;Hugo\u0026quot; }, \u0026quot;c\u0026quot;: { \u0026quot;firstName\u0026quot;: \u0026quot;Jean\u0026quot;, \u0026quot;lastName\u0026quot;: \u0026quot;Valjean\u0026quot; } } } } ``` When sorting maps, the KEY argument must be lowercase.\nAscending order # Sort map objects in ascending order using either of these constructs:\nlayouts/_default/single.html\n{{ range sort site.Params.authors \u0026#34;firstname\u0026#34; }} {{ .firstName }} {{ end }} {{ range sort site.Params.authors \u0026#34;firstname\u0026#34; \u0026#34;asc\u0026#34; }} {{ .firstName }} {{ end }} These produce:\nJean Marius Victor Descending order # Sort map objects in descending order:\nlayouts/_default/single.html\n{{ range sort site.Params.authors \u0026#34;firstname\u0026#34; \u0026#34;desc\u0026#34; }} {{ .firstName }} {{ end }} This produces:\nVictor Marius Jean Sort a page collection # Although you can use the sort function to sort a page collection, Hugo provides built-in methods for sorting page collections by:\nweight linktitle title front matter parameter date expiration date last modified date publish date length In this contrived example, sort the site’s regular pages by .Type in descending order:\nlayouts/_default/home.html\n{{ range sort site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;desc\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} 另请参阅 # .GetPage Content Sections Content Types Lists of Content in Hugo Menu Templates "},{"id":268,"href":"/hugo/functions/split/","title":"split","section":"函数","content":"将以下英文翻译为中文：\nsplit # https://gohugo.io/functions/split/\nReturns a slice of strings by splitting STRING by DELIM.\n语法 # split STRING DELIM Examples:\n{{ split \u0026#34;tag1,tag2,tag3\u0026#34; \u0026#34;,\u0026#34; }} → [\u0026#34;tag1\u0026#34;, \u0026#34;tag2\u0026#34;, \u0026#34;tag3\u0026#34;] {{ split \u0026#34;abc\u0026#34; \u0026#34;\u0026#34; }} → [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;] split essentially does the opposite of delimit. While split creates a slice from a string, delimit creates a string from a slice.\n另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":269,"href":"/hugo/functions/string/","title":"string","section":"函数","content":"将以下英文翻译为中文：\nstring # https://gohugo.io/functions/string/\nCast a value to a string.\n语法 # string INPUT With a decimal (base 10) input:\n{{ string 11 }} → 11 (string) {{ string \u0026#34;11\u0026#34; }} → 11 (string) {{ string 11.1 }} → 11.1 (string) {{ string \u0026#34;11.1\u0026#34; }} → 11.1 (string) {{ string 11.9 }} → 11.9 (string) {{ string \u0026#34;11.9\u0026#34; }} → 11.9 (string) With a binary (base 2) input:\n{{ string 0b11 }} → 3 (string) {{ string \u0026#34;0b11\u0026#34; }} → 0b11 (string) With an octal (base 8) input (use either notation):\n{{ string 011 }} → 9 (string) {{ string \u0026#34;011\u0026#34; }} → 011 (string) {{ string 0o11 }} → 9 (string) {{ string \u0026#34;0o11\u0026#34; }} → 0o11 (string) With a hexadecimal (base 16) input:\n{{ string 0x11 }} → 17 (string) {{ string \u0026#34;0x11\u0026#34; }} → 0x11 (string) 另请参阅 # float int anchorize emojify errorf and warnf "},{"id":270,"href":"/hugo/functions/strings_contains/","title":"strings.Contains","section":"函数","content":"将以下英文翻译为中文：\nstrings.Contains # https://gohugo.io/functions/strings.contains/\nReports whether a string contains a substring.\n语法 # strings.Contains STRING SUBSTRING {{ strings.Contains \u0026#34;Hugo\u0026#34; \u0026#34;go\u0026#34; }} → true The check is case sensitive:\n{{ strings.Contains \u0026#34;Hugo\u0026#34; \u0026#34;Go\u0026#34; }} → false "},{"id":271,"href":"/hugo/functions/strings_containsany/","title":"strings.ContainsAny","section":"函数","content":"将以下英文翻译为中文：\nstrings.ContainsAny # https://gohugo.io/functions/strings.containsany/\nReports whether a string contains any character from a given string.\n语法 # strings.ContainsAny STRING CHARACTERS {{ strings.ContainsAny \u0026#34;Hugo\u0026#34; \u0026#34;gm\u0026#34; }} → true The check is case sensitive:\n{{ strings.ContainsAny \u0026#34;Hugo\u0026#34; \u0026#34;Gm\u0026#34; }} → false "},{"id":272,"href":"/hugo/functions/strings_count/","title":"strings.Count","section":"函数","content":"将以下英文翻译为中文：\nstrings.Count # https://gohugo.io/functions/strings.count/\nReturns the number of non-overlapping instances of a substring within a string.\n语法 # strings.Count SUBSTR STRING If SUBSTR is an empty string, this function returns 1 plus the number of Unicode code points in STRING.\nExample Result `{{ \u0026ldquo;aaabaab\u0026rdquo; strings.Count \u0026ldquo;a\u0026rdquo; }}` `{{ \u0026ldquo;aaabaab\u0026rdquo; strings.Count \u0026ldquo;aa\u0026rdquo; }}` `{{ \u0026ldquo;aaabaab\u0026rdquo; strings.Count \u0026ldquo;aaa\u0026rdquo; }}` `{{ \u0026ldquo;aaabaab\u0026rdquo; strings.Count \u0026quot;\u0026quot; }}` 另请参阅 # strings.RuneCount countrunes countwords "},{"id":273,"href":"/hugo/functions/strings_firstupper/","title":"strings.FirstUpper","section":"函数","content":"将以下英文翻译为中文：\nstrings.FirstUpper # https://gohugo.io/functions/strings.firstupper/\nCapitalizes the first character of a given string.\n语法 # strings.FirstUpper STRING {{ strings.FirstUpper \u0026#34;foo\u0026#34; }} → \u0026#34;Foo\u0026#34; "},{"id":274,"href":"/hugo/functions/strings_hasprefix/","title":"strings.HasPrefix","section":"函数","content":"将以下英文翻译为中文：\nstrings.HasPrefix # https://gohugo.io/functions/strings.hasprefix/\nTests whether a string begins with prefix.\n语法 # hasPrefix STRING PREFIX strings.HasPrefix STRING PREFIX {{ hasPrefix \u0026#34;Hugo\u0026#34; \u0026#34;Hu\u0026#34; }} → true 另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":275,"href":"/hugo/functions/strings_hassuffix/","title":"strings.HasSuffix","section":"函数","content":"将以下英文翻译为中文：\nstrings.HasSuffix # https://gohugo.io/functions/strings.hassuffix/\nTests whether a string ends with suffix.\n语法 # hasSuffix STRING SUFFIX strings.HasSuffix STRING SUFFIX {{ hasSuffix \u0026#34;Hugo\u0026#34; \u0026#34;go\u0026#34; }} → true 另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":276,"href":"/hugo/functions/strings_repeat/","title":"strings.Repeat","section":"函数","content":"将以下英文翻译为中文：\nstrings.Repeat # https://gohugo.io/functions/strings.repeat/\nReturns INPUT repeated COUNT times.\n语法 # strings.Repeat COUNT INPUT {{ strings.Repeat 3 \u0026#34;yo\u0026#34; }} → \u0026#34;yoyoyo\u0026#34; {{ \u0026#34;yo\u0026#34; | strings.Repeat 3 }} → \u0026#34;yoyoyo\u0026#34; 另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":277,"href":"/hugo/functions/strings_runecount/","title":"strings.RuneCount","section":"函数","content":"将以下英文翻译为中文：\nstrings.RuneCount # https://gohugo.io/functions/strings.runecount/\nDetermines the number of runes in a string.\n语法 # strings.RuneCount INPUT In contrast with strings.CountRunes function, which strips HTML and whitespace before counting runes, strings.RuneCount simply counts all the runes in a string. It relies on the Go [utf8.RuneCountInString] function.\n{{ \u0026#34;Hello, 世界\u0026#34; | strings.RuneCount }} \u0026lt;!-- outputs a content length of 9 runes. --\u0026gt; 另请参阅 # strings.Count countrunes countwords len "},{"id":278,"href":"/hugo/functions/strings_trimleft/","title":"strings.TrimLeft","section":"函数","content":"将以下英文翻译为中文：\nstrings.TrimLeft # https://gohugo.io/functions/strings.trimleft/\nReturns a slice of a given string with all leading characters contained in the cutset removed.\n语法 # strings.TrimLeft CUTSET STRING Given the string \u0026quot;abba\u0026quot;, leading \u0026quot;a\u0026quot;’s can be removed a follows:\n{{ strings.TrimLeft \u0026#34;a\u0026#34; \u0026#34;abba\u0026#34; }} → \u0026#34;bba\u0026#34; Numbers can be handled as well:\n{{ strings.TrimLeft 12 1221341221 }} → \u0026#34;341221\u0026#34; 另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":279,"href":"/hugo/functions/strings_trimprefix/","title":"strings.TrimPrefix","section":"函数","content":"将以下英文翻译为中文：\nstrings.TrimPrefix # https://gohugo.io/functions/strings.trimprefix/\nReturns a given string s without the provided leading prefix string. If s doesn’t start with prefix, s is returned unchanged.\n语法 # strings.TrimPrefix PREFIX STRING Given the string \u0026quot;aabbaa\u0026quot;, the specified prefix is only removed if \u0026quot;aabbaa\u0026quot; starts with it:\n{{ strings.TrimPrefix \u0026#34;a\u0026#34; \u0026#34;aabbaa\u0026#34; }} → \u0026#34;abbaa\u0026#34; {{ strings.TrimPrefix \u0026#34;aa\u0026#34; \u0026#34;aabbaa\u0026#34; }} → \u0026#34;bbaa\u0026#34; {{ strings.TrimPrefix \u0026#34;aaa\u0026#34; \u0026#34;aabbaa\u0026#34; }} → \u0026#34;aabbaa\u0026#34; 另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":280,"href":"/hugo/functions/strings_trimright/","title":"strings.TrimRight","section":"函数","content":"将以下英文翻译为中文：\nstrings.TrimRight # https://gohugo.io/functions/strings.trimright/\nReturns a slice of a given string with all trailing characters contained in the cutset removed.\n语法 # strings.TrimRight CUTSET STRING Given the string \u0026quot;abba\u0026quot;, trailing \u0026quot;a\u0026quot;’s can be removed a follows:\n{{ strings.TrimRight \u0026#34;a\u0026#34; \u0026#34;abba\u0026#34; }} → \u0026#34;abb\u0026#34; Numbers can be handled as well:\n{{ strings.TrimRight 12 1221341221 }} → \u0026#34;122134\u0026#34; 另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":281,"href":"/hugo/functions/strings_trimsuffix/","title":"strings.TrimSuffix","section":"函数","content":"将以下英文翻译为中文：\nstrings.TrimSuffix # https://gohugo.io/functions/strings.trimsuffix/\nReturns a given string s without the provided trailing suffix string. If s doesn’t end with suffix, s is returned unchanged.\n语法 # strings.TrimSuffix SUFFIX STRING Given the string \u0026quot;aabbaa\u0026quot;, the specified suffix is only removed if \u0026quot;aabbaa\u0026quot; ends with it:\n{{ strings.TrimSuffix \u0026#34;a\u0026#34; \u0026#34;aabbaa\u0026#34; }} → \u0026#34;aabba\u0026#34; {{ strings.TrimSuffix \u0026#34;aa\u0026#34; \u0026#34;aabbaa\u0026#34; }} → \u0026#34;aabb\u0026#34; {{ strings.TrimSuffix \u0026#34;aaa\u0026#34; \u0026#34;aabbaa\u0026#34; }} → \u0026#34;aabbaa\u0026#34; 另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":282,"href":"/hugo/functions/substr/","title":"substr","section":"函数","content":"将以下英文翻译为中文：\nsubstr # https://gohugo.io/functions/substr/\nExtracts parts of a string from a specified character’s position and returns the specified number of characters.\n语法 # substr STRING START [LENGTH] strings.Substr STRING START [LENGTH] It normally takes two parameters: start and length. It can also take one parameter: start, i.e. length is omitted, in which case the substring starting from start until the end of the string will be returned.\nTo extract characters from the end of the string, use a negative start number.\nIf length is given and is negative, that number of characters will be omitted from the end of string.\n{{ substr \u0026#34;abcdef\u0026#34; 0 }} → \u0026#34;abcdef\u0026#34; {{ substr \u0026#34;abcdef\u0026#34; 1 }} → \u0026#34;bcdef\u0026#34; {{ substr \u0026#34;abcdef\u0026#34; 0 1 }} → \u0026#34;a\u0026#34; {{ substr \u0026#34;abcdef\u0026#34; 1 1 }} → \u0026#34;b\u0026#34; {{ substr \u0026#34;abcdef\u0026#34; 0 -1 }} → \u0026#34;abcde\u0026#34; {{ substr \u0026#34;abcdef\u0026#34; 1 -1 }} → \u0026#34;bcde\u0026#34; {{ substr \u0026#34;abcdef\u0026#34; -1 }} → \u0026#34;f\u0026#34; {{ substr \u0026#34;abcdef\u0026#34; -2 }} → \u0026#34;ef\u0026#34; {{ substr \u0026#34;abcdef\u0026#34; -1 1 }} → \u0026#34;f\u0026#34; {{ substr \u0026#34;abcdef\u0026#34; -2 1 }} → \u0026#34;e\u0026#34; {{ substr \u0026#34;abcdef\u0026#34; -3 -1 }} → \u0026#34;de\u0026#34; {{ substr \u0026#34;abcdef\u0026#34; -3 -2 }} → \u0026#34;d\u0026#34; 另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":283,"href":"/hugo/functions/symdiff/","title":"symdiff","section":"函数","content":"将以下英文翻译为中文：\nsymdiff # https://gohugo.io/functions/symdiff/\ncollections.SymDiff (alias symdiff) returns the symmetric difference of two collections.\n语法 # COLLECTION | symdiff COLLECTION Example:\n{{ slice 1 2 3 | symdiff (slice 3 4) }} The above will print [1 2 4].\nAlso see https://en.wikipedia.org/wiki/Symmetric_difference\n另请参阅 # intersect union append complement group "},{"id":284,"href":"/hugo/functions/templates_exists/","title":"templates.Exists","section":"函数","content":"将以下英文翻译为中文：\ntemplates.Exists # https://gohugo.io/functions/templates.exists/\nChecks whether a template file exists under the given path relative to the layouts directory.\n语法 # templates.Exists PATH A template file is any file living below the layouts directories of either the project or any of its theme components including partials and shortcodes.\nThe function is particularly handy with dynamic path. The following example ensures the build will not break on a .Type missing its dedicated header partial.\n{{ $partialPath := printf \u0026#34;headers/%s.html\u0026#34; .Type }} {{ if templates.Exists ( printf \u0026#34;partials/%s\u0026#34; $partialPath ) }} {{ partial $partialPath . }} {{ else }} {{ partial \u0026#34;headers/default.html\u0026#34; . }} {{ end }} 另请参阅 # Create Your Own Shortcodes Hugo\u0026rsquo;s Lookup Order RSS Templates Section Page Templates Single Page Templates "},{"id":285,"href":"/hugo/functions/time/","title":"time","section":"函数","content":"将以下英文翻译为中文：\ntime # https://gohugo.io/functions/time/\nConverts a timestamp string into a time.Time structure.\n语法 # time INPUT [TIMEZONE] time converts a timestamp string with an optional default location into a time.Time structure so you can access its fields:\n{{ time \u0026#34;2016-05-28\u0026#34; }} → \u0026#34;2016-05-28T00:00:00Z\u0026#34; {{ (time \u0026#34;2016-05-28\u0026#34;).YearDay }} → 149 {{ mul 1000 (time \u0026#34;2016-05-28T10:30:00.00+10:00\u0026#34;).Unix }} → 1464395400000, or Unix time in milliseconds Using Locations # The optional TIMEZONE parameter is a string that sets a default time zone (or more specific, the location, which represents the collection of time offsets in a geographical area) that is associated with the specified time value. If the time value has an explicit timezone or offset specified, it will take precedence over the TIMEZONE parameter.\nThe list of valid locations may be system dependent, but should include UTC, Local, or any location in the IANA Time Zone database.\nIf no TIMEZONE is set, the timeZone from site configuration will be used.\n{{ time \u0026#34;2020-10-20\u0026#34; }} → 2020-10-20 00:00:00 +0000 UTC {{ time \u0026#34;2020-10-20\u0026#34; \u0026#34;America/Los_Angeles\u0026#34; }} → 2020-10-20 00:00:00 -0700 PDT {{ time \u0026#34;2020-01-20\u0026#34; \u0026#34;America/Los_Angeles\u0026#34; }} → 2020-01-20 00:00:00 -0800 PST Example: Using time to get Month Index # The following example takes a UNIX timestamp—set as utimestamp: \u0026quot;1489276800\u0026quot; in a content’s front matter—converts the timestamp (string) to an integer using the int function, and then uses printf to convert the Month property of time into an index.\nThe following example may be useful when setting up multilingual sites:\nunix-to-month-integer.html\n{{ $time := time (int .Params.addDate)}} =\u0026gt; $time = 1489276800 {{ $time.Month }} =\u0026gt; \u0026#34;March\u0026#34; {{ $monthindex := printf \u0026#34;%d\u0026#34; $time.Month }} =\u0026gt; $monthindex = 3 另请参阅 # .AddDate .Format .Unix now time.Format "},{"id":286,"href":"/hugo/functions/time_format/","title":"time.Format","section":"函数","content":"将以下英文翻译为中文：\ntime.Format # https://gohugo.io/functions/dateformat/\nConverts a date/time to a localized string.\n语法 # time.Format LAYOUT INPUT dateFormat LAYOUT INPUT time.Format (alias dateFormat) converts either a time.Time object (e.g. .Date) or a timestamp string INPUT into the format specified by the LAYOUT string.\n{{ time.Format \u0026#34;Monday, Jan 2, 2006\u0026#34; \u0026#34;2015-01-21\u0026#34; }} → \u0026#34;Wednesday, Jan 21, 2015\u0026#34; time.Format returns a localized string for the current language.\nThe LAYOUT string can be either:\nGo’s Layout String to learn about how the LAYOUT string has to be formatted. There are also some useful examples. A custom Hugo layout identifier (see full list below) See the time function to convert a timestamp string to a Go time.Time type value.\nDate/time formatting layouts # Go’s date layout strings can be hard to reason about, especially with multiple languages. You can alternatively use some predefined layout identifiers that will output localized dates or times:\n{{ .Date | time.Format \u0026#34;:date_long\u0026#34; }} The full list of custom layouts with examples for English:\n:date_full =\u0026gt; Wednesday, June 6, 2018 :date_long =\u0026gt; June 6, 2018 :date_medium =\u0026gt; Jun 6, 2018 :date_short =\u0026gt; 6/6/18 :time_full =\u0026gt; 2:09:37 am UTC :time_long =\u0026gt; 2:09:37 am UTC :time_medium =\u0026gt; 2:09:37 am :time_short =\u0026gt; 2:09 am 另请参阅 # .AddDate .Format .Unix now time "},{"id":287,"href":"/hugo/functions/time_parseduration/","title":"time.ParseDuration","section":"函数","content":"将以下英文翻译为中文：\ntime.ParseDuration # https://gohugo.io/functions/time.parseduration/\nParses a given duration string into a time.Duration structure.\n语法 # time.ParseDuration DURATION time.ParseDuration parses a duration string into a time.Duration structure so you can access its fields. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as 300ms, -1.5h or 2h45m. Valid time units are ns, us (or µs), ms, s, m, h.\nYou can perform time operations on the returned time.Duration value:\n{{ printf \u0026#34;There are %.0f seconds in one day.\u0026#34; (time.ParseDuration \u0026#34;24h\u0026#34;).Seconds }} \u0026lt;!-- Output: There are 86400 seconds in one day. --\u0026gt; "},{"id":288,"href":"/hugo/functions/title/","title":"title","section":"函数","content":"将以下英文翻译为中文：\ntitle # https://gohugo.io/functions/title/\n​\t将提供的字符串转换为标题大小写样式。\n语法 # title STRING strings.Title STRING {{ title \u0026#34;table of contents (TOC)\u0026#34; }} → \u0026#34;Table of Contents (TOC)\u0026#34; ​\t默认情况下，Hugo 遵循美联社风格指南（Associated Press (AP) Stylebook）的大写规则。如果您更喜欢遵循芝加哥手册风格（Chicago Manual of Style），或者使用 Go 的惯例将每个单词都大写，请更改您的站点配置。\n另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":289,"href":"/hugo/functions/transform_unmarshal/","title":"transform.Unmarshal","section":"函数","content":"将以下英文翻译为中文：\ntransform.Unmarshal # https://gohugo.io/functions/transform.unmarshal/\ntransform.Unmarshal (alias unmarshal) parses the input and converts it into a map or an array. Supported formats are JSON, TOML, YAML, XML and CSV.\n语法 # RESOURCE or STRING | transform.Unmarshal [OPTIONS] The function accepts either a Resource created in Hugo Pipes or via Page Bundles, or simply a string. The two examples below will produce the same map:\n{{ $greetings := \u0026#34;hello = \\\u0026#34;Hello Hugo\\\u0026#34;\u0026#34; | transform.Unmarshal }}` {{ $greetings := \u0026#34;hello = \\\u0026#34;Hello Hugo\\\u0026#34;\u0026#34; | resources.FromString \u0026#34;data/greetings.toml\u0026#34; | transform.Unmarshal }} In both the above examples, you get a map you can work with:\n{{ $greetings.hello }} The above prints Hello Hugo.\nCSV Options # Unmarshal with CSV as input has some options you can set:\ndelimiter\nThe delimiter used, default is ,.\ncomment\nThe comment character used in the CSV. If set, lines beginning with the comment character without preceding whitespace are ignored.:\nExample:\n{{ $csv := \u0026#34;a;b;c\u0026#34; | transform.Unmarshal (dict \u0026#34;delimiter\u0026#34; \u0026#34;;\u0026#34;) }} XML data # As a convenience, Hugo allows you to access XML data in the same way that you access JSON, TOML, and YAML: you do not need to specify the root node when accessing the data.\nTo get the contents of \u0026lt;title\u0026gt; in the document below, you use {{ .message.title }}:\n\u0026lt;root\u0026gt; \u0026lt;message\u0026gt; \u0026lt;title\u0026gt;Hugo rocks!\u0026lt;/title\u0026gt; \u0026lt;description\u0026gt;Thanks for using Hugo\u0026lt;/description\u0026gt; \u0026lt;/message\u0026gt; \u0026lt;/root\u0026gt; The following example lists the items of an RSS feed:\n{{ with resources.Get \u0026#34;https://example.com/rss.xml\u0026#34; | transform.Unmarshal }} {{ range .channel.item }} \u0026lt;strong\u0026gt;{{ .title | plainify | htmlUnescape }}\u0026lt;/strong\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;p\u0026gt;{{ .description | plainify | htmlUnescape }}\u0026lt;/p\u0026gt; {{ $link := .link | plainify | htmlUnescape }} \u0026lt;a href=\u0026#34;{{ $link }}\u0026#34;\u0026gt;{{ $link }}\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;hr\u0026gt; {{ end }} {{ end }} "},{"id":290,"href":"/hugo/functions/trim/","title":"trim","section":"函数","content":"将以下英文翻译为中文：\ntrim # https://gohugo.io/functions/trim/\nReturns a slice of a passed string with all leading and trailing characters from cutset removed.\n语法 # trim INPUT CUTSET strings.Trim INPUT CUTSET {{ trim \u0026#34;++Batman--\u0026#34; \u0026#34;+-\u0026#34; }} → \u0026#34;Batman\u0026#34; trim requires the second argument, which tells the function specifically what to remove from the first argument. There is no default value for the second argument, so the following usage will not work:\n{{ trim .Inner }} Instead, the following example tells trim to remove extra new lines from the content contained in the shortcode .Inner variable:\n{{ trim .Inner \u0026#34;\\n\u0026#34; }} Go templates also provide a simple method for trimming whitespace from either side of a Go tag by including a hyphen (-).\n另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":291,"href":"/hugo/functions/truncate/","title":"truncate","section":"函数","content":"将以下英文翻译为中文：\ntruncate # https://gohugo.io/functions/truncate/\nTruncates a text to a max length without cutting words or leaving unclosed HTML tags.\n语法 # truncate SIZE [ELLIPSIS] INPUT strings.Truncate SIZE [ELLIPSIS] INPUT Since Go templates are HTML-aware, truncate will intelligently handle normal strings vs HTML strings:\n{{ \u0026#34;\u0026lt;em\u0026gt;Keep my HTML\u0026lt;/em\u0026gt;\u0026#34; | safeHTML | truncate 10 }}` → \u0026lt;em\u0026gt;Keep my …\u0026lt;/em\u0026gt;` If you have a raw string that contains HTML tags you want to remain treated as HTML, you will need to convert the string to HTML using the safeHTML template function before sending the value to truncate. Otherwise, the HTML tags will be escaped when passed through the truncate function.\n另请参阅 # anchorize emojify errorf and warnf float htmlEscape "},{"id":292,"href":"/hugo/functions/union/","title":"union","section":"函数","content":"将以下英文翻译为中文：\nunion # https://gohugo.io/functions/union/\nGiven two arrays or slices, returns a new array that contains the elements or objects that belong to either or both arrays/slices.\n语法 # union SET1 SET2 Given two arrays (or slices) A and B, this function will return a new array that contains the elements or objects that belong to either A or to B or to both. The elements supported are strings, integers, and floats (only float64).\n{{ union (slice 1 2 3) (slice 3 4 5) }} \u0026lt;!-- returns [1 2 3 4 5] --\u0026gt; {{ union (slice 1 2 3) nil }} \u0026lt;!-- returns [1 2 3] --\u0026gt; {{ union nil (slice 1 2 3) }} \u0026lt;!-- returns [1 2 3] --\u0026gt; {{ union nil nil }} \u0026lt;!-- returns an error because both arrays/slices have to be of the same type --\u0026gt; OR filter in where query # This is also very useful to use as OR filters when combined with where:\n{{ $pages := where .Site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;not in\u0026#34; (slice \u0026#34;page\u0026#34; \u0026#34;about\u0026#34;) }} {{ $pages = $pages | union (where .Site.RegularPages \u0026#34;Params.pinned\u0026#34; true) }} {{ $pages = $pages | intersect (where .Site.RegularPages \u0026#34;Params.images\u0026#34; \u0026#34;!=\u0026#34; nil) }} The above fetches regular pages not of page or about type unless they are pinned. And finally, we exclude all pages with no images set in Page params.\nSee intersect for AND.\n另请参阅 # intersect symdiff append complement group "},{"id":293,"href":"/hugo/functions/uniq/","title":"uniq","section":"函数","content":"将以下英文翻译为中文：\nuniq # https://gohugo.io/functions/uniq/\nTakes in a slice or array and returns a slice with duplicate elements removed.\n语法 # uniq SET {{ slice 1 3 2 1 | uniq }} --\u0026gt; [1 3 2] 另请参阅 # absLangURL relLangURL Multilingual Mode i18n Links and Cross References "},{"id":294,"href":"/hugo/functions/upper/","title":"upper","section":"函数","content":"将以下英文翻译为中文：\nupper # https://gohugo.io/functions/upper/\nConverts all characters in a string to uppercase\n语法 # upper INPUT strings.ToUpper INPUT Note that upper can be applied in your templates in more than one way:\n{{ upper \u0026#34;BatMan\u0026#34; }} → \u0026#34;BATMAN\u0026#34; {{ \u0026#34;BatMan\u0026#34; | upper }} → \u0026#34;BATMAN\u0026#34; "},{"id":295,"href":"/hugo/functions/urlize/","title":"urlize","section":"函数","content":"将以下英文翻译为中文：\nurlize # https://gohugo.io/functions/urlize/\nTakes a string, sanitizes it for usage in URLs, and converts spaces to hyphens.\n语法 # urlize INPUT The following examples pull from a content file with the following front matter:\nxxxxxxxxxx2 1{{ upper \u0026ldquo;BatMan\u0026rdquo; }} → \u0026ldquo;BATMAN\u0026quot;2{{ \u0026ldquo;BatMan\u0026rdquo; | upper }} → \u0026ldquo;BATMAN\u0026quot;go-html-template\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- location: Chicago IL tags: - pizza - beer - hot dogs title: The World's Greatest City --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ location = 'Chicago IL' tags = ['pizza', 'beer', 'hot dogs'] title = \u0026quot;The World's Greatest City\u0026quot; +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;location\u0026quot;: \u0026quot;Chicago IL\u0026quot;, \u0026quot;tags\u0026quot;: [ \u0026quot;pizza\u0026quot;, \u0026quot;beer\u0026quot;, \u0026quot;hot dogs\u0026quot; ], \u0026quot;title\u0026quot;: \u0026quot;The World's Greatest City\u0026quot; } ``` The following might be used as a partial within a single page template:\nlayouts/partials/content-header.html\n\u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ with .Params.location }} \u0026lt;div\u0026gt;\u0026lt;a href=\u0026#34;/locations/{{ . | urlize }}\u0026#34;\u0026gt;{{ . }}\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; {{ end }} \u0026lt;!-- Creates a list of tags for the content and links to each of their pages --\u0026gt; {{ with .Params.tags }} \u0026lt;ul\u0026gt; {{ range .}} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;/tags/{{ . | urlize }}\u0026#34;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} \u0026lt;/header\u0026gt; The preceding partial would then output to the rendered page as follows:\n\u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;The World\u0026amp;#39;s Greatest City\u0026lt;/h1\u0026gt; \u0026lt;div\u0026gt;\u0026lt;a href=\u0026#34;/locations/chicago-il\u0026#34;\u0026gt;Chicago IL\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;/tags/pizza\u0026#34;\u0026gt;pizza\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;/tags/beer\u0026#34;\u0026gt;beer\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;/tags/hot-dogs\u0026#34;\u0026gt;hot dogs\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/header\u0026gt; 另请参阅 # safeURL Links and Cross References URL Management absLangURL absURL "},{"id":296,"href":"/hugo/functions/urlquery/","title":"urlquery","section":"函数","content":"将以下英文翻译为中文：\nurlquery # https://gohugo.io/functions/urlquery/\nReturns the escaped value of the textual representation of its arguments in a form suitable for embedding in a URL query.\n语法 # urlquery INPUT [INPUT]... This template code:\n{{ $u := urlquery \u0026#34;https://\u0026#34; \u0026#34;example.com\u0026#34; | safeURL }} \u0026lt;a href=\u0026#34;https://example.org?url={{ $u }}\u0026#34;\u0026gt;Link\u0026lt;/a\u0026gt; Is rendered to:\n\u0026lt;a href=\u0026#34;https://example.org?url=https%3A%2F%2Fexample.com\u0026#34;\u0026gt;Link\u0026lt;/a\u0026gt; 另请参阅 # Links and Cross References URL Management absLangURL absURL querify "},{"id":297,"href":"/hugo/functions/urls_parse/","title":"urls.Parse","section":"函数","content":"将以下英文翻译为中文：\nurls.Parse # https://gohugo.io/functions/urls.parse/\nParses a URL into a URL structure.\n语法 # urls.Parse URL The urls.Parse function parses a URL into a URL structure. The URL may be relative (a path, without a host) or absolute (starting with a scheme). Hugo throws an error when parsing an invalid URL.\n{{ $url := \u0026#34;https://example.org:123/foo?a=6\u0026amp;b=7#bar\u0026#34; }} {{ $u := urls.Parse $url }} {{ $u.IsAbs }} → true {{ $u.Scheme }} → https {{ $u.Host }} → example.org:123 {{ $u.Hostname }} → example.org {{ $u.RequestURI }} → /foo?a=6\u0026amp;b=7 {{ $u.Path }} → /foo {{ $u.Query }} → map[a:[6] b:[7]] {{ $u.Query.a }} → [6] {{ $u.Query.Get \u0026#34;a\u0026#34; }} → 6 {{ $u.Query.Has \u0026#34;b\u0026#34; }} → true {{ $u.Fragment }} → bar 另请参阅 # Links and Cross References URL Management absLangURL absURL querify "},{"id":298,"href":"/hugo/functions/where/","title":"where","section":"函数","content":"将以下英文翻译为中文：\nwhere # https://gohugo.io/functions/where/\nFilters an array to only the elements containing a matching value for a given field.\n语法 # where COLLECTION KEY [OPERATOR] MATCH where filters an array to only the elements containing a matching value for a given field.\nIt works in a similar manner to the where keyword in SQL.\n{{ range where .Pages \u0026#34;Section\u0026#34; \u0026#34;foo\u0026#34; }} {{ .Content }} {{ end }} It can be used by dot-chaining the second argument to refer to a nested element of a value.\ncontent/example.md\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml --- series: golang title: Example --- ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml +++ series = 'golang' title = 'Example' +++ ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;series\u0026quot;: \u0026quot;golang\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Example\u0026quot; } ``` {{ range where .Site.Pages \u0026#34;Params.series\u0026#34; \u0026#34;golang\u0026#34; }} {{ .Content }} {{ end }} It can also be used with the logical operators !=, \u0026gt;=, in, etc. Without an operator, where compares a given field with a matching value equivalent to =.\n{{ range where .Pages \u0026#34;Section\u0026#34; \u0026#34;!=\u0026#34; \u0026#34;foo\u0026#34; }} {{ .Content }} {{ end }} The following logical operators are available with where:\n=, ==, eq\ntrue if a given field value equals a matching value\n!=, \u0026lt;\u0026gt;, ne\ntrue if a given field value doesn’t equal a matching value\n\u0026gt;=, ge\ntrue if a given field value is greater than or equal to a matching value\n\u0026gt;, gt\ntrue if a given field value is greater than a matching value\n\u0026lt;=, le\ntrue if a given field value is lesser than or equal to a matching value\n\u0026lt;, lt\ntrue if a given field value is lesser than a matching value\nin\ntrue if a given field value is included in a matching value; a matching value must be an array or a slice\nnot in\ntrue if a given field value isn’t included in a matching value; a matching value must be an array or a slice\nintersect\ntrue if a given field value that is a slice/array of strings or integers contains elements in common with the matching value; it follows the same rules as the intersect function.\nUse where with Booleans # When using booleans you should not put quotation marks.\n{{ range where .Pages \u0026#34;Draft\u0026#34; true }} \u0026lt;p\u0026gt;{{ .Title }}\u0026lt;/p\u0026gt; {{ end }} Use where with intersect # {{ range where .Site.Pages \u0026#34;Params.tags\u0026#34; \u0026#34;intersect\u0026#34; .Params.tags }} {{ if ne .Permalink $.Permalink }} {{ .Render \u0026#34;summary\u0026#34; }} {{ end }} {{ end }} You can also put the returned value of the where clauses into a variable:\nwhere-intersect-variables.html\n{{ $v1 := where .Site.Pages \u0026#34;Params.a\u0026#34; \u0026#34;v1\u0026#34; }} {{ $v2 := where .Site.Pages \u0026#34;Params.b\u0026#34; \u0026#34;v2\u0026#34; }} {{ $filtered := $v1 | intersect $v2 }} {{ range $filtered }} {{ end }} Use where with first # Using first and where together can be very powerful. Below snippet gets a list of posts only from main sections, sorts it using the default ordering for lists (i.e., weight =\u0026gt; date), and then ranges through only the first 5 posts in that list:\nfirst-and-where-together.html\n{{ range first 5 (where site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;in\u0026#34; site.Params.mainSections) }} {{ .Content }} {{ end }} Nest where Clauses # You can also nest where clauses to drill down on lists of content by more than one parameter. The following first grabs all pages in the \u0026ldquo;blog\u0026rdquo; section and then ranges through the result of the first where clause and finds all pages that are not featured:\n{{ range where (where .Pages \u0026#34;Section\u0026#34; \u0026#34;blog\u0026#34; ) \u0026#34;Params.featured\u0026#34; \u0026#34;!=\u0026#34; true }} Unset Fields # Filtering only works for set fields. To check whether a field is set or exists, you can use the operand nil.\nThis can be useful to filter a small amount of pages from a large pool. Instead of setting a field on all pages, you can set that field on required pages only.\nOnly the following operators are available for nil\n=, ==, eq: True if the given field is not set. !=, \u0026lt;\u0026gt;, ne: True if the given field is set. {{ range where .Pages \u0026#34;Params.specialpost\u0026#34; \u0026#34;!=\u0026#34; nil }} {{ .Content }} {{ end }} Portable where filters – site.Params.mainSections # This is especially important for themes.\nTo list the most relevant pages on the front page or similar, you should use the site.Params.mainSections list instead of comparing section names to hard-coded values like \u0026quot;posts\u0026quot; or \u0026quot;post\u0026quot;.\n{{ $pages := where site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;in\u0026#34; site.Params.mainSections }} If the user has not set this config parameter in their site config, it will default to the section with the most pages.\nThe user can override the default:\nconfig.\n=== \u0026ldquo;yaml\u0026rdquo;\n``` yaml params: mainSections: - blog - docs ``` === \u0026ldquo;toml\u0026rdquo;\n``` toml [params] mainSections = ['blog', 'docs'] ``` === \u0026ldquo;json\u0026rdquo;\n``` json { \u0026quot;params\u0026quot;: { \u0026quot;mainSections\u0026quot;: [ \u0026quot;blog\u0026quot;, \u0026quot;docs\u0026quot; ] } } ``` "},{"id":299,"href":"/hugo/functions/with/","title":"with","section":"函数","content":"将以下英文翻译为中文：\nwith # https://gohugo.io/functions/with/\nRebinds the context (.) within its scope and skips the block if the variable is absent or empty.\n语法 # with INPUT An alternative way of writing an if statement and then referencing the same value is to use with instead. with rebinds the context (.) within its scope and skips the block if the variable is absent, unset or empty.\nThe set of empty values is defined by the Go templates package. Empty values include false, the number zero, and the empty string.\nIf you want to render a block if an index or key is present in a slice, array, channel or map, regardless of whether the value is empty, you should use isset instead.\nThe following example checks for a user-defined site variable called twitteruser. If the key-value is not set, the following will render nothing:\nlayouts/partials/twitter.html\n{{ with .Site.Params.twitteruser }}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/{{ . }}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{ . }}\u0026#34; alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{ end }} "}]