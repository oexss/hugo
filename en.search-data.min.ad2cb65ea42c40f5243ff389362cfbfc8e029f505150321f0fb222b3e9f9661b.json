[{"id":0,"href":"/docs/get-started/","title":"Get Started","section":"Docs","content":" Get started # "},{"id":1,"href":"/docs/packages/gox/","title":"Gox","section":"Docs","content":" Gox # HTML knowledge required Composable pure function view layer You can use any HTML element as Go func Advice\nUse import alias import . \u0026ldquo;github.com/daarlabs/arcanum/gox\u0026rdquo; Be careful with naming convention to prevent HTML nodes names collisions Sample code # package app import ( . \u0026#34;github.com/daarlabs/arcanum/gox\u0026#34; ) func Page() string { return Render( Html( Lang(\u0026#34;en\u0026#34;), Head( Title(Text(\u0026#34;Example app\u0026#34;)), ), Body( H1(Text(\u0026#34;Example page\u0026#34;)), P(Text(\u0026#34;Example paragraph\u0026#34;)), ), ), ) } Render # Render function transform Gox nodes to string\nRender( Div(Text(\u0026#34;Gox\u0026#34;)) ) Text # For the composition feature, we need to use text node, instead of primitive string\nH1(Text(\u0026#34;Headline 1\u0026#34;)) P(Text(\u0026#34;Paragraph\u0026#34;)) Elements # Div() H1() P() Attributes # Button( Type(\u0026#34;submit\u0026#34;), CustomData(\u0026#34;track\u0026#34;, \u0026#34;submit-button\u0026#34;), ) A( Href(\u0026#34;/\u0026#34;), Text(\u0026#34;Go to homepage\u0026#34;), ) Shared # Some nodes have shared name (label, style, title, \u0026hellip;) Modifiers Element(), Attribute() will change node type Label(Text(\u0026#34;E-mail\u0026#34;)) Style(Element(), Raw(\u0026#34;body{background:red;}\u0026#34;)) Fragment # Wrapper, when you need group nodes to single node\nFragment( Div(), Span(), H1(), ) Write # If you have io.Writer, like http.ResponseWriter, you can use Write(w io.Writer, nodes \u0026hellip;Node) function\nWrite(w, Div(Text(\u0026#34;this is the response\u0026#34;))) Append # After node initialization, you can append nodes to the node\nAppend( Div(), Text(\u0026#34;Appended node\u0026#34;), ) Raw # Pure HTML can be used with Raw() node\nRaw(`\u0026lt;div\u0026gt;Raw element\u0026lt;/div\u0026gt;`) Factory # If some element, attribute missing, or you have some custom features, you can create you own Gox nodes\nCustomElement := CreateElement(\u0026#34;my-custom-element\u0026#34;) CustomAttribute := CreateAttribute[string](\u0026#34;my-custom-attribute\u0026#34;) CustomElement( CustomAttribute(\u0026#34;some-value\u0026#34;), ) Plugin # You can also create custom nodes, as struct, with only one required method Node() Node\ntype MyPlugin struct { SomeValue string } func (p MyPlugin) Node() Node { return Div( Text(p.SomeValue) ) } Clsx # Built-in plugin to conditional classes\nDiv( Clsx{ \u0026#34;class-1 class-2\u0026#34;: true, \u0026#34;class-3\u0026#34;: false, } ) Component # Gox offers compose power to create stateless UI components\nfunc MainButton(content string) Node { return Button( Type(\u0026#34;button\u0026#34;), CustomData(\u0026#34;test\u0026#34;, \u0026#34;test-id\u0026#34;), Text(content), ) } "},{"id":2,"href":"/docs/packages/mirage/","title":"Mirage","section":"Docs","content":" Mirage # "},{"id":3,"href":"/docs/packages/mirage/assets/","title":"Assets","section":"Mirage","content":" Assets # "},{"id":4,"href":"/docs/packages/mirage/component/","title":"Component","section":"Mirage","content":" Component # "},{"id":5,"href":"/docs/packages/mirage/config/","title":"Config","section":"Mirage","content":" Config # "},{"id":6,"href":"/docs/packages/mirage/context/","title":"Context","section":"Mirage","content":" Context # "},{"id":7,"href":"/docs/packages/mirage/context/component/","title":"Component","section":"Context","content":" Context - Component # "},{"id":8,"href":"/docs/packages/mirage/context/factory/","title":"Factory","section":"Context","content":" Context - Factory # "},{"id":9,"href":"/docs/packages/mirage/context/flash-message/","title":"Flash Message","section":"Context","content":" Context - Fla # "},{"id":10,"href":"/docs/packages/mirage/context/generator/","title":"Generator","section":"Context","content":" Context - Generator # "},{"id":11,"href":"/docs/packages/mirage/context/page/","title":"Page","section":"Context","content":" Cont # "},{"id":12,"href":"/docs/packages/mirage/context/request/","title":"Request","section":"Context","content":" Request # "},{"id":13,"href":"/docs/packages/mirage/context/response/","title":"Response","section":"Context","content":" Request # "},{"id":14,"href":"/docs/packages/mirage/form/","title":"Form","section":"Mirage","content":" Form # "},{"id":15,"href":"/docs/packages/mirage/handler/","title":"Handler","section":"Mirage","content":" Handler # "},{"id":16,"href":"/docs/packages/mirage/layout/","title":"Layout","section":"Mirage","content":" Layout # "},{"id":17,"href":"/docs/packages/mirage/localization/","title":"Localization","section":"Mirage","content":" Localization # "},{"id":18,"href":"/docs/packages/mirage/plugin/","title":"Plugin","section":"Mirage","content":" Plugin # "},{"id":19,"href":"/docs/packages/mirage/router/","title":"Router","section":"Mirage","content":" Router # "},{"id":20,"href":"/docs/packages/tempest/","title":"Tempest","section":"Docs","content":" Tempest # "}]